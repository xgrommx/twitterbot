{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"asnc",
				"asyncHandle"
			],
			[
				"text",
				"textarea"
			],
			[
				"can",
				"cancelCallback"
			],
			[
				"exampl",
				"exampleJson"
			],
			[
				"compl",
				"completeCallback"
			],
			[
				"expe",
				"expectation"
			],
			[
				"unex",
				"unexpectedEOS"
			],
			[
				"exp",
				"expecting"
			],
			[
				"tok",
				"tokenIsExpected"
			],
			[
				"Filte",
				"FilteredSequence"
			],
			[
				"seq",
				"sequence"
			],
			[
				"Rever",
				"ReversedIterator"
			],
			[
				"filt",
				"filterFn"
			],
			[
				"rever",
				"reversedParent"
			],
			[
				"Objec",
				"ObjectLikeSequence"
			],
			[
				"asynch",
				"asynchronous"
			],
			[
				"curr",
				"currentChunk"
			],
			[
				"curre",
				"currentChunk"
			],
			[
				"Num",
				"NumberPattern"
			],
			[
				"clos",
				"closingCheck"
			],
			[
				"closeO",
				"closeOfArray"
			],
			[
				"clons",
				"closingCheck"
			],
			[
				"flatte",
				"flattenFn"
			],
			[
				"fl",
				"flattenFn"
			],
			[
				"compar",
				"comparisonResult"
			],
			[
				"comp",
				"comparisonResult"
			],
			[
				"call",
				"callback"
			],
			[
				"crea",
				"createCallback"
			],
			[
				"pred",
				"predicate"
			],
			[
				"back",
				"background-position"
			],
			[
				"mar",
				"margin-top"
			],
			[
				"scrol",
				"scrollHeight"
			],
			[
				"scro",
				"scrollTop"
			],
			[
				"Gener",
				"GeneratedIterator"
			],
			[
				"Filter",
				"FilteringArrayIterator"
			],
			[
				"arr",
				"arraySlice"
			],
			[
				"Conca",
				"concat"
			],
			[
				"fla",
				"flattened"
			],
			[
				"Stream",
				"StreamedWrapper"
			],
			[
				"f",
				"false"
			],
			[
				"String",
				"StringMatchSequence"
			],
			[
				"ar",
				"arg1"
			],
			[
				"Indxed",
				"IndexedConcatenatedSequence"
			],
			[
				"Indexed",
				"IndexedConcatenatedSequence"
			],
			[
				"Arra",
				"ArrayLikeSequence"
			],
			[
				"par",
				"parentLength"
			],
			[
				"pare",
				"parentLength"
			],
			[
				"var",
				"var_args"
			],
			[
				"le",
				"length"
			],
			[
				"inclu",
				"includedInAll"
			],
			[
				"Uni",
				"UniqueMemoizer"
			],
			[
				"value",
				"valueOnly"
			],
			[
				"synta",
				"syntax_highlight"
			],
			[
				"fast",
				"fastestResult"
			],
			[
				"file",
				"fileAndAnchor"
			],
			[
				"tar",
				"targetId"
			],
			[
				"redce",
				"reduceRight"
			],
			[
				"arra",
				"arrayCache"
			],
			[
				"contain",
				"containsBefore"
			],
			[
				"conta",
				"containsBefore"
			],
			[
				"method",
				"method_data"
			],
			[
				"jSON",
				"JsonIterator"
			],
			[
				"inter",
				"intersection"
			],
			[
				"head",
				"header	Tag"
			],
			[
				"java",
				"javascript"
			],
			[
				"fie",
				"fiveHundredIntegers"
			],
			[
				"one",
				"oneHundredFiftyIntegers"
			],
			[
				"get",
				"getEachForSource"
			],
			[
				"Uniqu",
				"UniqueArrayWrapper"
			],
			[
				"col",
				"columnName"
			],
			[
				"colu",
				"columnWidths"
			],
			[
				"co",
				"column"
			],
			[
				"mos",
				"mostlyDupes"
			],
			[
				"mo",
				"mostlyUniques"
			],
			[
				"bord",
				"border-box"
			],
			[
				"Fil",
				"FilteredArrayWrapper"
			],
			[
				"map",
				"mapFn"
			],
			[
				"people",
				"peopleByName"
			],
			[
				"fami",
				"familyAcronym"
			],
			[
				"val",
				"valueColumns"
			],
			[
				"per",
				"personCount"
			],
			[
				"add",
				"additionalExpectations"
			],
			[
				"acc",
				"accesses"
			],
			[
				"async",
				"asynchronous"
			],
			[
				"create",
				"createAsyncTest"
			],
			[
				"expec",
				"expected"
			],
			[
				"fn",
				"function"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"travi",
				"travis_image"
			],
			[
				"sha",
				"share_fragment"
			],
			[
				"does",
				"doesNotMatch"
			],
			[
				"pos",
				"positive"
			],
			[
				"laz",
				"lazy-result"
			],
			[
				"toBE",
				"toBeUndefined"
			],
			[
				"iter",
				"iterator"
			],
			[
				"Seq",
				"SequenceIterator"
			],
			[
				"Ined",
				"IndexedConcatenatedSequence"
			],
			[
				"prot",
				"prototype"
			],
			[
				"fi",
				"firstTwo"
			],
			[
				"gener",
				"generatorFn"
			],
			[
				"ind",
				"indices"
			],
			[
				"ran",
				"randomIndex"
			],
			[
				"shuff",
				"shuffled"
			],
			[
				"parn",
				"parentArray"
			],
			[
				"inde",
				"indexed"
			],
			[
				"indx",
				"indexed"
			],
			[
				"sor",
				"sortFn"
			],
			[
				"Ind",
				"IndexedDropSequence"
			],
			[
				"high",
				"highlighted_html"
			],
			[
				"shou",
				"shouldMatch"
			],
			[
				"gi",
				"github-ribbon"
			],
			[
				"ben",
				"benchmarkSuite"
			],
			[
				"ele",
				"elementCount"
			],
			[
				"marin",
				"margin-bottom"
			],
			[
				"backgr",
				"background-color"
			],
			[
				"font-",
				"font-family"
			],
			[
				"ltt",
				"letter-spacing"
			],
			[
				"mn",
				"min-width"
			],
			[
				"load_",
				"load_posts"
			],
			[
				"publi",
				"published_posts"
			],
			[
				"com",
				"compile"
			],
			[
				"all",
				"all_posts"
			],
			[
				"st",
				"status_message"
			],
			[
				"regions",
				"regions_updated"
			],
			[
				"repla",
				"replacement"
			],
			[
				"mes",
				"measurement"
			],
			[
				"desc",
				"description"
			],
			[
				"nextP",
				"nextPageSection"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Rakefile",
			"settings":
			{
				"buffer_size": 963,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lazy.js",
			"settings":
			{
				"buffer_size": 144055,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Lazy.js</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/codemirror/3.14.0/codemirror.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"docs.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"examples.css\" />\n    <script src=\"//pivotal.github.io/jasmine/lib/jasmine-1.3.1/jasmine.js\"></script>\n    <script src=\"//lodash.com/_js/lodash.js\"></script>\n    <script src=\"//benchmarkjs.com/_js/benchmark.js\"></script>\n    <script src=\"//code.jquery.com/jquery-1.10.1.min.js\"></script>\n    <script src=\"//code.highcharts.com/highcharts.js\"></script>\n    <script src=\"//danieltao.com/HighTables/hightables.js\"></script>\n    <script src=\"//cdn.jsdelivr.net/codemirror/3.14.0/codemirror.js\"></script>\n    <script src=\"//cdn.jsdelivr.net/codemirror/3.14.0/mode/javascript/javascript.js\"></script>\n    <script type=\"text/javascript\" src=\"utils.js\"></script>\n    <script type=\"text/javascript\" src=\"docs.js\"></script>\n\n    <script type=\"text/javascript\" src=\"handlers.js\"></script>\n    <script type=\"text/javascript\" src=\"doc_helper.js\"></script>\n\n    <script type=\"text/javascript\" src=\"../lazy.js\"></script>\n    <script type=\"text/javascript\" src=\"../lazy.dom.js\"></script>\n\n    <script type=\"text/javascript\">\n      var benchmarks = {};\n    </script>\n</head>\n\n<body>\n    <main>\n        <header>\n            <h1>Lazy.js</h1>\n        </header>\n\n        <!-- Notification area for failing specs -->\n        <div id=\"spec-failures\"></div>\n\n        <!-- Little progress indicator -->\n        <div id=\"highlighting-progress\"></div>\n\n        <div class=\"layout\">\n            <div class=\"index\">\n                <nav>\n                    <ul>\n                        <li class=\"nav-header\">\n                            <a href=\"#Lazy\">Lazy</a>\n                        </li>\n                        <li><a href=\"#Lazy-generate\">generate</a></li>\n                        <li><a href=\"#Lazy-range\">range</a></li>\n                        <li><a href=\"#Lazy-repeat\">repeat</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#Sequence\">Sequence</a>\n                        </li>\n                        <li><a href=\"#Sequence-define\">define</a></li>\n                        <li><a href=\"#Sequence-async\">async</a></li>\n                        <li><a href=\"#Sequence-compact\">compact</a></li>\n                        <li><a href=\"#Sequence-concat\">concat</a></li>\n                        <li><a href=\"#Sequence-consecutive\">consecutive</a></li>\n                        <li><a href=\"#Sequence-contains\">contains</a></li>\n                        <li><a href=\"#Sequence-countBy\">countBy</a></li>\n                        <li><a href=\"#Sequence-dropWhile\">dropWhile</a></li>\n                        <li><a href=\"#Sequence-each\">each</a></li>\n                        <li><a href=\"#Sequence-every\">every</a></li>\n                        <li><a href=\"#Sequence-filter\">filter</a></li>\n                        <li><a href=\"#Sequence-find\">find</a></li>\n                        <li><a href=\"#Sequence-findWhere\">findWhere</a></li>\n                        <li><a href=\"#Sequence-first\">first</a></li>\n                        <li><a href=\"#Sequence-flatten\">flatten</a></li>\n                        <li><a href=\"#Sequence-getIterator\">getIterator</a></li>\n                        <li><a href=\"#Sequence-groupBy\">groupBy</a></li>\n                        <li><a href=\"#Sequence-indexOf\">indexOf</a></li>\n                        <li><a href=\"#Sequence-initial\">initial</a></li>\n                        <li><a href=\"#Sequence-intersection\">intersection</a></li>\n                        <li><a href=\"#Sequence-invoke\">invoke</a></li>\n                        <li><a href=\"#Sequence-isEmpty\">isEmpty</a></li>\n                        <li><a href=\"#Sequence-join\">join</a></li>\n                        <li><a href=\"#Sequence-last\">last</a></li>\n                        <li><a href=\"#Sequence-lastIndexOf\">lastIndexOf</a></li>\n                        <li><a href=\"#Sequence-map\">map</a></li>\n                        <li><a href=\"#Sequence-max\">max</a></li>\n                        <li><a href=\"#Sequence-min\">min</a></li>\n                        <li><a href=\"#Sequence-pluck\">pluck</a></li>\n                        <li><a href=\"#Sequence-reduce\">reduce</a></li>\n                        <li><a href=\"#Sequence-reduceRight\">reduceRight</a></li>\n                        <li><a href=\"#Sequence-reject\">reject</a></li>\n                        <li><a href=\"#Sequence-rest\">rest</a></li>\n                        <li><a href=\"#Sequence-reverse\">reverse</a></li>\n                        <li><a href=\"#Sequence-shuffle\">shuffle</a></li>\n                        <li><a href=\"#Sequence-some\">some</a></li>\n                        <li><a href=\"#Sequence-sortBy\">sortBy</a></li>\n                        <li><a href=\"#Sequence-sortedIndex\">sortedIndex</a></li>\n                        <li><a href=\"#Sequence-sum\">sum</a></li>\n                        <li><a href=\"#Sequence-takeWhile\">takeWhile</a></li>\n                        <li><a href=\"#Sequence-toArray\">toArray</a></li>\n                        <li><a href=\"#Sequence-toObject\">toObject</a></li>\n                        <li><a href=\"#Sequence-union\">union</a></li>\n                        <li><a href=\"#Sequence-uniq\">uniq</a></li>\n                        <li><a href=\"#Sequence-where\">where</a></li>\n                        <li><a href=\"#Sequence-without\">without</a></li>\n                        <li><a href=\"#Sequence-zip\">zip</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#Iterator\">Iterator</a>\n                        </li>\n                        <li><a href=\"#Iterator-current\">current</a></li>\n                        <li><a href=\"#Iterator-moveNext\">moveNext</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a>\n                        </li>\n                        <li><a href=\"#ArrayLikeSequence-define\">define</a></li>\n                        <li><a href=\"#ArrayLikeSequence-concat\">concat</a></li>\n                        <li><a href=\"#ArrayLikeSequence-first\">first</a></li>\n                        <li><a href=\"#ArrayLikeSequence-get\">get</a></li>\n                        <li><a href=\"#ArrayLikeSequence-length\">length</a></li>\n                        <li><a href=\"#ArrayLikeSequence-map\">map</a></li>\n                        <li><a href=\"#ArrayLikeSequence-pop\">pop</a></li>\n                        <li><a href=\"#ArrayLikeSequence-rest\">rest</a></li>\n                        <li><a href=\"#ArrayLikeSequence-reverse\">reverse</a></li>\n                        <li><a href=\"#ArrayLikeSequence-shift\">shift</a></li>\n                        <li><a href=\"#ArrayLikeSequence-slice\">slice</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a>\n                        </li>\n                        <li><a href=\"#ObjectLikeSequence-define\">define</a></li>\n                        <li><a href=\"#ObjectLikeSequence-assign\">assign</a></li>\n                        <li><a href=\"#ObjectLikeSequence-async\">async</a></li>\n                        <li><a href=\"#ObjectLikeSequence-defaults\">defaults</a></li>\n                        <li><a href=\"#ObjectLikeSequence-functions\">functions</a></li>\n                        <li><a href=\"#ObjectLikeSequence-get\">get</a></li>\n                        <li><a href=\"#ObjectLikeSequence-invert\">invert</a></li>\n                        <li><a href=\"#ObjectLikeSequence-keys\">keys</a></li>\n                        <li><a href=\"#ObjectLikeSequence-omit\">omit</a></li>\n                        <li><a href=\"#ObjectLikeSequence-pairs\">pairs</a></li>\n                        <li><a href=\"#ObjectLikeSequence-pick\">pick</a></li>\n                        <li><a href=\"#ObjectLikeSequence-toArray\">toArray</a></li>\n                        <li><a href=\"#ObjectLikeSequence-toObject\">toObject</a></li>\n                        <li><a href=\"#ObjectLikeSequence-values\">values</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#StringLikeSequence\">StringLikeSequence</a>\n                        </li>\n                        <li><a href=\"#StringLikeSequence-define\">define</a></li>\n                        <li><a href=\"#StringLikeSequence-charAt\">charAt</a></li>\n                        <li><a href=\"#StringLikeSequence-charCodeAt\">charCodeAt</a></li>\n                        <li><a href=\"#StringLikeSequence-contains\">contains</a></li>\n                        <li><a href=\"#StringLikeSequence-endsWith\">endsWith</a></li>\n                        <li><a href=\"#StringLikeSequence-first\">first</a></li>\n                        <li><a href=\"#StringLikeSequence-indexOf\">indexOf</a></li>\n                        <li><a href=\"#StringLikeSequence-last\">last</a></li>\n                        <li><a href=\"#StringLikeSequence-lastIndexOf\">lastIndexOf</a></li>\n                        <li><a href=\"#StringLikeSequence-mapString\">mapString</a></li>\n                        <li><a href=\"#StringLikeSequence-match\">match</a></li>\n                        <li><a href=\"#StringLikeSequence-reverse\">reverse</a></li>\n                        <li><a href=\"#StringLikeSequence-split\">split</a></li>\n                        <li><a href=\"#StringLikeSequence-startsWith\">startsWith</a></li>\n                        <li><a href=\"#StringLikeSequence-substring\">substring</a></li>\n                        <li><a href=\"#StringLikeSequence-toLowerCase\">toLowerCase</a></li>\n                        <li><a href=\"#StringLikeSequence-toUpperCase\">toUpperCase</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#GeneratedSequence\">GeneratedSequence</a>\n                        </li>\n                        <li><a href=\"#GeneratedSequence-length\">length</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#AsyncSequence\">AsyncSequence</a>\n                        </li>\n                        <li><a href=\"#AsyncSequence-each\">each</a></li>\n                        <li class=\"nav-header\">\n                            <a href=\"#AsyncHandle\">AsyncHandle</a>\n                        </li>\n                        <li><a href=\"#AsyncHandle-cancel\">cancel</a></li>\n                        <li><a href=\"#AsyncHandle-onComplete\">onComplete</a></li>\n                        <li><a href=\"#AsyncHandle-onError\">onError</a></li>\n                    </ul>\n                </nav>\n            </div>\n\n            <article>\n                <section class=\"description\">\n                    <p>Lazy.js is a lazy evaluation library for JavaScript.</p>\n<p>This has been done before. For examples see:</p>\n<ul>\n<li><a href=\"http://fitzgen.github.io/wu.js/\">wu.js</a></li>\n<li><a href=\"http://linqjs.codeplex.com/\">Linq.js</a></li>\n<li><a href=\"https://github.com/suckgamoni/fromjs/\">from.js</a></li>\n<li><a href=\"http://rx.codeplex.com/\">IxJS</a></li>\n<li><a href=\"http://rfw.name/sloth.js/\">sloth.js</a></li>\n</ul>\n<p>However, at least at present, Lazy.js is faster (on average) than any of\nthose libraries. It is also more complete, with nearly all of the\nfunctionality of <a href=\"http://underscorejs.org/\">Underscore</a> and\n<a href=\"http://lodash.com/\">Lo-Dash</a>.</p>\n<h2 id=\"finding-your-way-around-the-code\">Finding your way around the code</h2>\n<p>At the heart of Lazy.js is the <a href=\"#Sequence\">Sequence</a> object. You create an initial\nsequence using <a href=\"#Lazy\">Lazy</a>, which can accept an array, object, or string.\nYou can then &quot;chain&quot; together methods from this sequence, creating a new\nsequence with each call.</p>\n<p>Here&#39;s an example:</p>\n<pre><code>var data = getReallyBigArray();\n\nvar statistics = Lazy(data)\n  .map(transform)\n  .filter(validate)\n  .reduce(aggregate);</code></pre>\n<p><a href=\"#Sequence\">Sequence</a> is the foundation of other, more specific sequence types.</p>\n<p>An <a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> provides indexed access to its elements.</p>\n<p>An <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> consists of key/value pairs.</p>\n<p>A <a href=\"#StringLikeSequence\">StringLikeSequence</a> is like a string (duh): actually, it is an\n<a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> whose elements happen to be characters.</p>\n<p>An <a href=\"#AsyncSequence\">AsyncSequence</a> is special: it iterates over its elements\nasynchronously (so calling <code>each</code> generally begins an asynchronous loop and\nreturns immediately).</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>I wrote a blog post that explains a little bit more about Lazy.js, which you\ncan read <a href=\"http://philosopherdeveloper.com/posts/introducing-lazy-js.html\">here</a>.</p>\n<p>You can also <a href=\"https://github.com/dtao/lazy.js/issues\">create an issue on GitHub</a>\nif you have any issues with the library. I work through them eventually.</p>\n<p><a href=\"https://github.com/dtao\">@dtao</a></p>\n\n                </section>\n\n                <section class=\"method\" id=\"Lazy\">\n                    <h1>\n                        Lazy\n                        <small>Lazy</small>\n                    </h1>\n\n                    <p>Wraps an object and returns a <a href=\"#Sequence\">Sequence</a>.</p>\n<ul>\n<li>For <strong>arrays</strong>, Lazy will create a sequence comprising the elements in\nthe array (an <a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a>).</li>\n<li>For <strong>objects</strong>, Lazy will create a sequence of key/value pairs\n(an <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a>).</li>\n<li>For <strong>strings</strong>, Lazy will create a sequence of characters (a\n<a href=\"#StringLikeSequence\">StringLikeSequence</a>).</li>\n</ul>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>function Lazy(source)</textarea>\n\n                        <table id=\"Lazy-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>source</td>\n                                    <td>Array|Object|string</td>\n                                    <td><p>An array, object, or string to wrap.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The wrapped lazy object.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Lazy\">Lazy([1, 2, 4])       // instanceof Lazy.ArrayLikeSequence\nLazy({ foo: \"bar\" })  // instanceof Lazy.ObjectLikeSequence\nLazy(\"hello, world!\") // instanceof Lazy.StringLikeSequence\nLazy()                // throws\nLazy(null)            // throws</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('Lazy', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 4]) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 4]);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 4]) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'Lazy';\n    spec.exampleId  = 'Lazy-1';\n    spec.actual     = 'Lazy([1, 2, 4])';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: \\\"bar\\\" }) => instanceof Lazy.ObjectLikeSequence', function() {\n      var actual = Lazy({ foo: \"bar\" });\nif (!(actual instanceof Lazy.ObjectLikeSequence)) {\n  throw 'Expected Lazy({ foo: \\\"bar\\\" }) to be an instance of Lazy.ObjectLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'Lazy';\n    spec.exampleId  = 'Lazy-2';\n    spec.actual     = 'Lazy({ foo: \\\"bar\\\" })';\n    spec.expected   = 'instanceof Lazy.ObjectLikeSequence';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"hello, world!\\\") => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy(\"hello, world!\");\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\\"hello, world!\\\") to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'Lazy';\n    spec.exampleId  = 'Lazy-3';\n    spec.actual     = 'Lazy(\\\"hello, world!\\\")';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy() => throws', function() {\n      expect(function() { Lazy() }).toThrow();\n    });\n\n    spec.suiteId    = 'Lazy';\n    spec.exampleId  = 'Lazy-4';\n    spec.actual     = 'Lazy()';\n    spec.expected   = 'throws';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(null) => throws', function() {\n      expect(function() { Lazy(null) }).toThrow();\n    });\n\n    spec.suiteId    = 'Lazy';\n    spec.exampleId  = 'Lazy-5';\n    spec.actual     = 'Lazy(null)';\n    spec.expected   = 'throws';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Lazy-generate\">\n                    <h1>\n                        generate\n                        <small>Lazy.generate</small>\n                    </h1>\n\n                    <p>Creates a <a href=\"#GeneratedSequence\">GeneratedSequence</a> using the specified generator function\nand (optionally) length.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Lazy.generate = function(generatorFn, length)</textarea>\n\n                        <table id=\"Lazy.generate-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>generatorFn</td>\n                                    <td>function(number):*</td>\n                                    <td><p>The function used to generate the\n    sequence. This function accepts an index as a parameter and should return\n    a value for that index in the resulting sequence.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>length</td>\n                                    <td>number?</td>\n                                    <td><p>The length of the sequence, for sequences with a\n    definite length.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>GeneratedSequence</td>\n                                    <td><p>The generated sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Lazy-generate\">var randomNumbers = Lazy.generate(Math.random);\nvar countingNumbers = Lazy.generate(function(i) { return i + 1; }, 5);\n\nrandomNumbers          // instanceof Lazy.GeneratedSequence\nrandomNumbers.length() // => undefined\ncountingNumbers          // sequence: [1, 2, 3, 4, 5]\ncountingNumbers.length() // => 5</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('generate', function() {\n  var randomNumbers = Lazy.generate(Math.random);\nvar countingNumbers = Lazy.generate(function(i) { return i + 1; }, 5);\n  (function() {\n    var spec = it('randomNumbers => instanceof Lazy.GeneratedSequence', function() {\n      var actual = randomNumbers;\nif (!(actual instanceof Lazy.GeneratedSequence)) {\n  throw 'Expected randomNumbers to be an instance of Lazy.GeneratedSequence.';\n}\n    });\n\n    spec.suiteId    = 'Lazy-generate';\n    spec.exampleId  = 'Lazy-generate-1';\n    spec.actual     = 'randomNumbers';\n    spec.expected   = 'instanceof Lazy.GeneratedSequence';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('randomNumbers.length() => undefined', function() {\n      var result   = randomNumbers.length();\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Lazy-generate';\n    spec.exampleId  = 'Lazy-generate-2';\n    spec.actual     = 'randomNumbers.length()';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('countingNumbers => sequence: [1, 2, 3, 4, 5]', function() {\n      var actual = countingNumbers;\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5]);\n\n    });\n\n    spec.suiteId    = 'Lazy-generate';\n    spec.exampleId  = 'Lazy-generate-3';\n    spec.actual     = 'countingNumbers';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5]';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('countingNumbers.length() => 5', function() {\n      var result   = countingNumbers.length();\n      var expected = 5;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Lazy-generate';\n    spec.exampleId  = 'Lazy-generate-4';\n    spec.actual     = 'countingNumbers.length()';\n    spec.expected   = '5';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Lazy-range\">\n                    <h1>\n                        range\n                        <small>Lazy.range</small>\n                    </h1>\n\n                    <p>Creates a sequence from a given starting value, up to a specified stopping\nvalue, incrementing by a given step.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Lazy.range = function()</textarea>\n\n                        <table id=\"Lazy.range-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>GeneratedSequence</td>\n                                    <td><p>The sequence defined by the given ranges.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Lazy-range\">Lazy.range(3)         // sequence: [0, 1, 2]\nLazy.range(1, 4)      // sequence: [1, 2, 3]\nLazy.range(2, 10, 2)  // sequence: [2, 4, 6, 8]\nLazy.range(5, 1, 2)   // sequence: []\nLazy.range(5, 15, -2) // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('range', function() {\n  \n  (function() {\n    var spec = it('Lazy.range(3) => sequence: [0, 1, 2]', function() {\n      var actual = Lazy.range(3);\nexpect(actual.toArray()).toEqual([0, 1, 2]);\n\n    });\n\n    spec.suiteId    = 'Lazy-range';\n    spec.exampleId  = 'Lazy-range-1';\n    spec.actual     = 'Lazy.range(3)';\n    spec.expected   = 'sequence: [0, 1, 2]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy.range(1, 4) => sequence: [1, 2, 3]', function() {\n      var actual = Lazy.range(1, 4);\nexpect(actual.toArray()).toEqual([1, 2, 3]);\n\n    });\n\n    spec.suiteId    = 'Lazy-range';\n    spec.exampleId  = 'Lazy-range-2';\n    spec.actual     = 'Lazy.range(1, 4)';\n    spec.expected   = 'sequence: [1, 2, 3]';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy.range(2, 10, 2) => sequence: [2, 4, 6, 8]', function() {\n      var actual = Lazy.range(2, 10, 2);\nexpect(actual.toArray()).toEqual([2, 4, 6, 8]);\n\n    });\n\n    spec.suiteId    = 'Lazy-range';\n    spec.exampleId  = 'Lazy-range-3';\n    spec.actual     = 'Lazy.range(2, 10, 2)';\n    spec.expected   = 'sequence: [2, 4, 6, 8]';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy.range(5, 1, 2) => sequence: []', function() {\n      var actual = Lazy.range(5, 1, 2);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Lazy-range';\n    spec.exampleId  = 'Lazy-range-4';\n    spec.actual     = 'Lazy.range(5, 1, 2)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy.range(5, 15, -2) => sequence: []', function() {\n      var actual = Lazy.range(5, 15, -2);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Lazy-range';\n    spec.exampleId  = 'Lazy-range-5';\n    spec.actual     = 'Lazy.range(5, 15, -2)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Lazy-repeat\">\n                    <h1>\n                        repeat\n                        <small>Lazy.repeat</small>\n                    </h1>\n\n                    <p>Creates a sequence consisting of the given value repeated a specified number\nof times.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Lazy.repeat = function(value, count)</textarea>\n\n                        <table id=\"Lazy.repeat-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>value</td>\n                                    <td>*</td>\n                                    <td><p>The value to repeat.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>count</td>\n                                    <td>number?</td>\n                                    <td><p>The number of times the value should be repeated in\n    the sequence. If this argument is omitted, the value will repeat forever.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>GeneratedSequence</td>\n                                    <td><p>The sequence containing the repeated value.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Lazy-repeat\">Lazy.repeat(\"hi\", 3)          // sequence: [\"hi\", \"hi\", \"hi\"]\nLazy.repeat(\"young\")          // instanceof Lazy.GeneratedSequence\nLazy.repeat(\"young\").length() // => undefined\nLazy.repeat(\"young\").take(3)  // sequence: [\"young\", \"young\", \"young\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('repeat', function() {\n  \n  (function() {\n    var spec = it('Lazy.repeat(\\\"hi\\\", 3) => sequence: [\\\"hi\\\", \\\"hi\\\", \\\"hi\\\"]', function() {\n      var actual = Lazy.repeat(\"hi\", 3);\nexpect(actual.toArray()).toEqual([\"hi\", \"hi\", \"hi\"]);\n\n    });\n\n    spec.suiteId    = 'Lazy-repeat';\n    spec.exampleId  = 'Lazy-repeat-1';\n    spec.actual     = 'Lazy.repeat(\\\"hi\\\", 3)';\n    spec.expected   = 'sequence: [\\\"hi\\\", \\\"hi\\\", \\\"hi\\\"]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy.repeat(\\\"young\\\") => instanceof Lazy.GeneratedSequence', function() {\n      var actual = Lazy.repeat(\"young\");\nif (!(actual instanceof Lazy.GeneratedSequence)) {\n  throw 'Expected Lazy.repeat(\\\"young\\\") to be an instance of Lazy.GeneratedSequence.';\n}\n    });\n\n    spec.suiteId    = 'Lazy-repeat';\n    spec.exampleId  = 'Lazy-repeat-2';\n    spec.actual     = 'Lazy.repeat(\\\"young\\\")';\n    spec.expected   = 'instanceof Lazy.GeneratedSequence';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy.repeat(\\\"young\\\").length() => undefined', function() {\n      var result   = Lazy.repeat(\"young\").length();\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Lazy-repeat';\n    spec.exampleId  = 'Lazy-repeat-3';\n    spec.actual     = 'Lazy.repeat(\\\"young\\\").length()';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy.repeat(\\\"young\\\").take(3) => sequence: [\\\"young\\\", \\\"young\\\", \\\"young\\\"]', function() {\n      var actual = Lazy.repeat(\"young\").take(3);\nexpect(actual.toArray()).toEqual([\"young\", \"young\", \"young\"]);\n\n    });\n\n    spec.suiteId    = 'Lazy-repeat';\n    spec.exampleId  = 'Lazy-repeat-4';\n    spec.actual     = 'Lazy.repeat(\\\"young\\\").take(3)';\n    spec.expected   = 'sequence: [\\\"young\\\", \\\"young\\\", \\\"young\\\"]';\n    spec.lineNumber = 3;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"Sequence\">\n                    <h1>\n                        Sequence\n                        <small>Sequence</small>\n                    </h1>\n\n                    <p>The <code>Sequence</code> object provides a unified API encapsulating the notion of\nzero or more consecutive elements in a collection, stream, etc.</p>\n<h2 id=\"lazy-evaluation\">Lazy evaluation</h2>\n<p>Generally speaking, creating a sequence should not be an expensive operation,\nand should not iterate over an underlying source or trigger any side effects.\nThis means that chaining together methods that return sequences incurs only\nthe cost of creating the <code>Sequence</code> objects themselves and not the cost of\niterating an underlying data source multiple times.</p>\n<p>The following code, for example, creates 4 sequences and does nothing with\n<code>source</code>:</p>\n<pre><code>var seq = Lazy(source) // 1st sequence\n  .map(func)           // 2nd\n  .filter(pred)        // 3rd\n  .reverse();          // 4th</code></pre>\n<p>Lazy&#39;s convention is to hold off on iterating or otherwise <em>doing</em> anything\n(aside from creating <code>Sequence</code> objects) until you call <code>each</code>:</p>\n<pre><code>seq.each(function(x) { console.log(x); });</code></pre>\n<h2 id=\"defining-custom-sequences\">Defining custom sequences</h2>\n<p>Defining your own type of sequence is relatively simple:</p>\n<ol>\n<li>Pass a <em>method name</em> and an object containing <em>function overrides</em> to\n<a href=\"#Sequence-define\">Sequence.define</a>. If the object includes a function called <code>init</code>,\nthis function will be called upon initialization.</li>\n<li>The object should include at least either a <code>getIterator</code> method or an\n<code>each</code> method. The former supports both asynchronous and synchronous\niteration, but is slightly more cumbersome to implement. The latter\nsupports synchronous iteration and can be automatically implemented in\nterms of the former. You can also implement both if you want, e.g. to\noptimize performance. For more info, see <a href=\"#Iterator\">Iterator</a> and\n<a href=\"#AsyncSequence\">AsyncSequence</a>.</li>\n</ol>\n<p>As a trivial example, the following code defines a new method, <code>sample</code>,\nwhich randomly may or may not include each element from its parent.</p>\n<pre><code>Lazy.Sequence.define(&quot;sample&quot;, {\n  each: function(fn) {\n    return this.parent.each(function(e) {\n      // 50/50 chance of including this element.\n      if (Math.random() &gt; 0.5) {\n        return fn(e);\n      }\n    });\n  }\n});</code></pre>\n<p>(Of course, the above could also easily have been implemented using\n<a href=\"#-filter\">#filter</a> instead of creating a custom sequence. But I <em>did</em> say this\nwas a trivial example, to be fair.)</p>\n<p>Now it will be possible to create this type of sequence from any parent\nsequence by calling the method name you specified. In other words, you can\nnow do this:</p>\n<pre><code>Lazy(arr).sample();\nLazy(arr).map(func).sample();\nLazy(arr).map(func).filter(pred).sample();</code></pre>\n<p>Etc., etc.</p>\n\n\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-define\">\n                    <h1>\n                        define\n                        <small>Sequence.define</small>\n                    </h1>\n\n                    <p>Create a new constructor function for a type inheriting from <code>Sequence</code>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.define = function(methodName, overrides)</textarea>\n\n                        <table id=\"Sequence.define-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>methodName</td>\n                                    <td>string|Array.&lt;string&gt;</td>\n                                    <td><p>The name(s) of the method(s) to be\n    used for constructing the new sequence. The method will be attached to\n    the <code>Sequence</code> prototype so that it can be chained with any other\n    sequence methods, like <a href=\"#-map\">#map</a>, <a href=\"#-filter\">#filter</a>, etc.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>overrides</td>\n                                    <td>Object</td>\n                                    <td><p>An object containing function overrides for this\n    new sequence type. <strong>Must</strong> include either <code>getIterator</code> or <code>each</code> (or\n    both). <em>May</em> include an <code>init</code> method as well. For these overrides,\n    <code>this</code> will be the new sequence, and <code>this.parent</code> will be the base\n    sequence from which the new sequence was constructed.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Function</td>\n                                    <td><p>A constructor for a new type inheriting from <code>Sequence</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-define\">// This sequence type logs every element to the specified logger as it\n// iterates over it.\nLazy.Sequence.define(\"verbose\", {\n  init: function(logger) {\n    this.logger = logger;\n  },\n\n  each: function(fn) {\n    var logger = this.logger;\n    return this.parent.each(function(e, i) {\n      logger(e);\n      return fn(e, i);\n    });\n  }\n});\n\nLazy([1, 2, 3]).verbose(logger).each(Lazy.noop) // calls logger 3 times</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('define', function() {\n  // This sequence type logs every element to the specified logger as it\n// iterates over it.\nLazy.Sequence.define(\"verbose\", {\n  init: function(logger) {\n    this.logger = logger;\n  },\n\n  each: function(fn) {\n    var logger = this.logger;\n    return this.parent.each(function(e, i) {\n      logger(e);\n      return fn(e, i);\n    });\n  }\n});\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).verbose(logger).each(Lazy.noop) => calls logger 3 times', function() {\n      var logger = jasmine.createSpy();\nLazy([1, 2, 3]).verbose(logger).each(Lazy.noop)\nexpect(logger.calls.length).toEqual(3, 'Expected Lazy([1, 2, 3]).verbose(logger).each(Lazy.noop) to call logger 3 time(s).');\n\n    });\n\n    spec.suiteId    = 'Sequence-define';\n    spec.exampleId  = 'Sequence-define-1';\n    spec.actual     = 'Lazy([1, 2, 3]).verbose(logger).each(Lazy.noop)';\n    spec.expected   = 'calls logger 3 times';\n    spec.lineNumber = 16;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-async\">\n                    <h1>\n                        async\n                        <small>Sequence#async</small>\n                    </h1>\n\n                    <p>Creates a sequence, with the same elements as this one, that will be iterated\nover asynchronously when calling <code>each</code>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.async = function(interval)</textarea>\n\n                        <table id=\"Sequence#async-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>interval</td>\n                                    <td>number?</td>\n                                    <td><p>The approximate period, in milliseconds, that\n    should elapse between each element in the resulting sequence. Omitting\n    this argument will result in the fastest possible asynchronous iteration.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>AsyncSequence</td>\n                                    <td><p>The new asynchronous sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-async\">Lazy([1, 2, 3]).async(100).each(fn) // calls fn 3 times asynchronously</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('async', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).async(100).each(fn) => calls fn 3 times asynchronously', function() {\n      var fn = jasmine.createSpy();\n\nruns(function() {\n  Lazy([1, 2, 3]).async(100).each(fn)\n  expect(fn).not.toHaveBeenCalled();\n});\n\nwaitsFor(function() {\n  return fn.calls.length === 3;\n});\n\nruns(function() {\n  expect(fn.calls.length).toEqual(3, 'Expected Lazy([1, 2, 3]).async(100).each(fn) to call fn 3 time(s) asynchronously.');\n});\n    });\n\n    spec.suiteId    = 'Sequence-async';\n    spec.exampleId  = 'Sequence-async-1';\n    spec.actual     = 'Lazy([1, 2, 3]).async(100).each(fn)';\n    spec.expected   = 'calls fn 3 times asynchronously';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-compact\">\n                    <h1>\n                        compact\n                        <small>Sequence#compact</small>\n                    </h1>\n\n                    <p>Creates a new sequence with the same elements as this one, except for all\nfalsy values (<code>false</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>null</code>, and <code>undefined</code>).</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.compact = function()</textarea>\n\n                        <table id=\"Sequence#compact-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-compact\">Lazy([\"foo\", null, \"bar\", undefined]).compact() // sequence: [\"foo\", \"bar\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('compact', function() {\n  \n  (function() {\n    var spec = it('Lazy([\\\"foo\\\", null, \\\"bar\\\", undefined]).compact() => sequence: [\\\"foo\\\", \\\"bar\\\"]', function() {\n      var actual = Lazy([\"foo\", null, \"bar\", undefined]).compact();\nexpect(actual.toArray()).toEqual([\"foo\", \"bar\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-compact';\n    spec.exampleId  = 'Sequence-compact-1';\n    spec.actual     = 'Lazy([\\\"foo\\\", null, \\\"bar\\\", undefined]).compact()';\n    spec.expected   = 'sequence: [\\\"foo\\\", \\\"bar\\\"]';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-concat\">\n                    <h1>\n                        concat\n                        <small>Sequence#concat</small>\n                    </h1>\n\n                    <p>Creates a new sequence with all of the elements of this one, plus those of\nthe given array(s).</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.concat = function(var_args)</textarea>\n\n                        <table id=\"Sequence#concat-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>var_args</td>\n                                    <td>...*</td>\n                                    <td><p>One or more values (or arrays of values) to use for\n    additional items after this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-concat\">var left  = [1, 2, 3];\nvar right = [4, 5, 6];\n\nLazy(left).concat(right)         // sequence: [1, 2, 3, 4, 5, 6]\nLazy(left).concat(Lazy(right))   // sequence: [1, 2, 3, 4, 5, 6]\nLazy(left).concat(right, [7, 8]) // sequence: [1, 2, 3, 4, 5, 6, 7, 8]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('concat', function() {\n  var left  = [1, 2, 3];\nvar right = [4, 5, 6];\n  (function() {\n    var spec = it('Lazy(left).concat(right) => sequence: [1, 2, 3, 4, 5, 6]', function() {\n      var actual = Lazy(left).concat(right);\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5, 6]);\n\n    });\n\n    spec.suiteId    = 'Sequence-concat';\n    spec.exampleId  = 'Sequence-concat-1';\n    spec.actual     = 'Lazy(left).concat(right)';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5, 6]';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(left).concat(Lazy(right)) => sequence: [1, 2, 3, 4, 5, 6]', function() {\n      var actual = Lazy(left).concat(Lazy(right));\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5, 6]);\n\n    });\n\n    spec.suiteId    = 'Sequence-concat';\n    spec.exampleId  = 'Sequence-concat-2';\n    spec.actual     = 'Lazy(left).concat(Lazy(right))';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5, 6]';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy(left).concat(right, [7, 8]) => sequence: [1, 2, 3, 4, 5, 6, 7, 8]', function() {\n      var actual = Lazy(left).concat(right, [7, 8]);\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);\n\n    });\n\n    spec.suiteId    = 'Sequence-concat';\n    spec.exampleId  = 'Sequence-concat-3';\n    spec.actual     = 'Lazy(left).concat(right, [7, 8])';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5, 6, 7, 8]';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-consecutive\">\n                    <h1>\n                        consecutive\n                        <small>Sequence#consecutive</small>\n                    </h1>\n\n                    <p>Groups this sequence into consecutive (overlapping) segments of a specified\nlength. If the underlying sequence has fewer elements than the specfied\nlength, then this sequence will be empty.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.consecutive = function(length)</textarea>\n\n                        <table id=\"Sequence#consecutive-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>length</td>\n                                    <td>number</td>\n                                    <td><p>The length of each consecutive segment.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The resulting sequence of consecutive segments.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-consecutive\">Lazy([]).consecutive(2)        // => sequence: []\nLazy([1]).consecutive(2)       // => sequence: []\nLazy([1, 2]).consecutive(2)    // => sequence: [[1, 2]]\nLazy([1, 2, 3]).consecutive(2) // => sequence: [[1, 2], [2, 3]]\nLazy([1, 2, 3]).consecutive(0) // => sequence: [[]]\nLazy([1, 2, 3]).consecutive(1) // => sequence: [[1], [2], [3]]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('consecutive', function() {\n  \n  (function() {\n    var spec = it('Lazy([]).consecutive(2) => sequence: []', function() {\n      var actual = Lazy([]).consecutive(2);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-consecutive';\n    spec.exampleId  = 'Sequence-consecutive-1';\n    spec.actual     = 'Lazy([]).consecutive(2)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1]).consecutive(2) => sequence: []', function() {\n      var actual = Lazy([1]).consecutive(2);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-consecutive';\n    spec.exampleId  = 'Sequence-consecutive-2';\n    spec.actual     = 'Lazy([1]).consecutive(2)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2]).consecutive(2) => sequence: [[1, 2]]', function() {\n      var actual = Lazy([1, 2]).consecutive(2);\nexpect(actual.toArray()).toEqual([[1, 2]]);\n\n    });\n\n    spec.suiteId    = 'Sequence-consecutive';\n    spec.exampleId  = 'Sequence-consecutive-3';\n    spec.actual     = 'Lazy([1, 2]).consecutive(2)';\n    spec.expected   = 'sequence: [[1, 2]]';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).consecutive(2) => sequence: [[1, 2], [2, 3]]', function() {\n      var actual = Lazy([1, 2, 3]).consecutive(2);\nexpect(actual.toArray()).toEqual([[1, 2], [2, 3]]);\n\n    });\n\n    spec.suiteId    = 'Sequence-consecutive';\n    spec.exampleId  = 'Sequence-consecutive-4';\n    spec.actual     = 'Lazy([1, 2, 3]).consecutive(2)';\n    spec.expected   = 'sequence: [[1, 2], [2, 3]]';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).consecutive(0) => sequence: [[]]', function() {\n      var actual = Lazy([1, 2, 3]).consecutive(0);\nexpect(actual.toArray()).toEqual([[]]);\n\n    });\n\n    spec.suiteId    = 'Sequence-consecutive';\n    spec.exampleId  = 'Sequence-consecutive-5';\n    spec.actual     = 'Lazy([1, 2, 3]).consecutive(0)';\n    spec.expected   = 'sequence: [[]]';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).consecutive(1) => sequence: [[1], [2], [3]]', function() {\n      var actual = Lazy([1, 2, 3]).consecutive(1);\nexpect(actual.toArray()).toEqual([[1], [2], [3]]);\n\n    });\n\n    spec.suiteId    = 'Sequence-consecutive';\n    spec.exampleId  = 'Sequence-consecutive-6';\n    spec.actual     = 'Lazy([1, 2, 3]).consecutive(1)';\n    spec.expected   = 'sequence: [[1], [2], [3]]';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-contains\">\n                    <h1>\n                        contains\n                        <small>Sequence#contains</small>\n                    </h1>\n\n                    <p>Checks whether the given value is in this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.contains = function(value)</textarea>\n\n                        <table id=\"Sequence#contains-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>value</td>\n                                    <td>*</td>\n                                    <td><p>The element to search for in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>True if the sequence contains the value, false if not.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-contains\">var numbers = [5, 10, 15, 20];\n\nLazy(numbers).contains(15) // => true\nLazy(numbers).contains(13) // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('contains', function() {\n  var numbers = [5, 10, 15, 20];\n  (function() {\n    var spec = it('Lazy(numbers).contains(15) => true', function() {\n      var result   = Lazy(numbers).contains(15);\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-contains';\n    spec.exampleId  = 'Sequence-contains-1';\n    spec.actual     = 'Lazy(numbers).contains(15)';\n    spec.expected   = 'true';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).contains(13) => false', function() {\n      var result   = Lazy(numbers).contains(13);\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-contains';\n    spec.exampleId  = 'Sequence-contains-2';\n    spec.actual     = 'Lazy(numbers).contains(13)';\n    spec.expected   = 'false';\n    spec.lineNumber = 3;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-countBy\">\n                    <h1>\n                        countBy\n                        <small>Sequence#countBy</small>\n                    </h1>\n\n                    <p>Creates a new <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> containing the unique keys of all\nthe elements in this sequence, each paired with the number of elements\nin this sequence having that key.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.countBy = function(keyFn)</textarea>\n\n                        <table id=\"Sequence#countBy-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>keyFn</td>\n                                    <td>Function|string</td>\n                                    <td><p>The function to call on the elements in this\n    sequence to obtain a key by which to count them, or a string representing\n    a parameter to read from all the elements in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-countBy\">function oddOrEven(x) {\n  return x % 2 === 0 ? 'even' : 'odd';\n}\n\nvar numbers = [1, 2, 3, 4, 5];\n\nLazy(numbers).countBy(oddOrEven)            // sequence: { odd: 3, even: 2 }\nLazy(numbers).countBy(oddOrEven).get(\"odd\") // => 3\nLazy(numbers).countBy(oddOrEven).get(\"foo\") // => undefined</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('countBy', function() {\n  function oddOrEven(x) {\n  return x % 2 === 0 ? 'even' : 'odd';\n}\n\nvar numbers = [1, 2, 3, 4, 5];\n  (function() {\n    var spec = it('Lazy(numbers).countBy(oddOrEven) => sequence: { odd: 3, even: 2 }', function() {\n      var actual = Lazy(numbers).countBy(oddOrEven);\nexpect(actual.toObject()).toEqual({  odd: 3, even: 2  });\n\n    });\n\n    spec.suiteId    = 'Sequence-countBy';\n    spec.exampleId  = 'Sequence-countBy-1';\n    spec.actual     = 'Lazy(numbers).countBy(oddOrEven)';\n    spec.expected   = 'sequence: { odd: 3, even: 2 }';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).countBy(oddOrEven).get(\\\"odd\\\") => 3', function() {\n      var result   = Lazy(numbers).countBy(oddOrEven).get(\"odd\");\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-countBy';\n    spec.exampleId  = 'Sequence-countBy-2';\n    spec.actual     = 'Lazy(numbers).countBy(oddOrEven).get(\\\"odd\\\")';\n    spec.expected   = '3';\n    spec.lineNumber = 7;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).countBy(oddOrEven).get(\\\"foo\\\") => undefined', function() {\n      var result   = Lazy(numbers).countBy(oddOrEven).get(\"foo\");\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-countBy';\n    spec.exampleId  = 'Sequence-countBy-3';\n    spec.actual     = 'Lazy(numbers).countBy(oddOrEven).get(\\\"foo\\\")';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 8;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-dropWhile\">\n                    <h1>\n                        dropWhile\n                        <small>Sequence#dropWhile</small>\n                    </h1>\n\n                    <p>Creates a new sequence comprising the elements from this sequence <em>after</em>\nthose that satisfy some predicate. The sequence starts with the first\nelement that does not match the predicate.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.dropWhile = function(predicate)</textarea>\n\n                        <table id=\"Sequence#dropWhile-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>predicate</td>\n                                    <td>Function</td>\n                                    <td></td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-each\">\n                    <h1>\n                        each\n                        <small>Sequence#each</small>\n                    </h1>\n\n                    <p>Iterates over this sequence and executes a function for every element.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.each = function(fn)</textarea>\n\n                        <table id=\"Sequence#each-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>fn</td>\n                                    <td>Function</td>\n                                    <td><p>The function to call on each element in the sequence.\n    Return false from the function to end the iteration.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-each\">Lazy([1, 2, 3, 4]).each(fn) // calls fn 4 times</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('each', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).each(fn) => calls fn 4 times', function() {\n      var fn = jasmine.createSpy();\nLazy([1, 2, 3, 4]).each(fn)\nexpect(fn.calls.length).toEqual(4, 'Expected Lazy([1, 2, 3, 4]).each(fn) to call fn 4 time(s).');\n\n    });\n\n    spec.suiteId    = 'Sequence-each';\n    spec.exampleId  = 'Sequence-each-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).each(fn)';\n    spec.expected   = 'calls fn 4 times';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-every\">\n                    <h1>\n                        every\n                        <small>Sequence#every</small>\n                    </h1>\n\n                    <p>Checks whether every element in this sequence satisfies a given predicate.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.every = function(predicate)</textarea>\n\n                        <table id=\"Sequence#every-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>predicate</td>\n                                    <td>Function</td>\n                                    <td><p>A function to call on (potentially) every element\n    in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>True if <code>predicate</code> returns true for every element in the\n    sequence (or the sequence is empty). False if <code>predicate</code> returns false\n    for at least one element.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-every\">function isEven(x) { return x % 2 === 0; }\nfunction isPositive(x) { return x > 0; }\n\nvar numbers = [1, 2, 3, 4, 5];\n\nLazy(numbers).every(isEven)     // => false\nLazy(numbers).every(isPositive) // => true</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('every', function() {\n  function isEven(x) { return x % 2 === 0; }\nfunction isPositive(x) { return x > 0; }\n\nvar numbers = [1, 2, 3, 4, 5];\n  (function() {\n    var spec = it('Lazy(numbers).every(isEven) => false', function() {\n      var result   = Lazy(numbers).every(isEven);\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-every';\n    spec.exampleId  = 'Sequence-every-1';\n    spec.actual     = 'Lazy(numbers).every(isEven)';\n    spec.expected   = 'false';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).every(isPositive) => true', function() {\n      var result   = Lazy(numbers).every(isPositive);\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-every';\n    spec.exampleId  = 'Sequence-every-2';\n    spec.actual     = 'Lazy(numbers).every(isPositive)';\n    spec.expected   = 'true';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-filter\">\n                    <h1>\n                        filter\n                        <small>Sequence#filter</small>\n                    </h1>\n\n                    <p>Creates a new sequence whose values are the elements of this sequence which\nsatisfy the specified predicate.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.filter = function(filterFn)</textarea>\n\n                        <table id=\"Sequence#filter-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>filterFn</td>\n                                    <td>Function</td>\n                                    <td><p>The predicate to call on each element in this\n    sequence, which returns true if the element should be included.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-filter\">function isEven(x) { return x % 2 === 0; }\n\nvar numbers = [1, 2, 3, 4, 5, 6];\n\nLazy(numbers).filter(isEven) // sequence: [2, 4, 6]</textarea>\n                    </div>\n\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        <textarea>function isEven(x) { return x % 2 === 0; }\n\nvar smArr = Lazy.range(10).toArray(),\n    lgArr = Lazy.range(100).toArray();\n\nLazy(smArr).filter(isEven).each(Lazy.noop) // lazy - 10 elements\nLazy(lgArr).filter(isEven).each(Lazy.noop) // lazy - 100 elements\n_.each(_.filter(smArr, isEven), Lazy.noop) // lodash - 10 elements\n_.each(_.filter(lgArr, isEven), Lazy.noop) // lodash - 100 elements</textarea>\n\n                        <table id=\"Sequence-filter-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                <th>10 elements</th>\n                                <th>100 elements</th>\n                            </tr>\n\n                            <tr id=\"perf-test-Sequence-filter-1\">\n                                <td>lazy</td>\n                                <td data-case-id=\"1\"></td>\n                                <td data-case-id=\"2\"></td>\n                            </tr>\n                            <tr id=\"perf-test-Sequence-filter-2\">\n                                <td>lodash</td>\n                                <td data-case-id=\"3\"></td>\n                                <td data-case-id=\"4\"></td>\n                            </tr>\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                    </div>\n\n                    <script type=\"text/javascript\">\ndescribe('filter', function() {\n  function isEven(x) { return x % 2 === 0; }\n\nvar numbers = [1, 2, 3, 4, 5, 6];\n  (function() {\n    var spec = it('Lazy(numbers).filter(isEven) => sequence: [2, 4, 6]', function() {\n      var actual = Lazy(numbers).filter(isEven);\nexpect(actual.toArray()).toEqual([2, 4, 6]);\n\n    });\n\n    spec.suiteId    = 'Sequence-filter';\n    spec.exampleId  = 'Sequence-filter-1';\n    spec.actual     = 'Lazy(numbers).filter(isEven)';\n    spec.expected   = 'sequence: [2, 4, 6]';\n    spec.lineNumber = 4;\n  }());\n});\n(function() {\n  var functionName = 'Sequence#filter';\n\n\n  function isEven(x) { return x % 2 === 0; }\n\nvar smArr = Lazy.range(10).toArray(),\n    lgArr = Lazy.range(100).toArray();\n\n  benchmarks['Sequence-filter'] = [];\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-filter-1-1',\n      fn: function() {\n        Lazy(smArr).filter(isEven).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-filter-1';\n    benchmark.caseId = 1;\n\n    benchmarks['Sequence-filter'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-filter-1-2',\n      fn: function() {\n        Lazy(lgArr).filter(isEven).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-filter-1';\n    benchmark.caseId = 2;\n\n    benchmarks['Sequence-filter'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-filter-2-3',\n      fn: function() {\n        _.each(_.filter(smArr, isEven), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-filter-2';\n    benchmark.caseId = 3;\n\n    benchmarks['Sequence-filter'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-filter-2-4',\n      fn: function() {\n        _.each(_.filter(lgArr, isEven), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-filter-2';\n    benchmark.caseId = 4;\n\n    benchmarks['Sequence-filter'].push(benchmark);\n  }());\n\n}());\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-find\">\n                    <h1>\n                        find\n                        <small>Sequence#find</small>\n                    </h1>\n\n                    <p>Seaches for the first element in the sequence satisfying a given predicate.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.find = function(predicate)</textarea>\n\n                        <table id=\"Sequence#find-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>predicate</td>\n                                    <td>Function</td>\n                                    <td><p>A function to call on (potentially) every element\n    in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The first element in the sequence for which <code>predicate</code> returns\n    <code>true</code>, or <code>undefined</code> if no such element is found.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-find\">function divisibleBy3(x) {\n  return x % 3 === 0;\n}\n\nfunction isNegative(x) {\n  return x < 0;\n}\n\nvar numbers = [5, 6, 7, 8, 9, 10];\n\nLazy(numbers).find(divisibleBy3) // => 6\nLazy(numbers).find(isNegative)   // => undefined</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('find', function() {\n  function divisibleBy3(x) {\n  return x % 3 === 0;\n}\n\nfunction isNegative(x) {\n  return x < 0;\n}\n\nvar numbers = [5, 6, 7, 8, 9, 10];\n  (function() {\n    var spec = it('Lazy(numbers).find(divisibleBy3) => 6', function() {\n      var result   = Lazy(numbers).find(divisibleBy3);\n      var expected = 6;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-find';\n    spec.exampleId  = 'Sequence-find-1';\n    spec.actual     = 'Lazy(numbers).find(divisibleBy3)';\n    spec.expected   = '6';\n    spec.lineNumber = 10;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).find(isNegative) => undefined', function() {\n      var result   = Lazy(numbers).find(isNegative);\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-find';\n    spec.exampleId  = 'Sequence-find-2';\n    spec.actual     = 'Lazy(numbers).find(isNegative)';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 11;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-findWhere\">\n                    <h1>\n                        findWhere\n                        <small>Sequence#findWhere</small>\n                    </h1>\n\n                    <p>Returns the first element in this sequence with property names and values\nmatching those of the specified object.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.findWhere = function(properties)</textarea>\n\n                        <table id=\"Sequence#findWhere-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>properties</td>\n                                    <td>Object</td>\n                                    <td><p>The properties that should be found on some\n    element in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The found element, or <code>undefined</code> if none exists in this\n    sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-findWhere\">var words = [\"foo\", \"bar\"];\n\nLazy(words).findWhere({ 0: \"f\" }); // => \"foo\"\nLazy(words).findWhere({ 0: \"z\" }); // => undefined</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('findWhere', function() {\n  var words = [\"foo\", \"bar\"];\n  (function() {\n    var spec = it('Lazy(words).findWhere({ 0: \\\"f\\\" }); => \\\"foo\\\"', function() {\n      var result   = Lazy(words).findWhere({ 0: \"f\" });;\n      var expected = \"foo\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-findWhere';\n    spec.exampleId  = 'Sequence-findWhere-1';\n    spec.actual     = 'Lazy(words).findWhere({ 0: \\\"f\\\" });';\n    spec.expected   = '\\\"foo\\\"';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(words).findWhere({ 0: \\\"z\\\" }); => undefined', function() {\n      var result   = Lazy(words).findWhere({ 0: \"z\" });;\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-findWhere';\n    spec.exampleId  = 'Sequence-findWhere-2';\n    spec.actual     = 'Lazy(words).findWhere({ 0: \\\"z\\\" });';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 3;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-first\">\n                    <h1>\n                        first\n                        <small>Sequence#first</small>\n                    </h1>\n\n                    <p>Creates a new sequence comprising the first N elements from this sequence, OR\n(if N is <code>undefined</code>) simply returns the first element of this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.first = function(count)</textarea>\n\n                        <table id=\"Sequence#first-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>count</td>\n                                    <td>number?</td>\n                                    <td><p>The number of elements to take from this sequence. If\n    this value exceeds the length of the sequence, the resulting sequence\n    will be essentially the same as this one.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The new sequence (or the first element from this sequence if\n    no count was given).</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-first\">function powerOfTwo(exp) {\n  return Math.pow(2, exp);\n}\n\nLazy.generate(powerOfTwo).first()          // => 1\nLazy.generate(powerOfTwo).first(5)         // sequence: [1, 2, 4, 8, 16]\nLazy.generate(powerOfTwo).skip(2).first()  // => 4\nLazy.generate(powerOfTwo).skip(2).first(2) // sequence: [4, 8]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('first', function() {\n  function powerOfTwo(exp) {\n  return Math.pow(2, exp);\n}\n  (function() {\n    var spec = it('Lazy.generate(powerOfTwo).first() => 1', function() {\n      var result   = Lazy.generate(powerOfTwo).first();\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-first';\n    spec.exampleId  = 'Sequence-first-1';\n    spec.actual     = 'Lazy.generate(powerOfTwo).first()';\n    spec.expected   = '1';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy.generate(powerOfTwo).first(5) => sequence: [1, 2, 4, 8, 16]', function() {\n      var actual = Lazy.generate(powerOfTwo).first(5);\nexpect(actual.toArray()).toEqual([1, 2, 4, 8, 16]);\n\n    });\n\n    spec.suiteId    = 'Sequence-first';\n    spec.exampleId  = 'Sequence-first-2';\n    spec.actual     = 'Lazy.generate(powerOfTwo).first(5)';\n    spec.expected   = 'sequence: [1, 2, 4, 8, 16]';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy.generate(powerOfTwo).skip(2).first() => 4', function() {\n      var result   = Lazy.generate(powerOfTwo).skip(2).first();\n      var expected = 4;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-first';\n    spec.exampleId  = 'Sequence-first-3';\n    spec.actual     = 'Lazy.generate(powerOfTwo).skip(2).first()';\n    spec.expected   = '4';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy.generate(powerOfTwo).skip(2).first(2) => sequence: [4, 8]', function() {\n      var actual = Lazy.generate(powerOfTwo).skip(2).first(2);\nexpect(actual.toArray()).toEqual([4, 8]);\n\n    });\n\n    spec.suiteId    = 'Sequence-first';\n    spec.exampleId  = 'Sequence-first-4';\n    spec.actual     = 'Lazy.generate(powerOfTwo).skip(2).first(2)';\n    spec.expected   = 'sequence: [4, 8]';\n    spec.lineNumber = 7;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-flatten\">\n                    <h1>\n                        flatten\n                        <small>Sequence#flatten</small>\n                    </h1>\n\n                    <p>Creates a new sequence with every element from this sequence, and with arrays\nexploded so that a sequence of arrays (of arrays) becomes a flat sequence of\nvalues.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.flatten = function()</textarea>\n\n                        <table id=\"Sequence#flatten-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-flatten\">Lazy([1, [2, 3], [4, [5]]]).flatten() // sequence: [1, 2, 3, 4, 5]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('flatten', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, [2, 3], [4, [5]]]).flatten() => sequence: [1, 2, 3, 4, 5]', function() {\n      var actual = Lazy([1, [2, 3], [4, [5]]]).flatten();\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5]);\n\n    });\n\n    spec.suiteId    = 'Sequence-flatten';\n    spec.exampleId  = 'Sequence-flatten-1';\n    spec.actual     = 'Lazy([1, [2, 3], [4, [5]]]).flatten()';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5]';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-getIterator\">\n                    <h1>\n                        getIterator\n                        <small>Sequence#getIterator</small>\n                    </h1>\n\n                    <p>Creates an <a href=\"#Iterator\">Iterator</a> object with two methods, <code>moveNext</code> -- returning\ntrue or false -- and <code>current</code> -- returning the current value.</p>\n<p>This method is used when asynchronously iterating over sequences. Any type\ninheriting from <code>Sequence</code> must implement this method or it can&#39;t support\nasynchronous iteration.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.getIterator = function()</textarea>\n\n                        <table id=\"Sequence#getIterator-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Iterator</td>\n                                    <td><p>An iterator object.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-getIterator\">var iterator = Lazy([1, 2]).getIterator();\n\niterator.moveNext(); // => true\niterator.current();  // => 1\niterator.moveNext(); // => true\niterator.current();  // => 2\niterator.moveNext(); // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('getIterator', function() {\n  var iterator = Lazy([1, 2]).getIterator();\n  (function() {\n    var spec = it('iterator.moveNext(); => true', function() {\n      var result   = iterator.moveNext();;\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-getIterator';\n    spec.exampleId  = 'Sequence-getIterator-1';\n    spec.actual     = 'iterator.moveNext();';\n    spec.expected   = 'true';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('iterator.current(); => 1', function() {\n      var result   = iterator.current();;\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-getIterator';\n    spec.exampleId  = 'Sequence-getIterator-2';\n    spec.actual     = 'iterator.current();';\n    spec.expected   = '1';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('iterator.moveNext(); => true', function() {\n      var result   = iterator.moveNext();;\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-getIterator';\n    spec.exampleId  = 'Sequence-getIterator-3';\n    spec.actual     = 'iterator.moveNext();';\n    spec.expected   = 'true';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('iterator.current(); => 2', function() {\n      var result   = iterator.current();;\n      var expected = 2;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-getIterator';\n    spec.exampleId  = 'Sequence-getIterator-4';\n    spec.actual     = 'iterator.current();';\n    spec.expected   = '2';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('iterator.moveNext(); => false', function() {\n      var result   = iterator.moveNext();;\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-getIterator';\n    spec.exampleId  = 'Sequence-getIterator-5';\n    spec.actual     = 'iterator.moveNext();';\n    spec.expected   = 'false';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-groupBy\">\n                    <h1>\n                        groupBy\n                        <small>Sequence#groupBy</small>\n                    </h1>\n\n                    <p>Creates a new <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> comprising the elements in this\none, grouped together according to some key. The value associated with each\nkey in the resulting object-like sequence is an array containing all of\nthe elements in this sequence with that key.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.groupBy = function(keyFn)</textarea>\n\n                        <table id=\"Sequence#groupBy-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>keyFn</td>\n                                    <td>Function|string</td>\n                                    <td><p>The function to call on the elements in this\n    sequence to obtain a key by which to group them, or a string representing\n    a parameter to read from all the elements in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-groupBy\">function oddOrEven(x) {\n  return x % 2 === 0 ? 'even' : 'odd';\n}\n\nvar numbers = [1, 2, 3, 4, 5];\n\nLazy(numbers).groupBy(oddOrEven)            // sequence: { odd: [1, 3, 5], even: [2, 4] }\nLazy(numbers).groupBy(oddOrEven).get(\"odd\") // => [1, 3, 5]\nLazy(numbers).groupBy(oddOrEven).get(\"foo\") // => undefined</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('groupBy', function() {\n  function oddOrEven(x) {\n  return x % 2 === 0 ? 'even' : 'odd';\n}\n\nvar numbers = [1, 2, 3, 4, 5];\n  (function() {\n    var spec = it('Lazy(numbers).groupBy(oddOrEven) => sequence: { odd: [1, 3, 5], even: [2, 4] }', function() {\n      var actual = Lazy(numbers).groupBy(oddOrEven);\nexpect(actual.toObject()).toEqual({  odd: [1, 3, 5], even: [2, 4]  });\n\n    });\n\n    spec.suiteId    = 'Sequence-groupBy';\n    spec.exampleId  = 'Sequence-groupBy-1';\n    spec.actual     = 'Lazy(numbers).groupBy(oddOrEven)';\n    spec.expected   = 'sequence: { odd: [1, 3, 5], even: [2, 4] }';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).groupBy(oddOrEven).get(\\\"odd\\\") => [1, 3, 5]', function() {\n      var result   = Lazy(numbers).groupBy(oddOrEven).get(\"odd\");\n      var expected = [1, 3, 5];\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-groupBy';\n    spec.exampleId  = 'Sequence-groupBy-2';\n    spec.actual     = 'Lazy(numbers).groupBy(oddOrEven).get(\\\"odd\\\")';\n    spec.expected   = '[1, 3, 5]';\n    spec.lineNumber = 7;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).groupBy(oddOrEven).get(\\\"foo\\\") => undefined', function() {\n      var result   = Lazy(numbers).groupBy(oddOrEven).get(\"foo\");\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-groupBy';\n    spec.exampleId  = 'Sequence-groupBy-3';\n    spec.actual     = 'Lazy(numbers).groupBy(oddOrEven).get(\\\"foo\\\")';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 8;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-indexOf\">\n                    <h1>\n                        indexOf\n                        <small>Sequence#indexOf</small>\n                    </h1>\n\n                    <p>Performs (at worst) a linear search from the head of this sequence,\nreturning the first index at which the specified value is found.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.indexOf = function(value)</textarea>\n\n                        <table id=\"Sequence#indexOf-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>value</td>\n                                    <td>*</td>\n                                    <td><p>The element to search for in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The index within this sequence where the given value is\n    located, or -1 if the sequence doesn&#39;t contain the value.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-indexOf\">function reciprocal(x) { return 1 / x; }\n\nLazy([\"foo\", \"bar\", \"baz\"]).indexOf(\"bar\")   // => 1\nLazy([1, 2, 3]).indexOf(4)                   // => -1\nLazy([1, 2, 3]).map(reciprocal).indexOf(0.5) // => 1</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('indexOf', function() {\n  function reciprocal(x) { return 1 / x; }\n  (function() {\n    var spec = it('Lazy([\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]).indexOf(\\\"bar\\\") => 1', function() {\n      var result   = Lazy([\"foo\", \"bar\", \"baz\"]).indexOf(\"bar\");\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-indexOf';\n    spec.exampleId  = 'Sequence-indexOf-1';\n    spec.actual     = 'Lazy([\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]).indexOf(\\\"bar\\\")';\n    spec.expected   = '1';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).indexOf(4) => -1', function() {\n      var result   = Lazy([1, 2, 3]).indexOf(4);\n      var expected = -1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-indexOf';\n    spec.exampleId  = 'Sequence-indexOf-2';\n    spec.actual     = 'Lazy([1, 2, 3]).indexOf(4)';\n    spec.expected   = '-1';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).map(reciprocal).indexOf(0.5) => 1', function() {\n      var result   = Lazy([1, 2, 3]).map(reciprocal).indexOf(0.5);\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-indexOf';\n    spec.exampleId  = 'Sequence-indexOf-3';\n    spec.actual     = 'Lazy([1, 2, 3]).map(reciprocal).indexOf(0.5)';\n    spec.expected   = '1';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-initial\">\n                    <h1>\n                        initial\n                        <small>Sequence#initial</small>\n                    </h1>\n\n                    <p>Creates a new sequence comprising all but the last N elements of this\nsequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.initial = function(count)</textarea>\n\n                        <table id=\"Sequence#initial-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>count</td>\n                                    <td>number?</td>\n                                    <td><p>The number of items to omit from the end of the\n    sequence (defaults to 1).</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-initial\">Lazy([1, 2, 3, 4]).initial()                    // sequence: [1, 2, 3]\nLazy([1, 2, 3, 4]).initial(2)                   // sequence: [1, 2]\nLazy([1, 2, 3]).filter(Lazy.identity).initial() // sequence: [1, 2]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('initial', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).initial() => sequence: [1, 2, 3]', function() {\n      var actual = Lazy([1, 2, 3, 4]).initial();\nexpect(actual.toArray()).toEqual([1, 2, 3]);\n\n    });\n\n    spec.suiteId    = 'Sequence-initial';\n    spec.exampleId  = 'Sequence-initial-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).initial()';\n    spec.expected   = 'sequence: [1, 2, 3]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).initial(2) => sequence: [1, 2]', function() {\n      var actual = Lazy([1, 2, 3, 4]).initial(2);\nexpect(actual.toArray()).toEqual([1, 2]);\n\n    });\n\n    spec.suiteId    = 'Sequence-initial';\n    spec.exampleId  = 'Sequence-initial-2';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).initial(2)';\n    spec.expected   = 'sequence: [1, 2]';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).filter(Lazy.identity).initial() => sequence: [1, 2]', function() {\n      var actual = Lazy([1, 2, 3]).filter(Lazy.identity).initial();\nexpect(actual.toArray()).toEqual([1, 2]);\n\n    });\n\n    spec.suiteId    = 'Sequence-initial';\n    spec.exampleId  = 'Sequence-initial-3';\n    spec.actual     = 'Lazy([1, 2, 3]).filter(Lazy.identity).initial()';\n    spec.expected   = 'sequence: [1, 2]';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-intersection\">\n                    <h1>\n                        intersection\n                        <small>Sequence#intersection</small>\n                    </h1>\n\n                    <p>Creates a new sequence with all the elements of this sequence that also\nappear among the specified arguments.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.intersection = function(var_args)</textarea>\n\n                        <table id=\"Sequence#intersection-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>var_args</td>\n                                    <td>...*</td>\n                                    <td><p>The values, or array(s) of values, in which elements\n    from this sequence must also be included to end up in the resulting sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-intersection\">Lazy([\"foo\", \"bar\"]).intersection([])             // sequence: []\nLazy([\"foo\", \"bar\"]).intersection([\"bar\", \"baz\"]) // sequence: [\"bar\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('intersection', function() {\n  \n  (function() {\n    var spec = it('Lazy([\\\"foo\\\", \\\"bar\\\"]).intersection([]) => sequence: []', function() {\n      var actual = Lazy([\"foo\", \"bar\"]).intersection([]);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-intersection';\n    spec.exampleId  = 'Sequence-intersection-1';\n    spec.actual     = 'Lazy([\\\"foo\\\", \\\"bar\\\"]).intersection([])';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([\\\"foo\\\", \\\"bar\\\"]).intersection([\\\"bar\\\", \\\"baz\\\"]) => sequence: [\\\"bar\\\"]', function() {\n      var actual = Lazy([\"foo\", \"bar\"]).intersection([\"bar\", \"baz\"]);\nexpect(actual.toArray()).toEqual([\"bar\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-intersection';\n    spec.exampleId  = 'Sequence-intersection-2';\n    spec.actual     = 'Lazy([\\\"foo\\\", \\\"bar\\\"]).intersection([\\\"bar\\\", \\\"baz\\\"])';\n    spec.expected   = 'sequence: [\\\"bar\\\"]';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-invoke\">\n                    <h1>\n                        invoke\n                        <small>Sequence#invoke</small>\n                    </h1>\n\n                    <p>Creates a new sequence whose values are calculated by invoking the specified\nfunction on each element in this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.invoke = function(methodName)</textarea>\n\n                        <table id=\"Sequence#invoke-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>methodName</td>\n                                    <td>string</td>\n                                    <td><p>The name of the method to invoke for every element\n    in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-invoke\">function Person(first, last) {\n  this.fullName = function() {\n    return first + \" \" + last;\n  };\n}\n\nvar people = [\n  new Person(\"Dan\", \"Tao\"),\n  new Person(\"Bob\", \"Smith\")\n];\n\nLazy(people).invoke(\"fullName\") // sequence: [\"Dan Tao\", \"Bob Smith\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('invoke', function() {\n  function Person(first, last) {\n  this.fullName = function() {\n    return first + \" \" + last;\n  };\n}\n\nvar people = [\n  new Person(\"Dan\", \"Tao\"),\n  new Person(\"Bob\", \"Smith\")\n];\n  (function() {\n    var spec = it('Lazy(people).invoke(\\\"fullName\\\") => sequence: [\\\"Dan Tao\\\", \\\"Bob Smith\\\"]', function() {\n      var actual = Lazy(people).invoke(\"fullName\");\nexpect(actual.toArray()).toEqual([\"Dan Tao\", \"Bob Smith\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-invoke';\n    spec.exampleId  = 'Sequence-invoke-1';\n    spec.actual     = 'Lazy(people).invoke(\\\"fullName\\\")';\n    spec.expected   = 'sequence: [\\\"Dan Tao\\\", \\\"Bob Smith\\\"]';\n    spec.lineNumber = 11;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-isEmpty\">\n                    <h1>\n                        isEmpty\n                        <small>Sequence#isEmpty</small>\n                    </h1>\n\n                    <p>Checks whether the sequence has no elements.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.isEmpty = function()</textarea>\n\n                        <table id=\"Sequence#isEmpty-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>True if the sequence is empty, false if it contains at\n    least one element.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-isEmpty\">Lazy([]).isEmpty()        // => true\nLazy([1, 2, 3]).isEmpty() // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('isEmpty', function() {\n  \n  (function() {\n    var spec = it('Lazy([]).isEmpty() => true', function() {\n      var result   = Lazy([]).isEmpty();\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-isEmpty';\n    spec.exampleId  = 'Sequence-isEmpty-1';\n    spec.actual     = 'Lazy([]).isEmpty()';\n    spec.expected   = 'true';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).isEmpty() => false', function() {\n      var result   = Lazy([1, 2, 3]).isEmpty();\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-isEmpty';\n    spec.exampleId  = 'Sequence-isEmpty-2';\n    spec.actual     = 'Lazy([1, 2, 3]).isEmpty()';\n    spec.expected   = 'false';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-join\">\n                    <h1>\n                        join\n                        <small>Sequence#join</small>\n                    </h1>\n\n                    <p>Creates a string from joining together all of the elements in this sequence,\nseparated by the given delimiter.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.join = function(delimiter)</textarea>\n\n                        <table id=\"Sequence#join-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>delimiter</td>\n                                    <td>string?</td>\n                                    <td><p>The separator to insert between every element from\n    this sequence in the resulting string (defaults to <code>&quot;,&quot;</code>).</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>string</td>\n                                    <td><p>The delimited string.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-join\">Lazy([6, 29, 1984]).join(\"/\")  // => \"6/29/1984\"\nLazy([\"a\", \"b\", \"c\"]).join(\"\") // => \"abc\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('join', function() {\n  \n  (function() {\n    var spec = it('Lazy([6, 29, 1984]).join(\\\"/\\\") => \\\"6/29/1984\\\"', function() {\n      var result   = Lazy([6, 29, 1984]).join(\"/\");\n      var expected = \"6/29/1984\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-join';\n    spec.exampleId  = 'Sequence-join-1';\n    spec.actual     = 'Lazy([6, 29, 1984]).join(\\\"/\\\")';\n    spec.expected   = '\\\"6/29/1984\\\"';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([\\\"a\\\", \\\"b\\\", \\\"c\\\"]).join(\\\"\\\") => \\\"abc\\\"', function() {\n      var result   = Lazy([\"a\", \"b\", \"c\"]).join(\"\");\n      var expected = \"abc\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-join';\n    spec.exampleId  = 'Sequence-join-2';\n    spec.actual     = 'Lazy([\\\"a\\\", \\\"b\\\", \\\"c\\\"]).join(\\\"\\\")';\n    spec.expected   = '\\\"abc\\\"';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-last\">\n                    <h1>\n                        last\n                        <small>Sequence#last</small>\n                    </h1>\n\n                    <p>Creates a new sequence comprising the last N elements of this sequence, OR\n(if N is <code>undefined</code>) simply returns the last element of this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.last = function(count)</textarea>\n\n                        <table id=\"Sequence#last-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>count</td>\n                                    <td>number?</td>\n                                    <td><p>The number of items to take from the end of the\n    sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The new sequence (or the last element from this sequence\n    if no count was given).</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-last\">function isEven(x) { return x % 2 === 0; }\n\nLazy([1, 2, 3]).last()                 // => 3\nLazy([1, 2, 3]).last(2)                // sequence: [2, 3]\nLazy([1, 2, 3]).filter(isEven).last(2) // sequence: [2]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('last', function() {\n  function isEven(x) { return x % 2 === 0; }\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).last() => 3', function() {\n      var result   = Lazy([1, 2, 3]).last();\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-last';\n    spec.exampleId  = 'Sequence-last-1';\n    spec.actual     = 'Lazy([1, 2, 3]).last()';\n    spec.expected   = '3';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).last(2) => sequence: [2, 3]', function() {\n      var actual = Lazy([1, 2, 3]).last(2);\nexpect(actual.toArray()).toEqual([2, 3]);\n\n    });\n\n    spec.suiteId    = 'Sequence-last';\n    spec.exampleId  = 'Sequence-last-2';\n    spec.actual     = 'Lazy([1, 2, 3]).last(2)';\n    spec.expected   = 'sequence: [2, 3]';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).filter(isEven).last(2) => sequence: [2]', function() {\n      var actual = Lazy([1, 2, 3]).filter(isEven).last(2);\nexpect(actual.toArray()).toEqual([2]);\n\n    });\n\n    spec.suiteId    = 'Sequence-last';\n    spec.exampleId  = 'Sequence-last-3';\n    spec.actual     = 'Lazy([1, 2, 3]).filter(isEven).last(2)';\n    spec.expected   = 'sequence: [2]';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-lastIndexOf\">\n                    <h1>\n                        lastIndexOf\n                        <small>Sequence#lastIndexOf</small>\n                    </h1>\n\n                    <p>Performs (at worst) a linear search from the tail of this sequence,\nreturning the last index at which the specified value is found.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.lastIndexOf = function(value)</textarea>\n\n                        <table id=\"Sequence#lastIndexOf-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>value</td>\n                                    <td>*</td>\n                                    <td><p>The element to search for in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The last index within this sequence where the given value\n    is located, or -1 if the sequence doesn&#39;t contain the value.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-lastIndexOf\">function isEven(x) { return x % 2 === 0; }\n\nLazy([\"a\", \"b\", \"c\", \"b\", \"a\"]).lastIndexOf(\"b\")    // => 3\nLazy([1, 2, 3]).lastIndexOf(0)                      // => -1\nLazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2) // 2</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('lastIndexOf', function() {\n  function isEven(x) { return x % 2 === 0; }\n  (function() {\n    var spec = it('Lazy([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"b\\\", \\\"a\\\"]).lastIndexOf(\\\"b\\\") => 3', function() {\n      var result   = Lazy([\"a\", \"b\", \"c\", \"b\", \"a\"]).lastIndexOf(\"b\");\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-lastIndexOf';\n    spec.exampleId  = 'Sequence-lastIndexOf-1';\n    spec.actual     = 'Lazy([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"b\\\", \\\"a\\\"]).lastIndexOf(\\\"b\\\")';\n    spec.expected   = '3';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).lastIndexOf(0) => -1', function() {\n      var result   = Lazy([1, 2, 3]).lastIndexOf(0);\n      var expected = -1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-lastIndexOf';\n    spec.exampleId  = 'Sequence-lastIndexOf-2';\n    spec.actual     = 'Lazy([1, 2, 3]).lastIndexOf(0)';\n    spec.expected   = '-1';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2) => 2', function() {\n      var result   = Lazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2);\n      var expected = 2;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-lastIndexOf';\n    spec.exampleId  = 'Sequence-lastIndexOf-3';\n    spec.actual     = 'Lazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2)';\n    spec.expected   = '2';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-map\">\n                    <h1>\n                        map\n                        <small>Sequence#map</small>\n                    </h1>\n\n                    <p>Creates a new sequence whose values are calculated by passing this sequence&#39;s\nelements through some mapping function.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.map = function(mapFn)</textarea>\n\n                        <table id=\"Sequence#map-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>mapFn</td>\n                                    <td>Function</td>\n                                    <td><p>The mapping function used to project this sequence&#39;s\n    elements onto a new sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-map\">function increment(x) { return x + 1; }\n\nLazy([]).map(increment)        // sequence: []\nLazy([1, 2, 3]).map(increment) // sequence: [2, 3, 4]</textarea>\n                    </div>\n\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        <textarea>function increment(x) { return x + 1; }\n\nvar smArr = Lazy.range(10).toArray(),\n    lgArr = Lazy.range(100).toArray();\n\nLazy(smArr).map(increment).each(Lazy.noop) // lazy - 10 elements\nLazy(lgArr).map(increment).each(Lazy.noop) // lazy - 100 elements\n_.each(_.map(smArr, increment), Lazy.noop) // lodash - 10 elements\n_.each(_.map(lgArr, increment), Lazy.noop) // lodash - 100 elements</textarea>\n\n                        <table id=\"Sequence-map-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                <th>10 elements</th>\n                                <th>100 elements</th>\n                            </tr>\n\n                            <tr id=\"perf-test-Sequence-map-1\">\n                                <td>lazy</td>\n                                <td data-case-id=\"1\"></td>\n                                <td data-case-id=\"2\"></td>\n                            </tr>\n                            <tr id=\"perf-test-Sequence-map-2\">\n                                <td>lodash</td>\n                                <td data-case-id=\"3\"></td>\n                                <td data-case-id=\"4\"></td>\n                            </tr>\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                    </div>\n\n                    <script type=\"text/javascript\">\ndescribe('map', function() {\n  function increment(x) { return x + 1; }\n  (function() {\n    var spec = it('Lazy([]).map(increment) => sequence: []', function() {\n      var actual = Lazy([]).map(increment);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-map';\n    spec.exampleId  = 'Sequence-map-1';\n    spec.actual     = 'Lazy([]).map(increment)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).map(increment) => sequence: [2, 3, 4]', function() {\n      var actual = Lazy([1, 2, 3]).map(increment);\nexpect(actual.toArray()).toEqual([2, 3, 4]);\n\n    });\n\n    spec.suiteId    = 'Sequence-map';\n    spec.exampleId  = 'Sequence-map-2';\n    spec.actual     = 'Lazy([1, 2, 3]).map(increment)';\n    spec.expected   = 'sequence: [2, 3, 4]';\n    spec.lineNumber = 3;\n  }());\n});\n(function() {\n  var functionName = 'Sequence#map';\n\n\n  function increment(x) { return x + 1; }\n\nvar smArr = Lazy.range(10).toArray(),\n    lgArr = Lazy.range(100).toArray();\n\n  benchmarks['Sequence-map'] = [];\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-map-1-1',\n      fn: function() {\n        Lazy(smArr).map(increment).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-map-1';\n    benchmark.caseId = 1;\n\n    benchmarks['Sequence-map'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-map-1-2',\n      fn: function() {\n        Lazy(lgArr).map(increment).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-map-1';\n    benchmark.caseId = 2;\n\n    benchmarks['Sequence-map'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-map-2-3',\n      fn: function() {\n        _.each(_.map(smArr, increment), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-map-2';\n    benchmark.caseId = 3;\n\n    benchmarks['Sequence-map'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-map-2-4',\n      fn: function() {\n        _.each(_.map(lgArr, increment), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-map-2';\n    benchmark.caseId = 4;\n\n    benchmarks['Sequence-map'].push(benchmark);\n  }());\n\n}());\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-max\">\n                    <h1>\n                        max\n                        <small>Sequence#max</small>\n                    </h1>\n\n                    <p>Gets the maximum value in the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.max = function(valueFn)</textarea>\n\n                        <table id=\"Sequence#max-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>valueFn</td>\n                                    <td>Function?</td>\n                                    <td><p>The function by which the value for comparison is\n    calculated for each element in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The element with the highest value in the sequence, or\n    <code>-Infinity</code> if the sequence is empty.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-max\">function reverseDigits(x) {\n  return Number(String(x).split('').reverse().join(''));\n}\n\nLazy([]).max()                              // => -Infinity\nLazy([6, 18, 2, 48, 29]).max()              // => 48\nLazy([6, 18, 2, 48, 29]).max(reverseDigits) // => 29</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('max', function() {\n  function reverseDigits(x) {\n  return Number(String(x).split('').reverse().join(''));\n}\n  (function() {\n    var spec = it('Lazy([]).max() => -Infinity', function() {\n      var result   = Lazy([]).max();\n      var expected = -Infinity;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-max';\n    spec.exampleId  = 'Sequence-max-1';\n    spec.actual     = 'Lazy([]).max()';\n    spec.expected   = '-Infinity';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy([6, 18, 2, 48, 29]).max() => 48', function() {\n      var result   = Lazy([6, 18, 2, 48, 29]).max();\n      var expected = 48;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-max';\n    spec.exampleId  = 'Sequence-max-2';\n    spec.actual     = 'Lazy([6, 18, 2, 48, 29]).max()';\n    spec.expected   = '48';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy([6, 18, 2, 48, 29]).max(reverseDigits) => 29', function() {\n      var result   = Lazy([6, 18, 2, 48, 29]).max(reverseDigits);\n      var expected = 29;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-max';\n    spec.exampleId  = 'Sequence-max-3';\n    spec.actual     = 'Lazy([6, 18, 2, 48, 29]).max(reverseDigits)';\n    spec.expected   = '29';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-min\">\n                    <h1>\n                        min\n                        <small>Sequence#min</small>\n                    </h1>\n\n                    <p>Gets the minimum value in the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.min = function(valueFn)</textarea>\n\n                        <table id=\"Sequence#min-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>valueFn</td>\n                                    <td>Function?</td>\n                                    <td><p>The function by which the value for comparison is\n    calculated for each element in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The element with the lowest value in the sequence, or\n    <code>Infinity</code> if the sequence is empty.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-min\">function negate(x) { return x * -1; }\n\nLazy([]).min()                       // => Infinity\nLazy([6, 18, 2, 49, 34]).min()       // => 2\nLazy([6, 18, 2, 49, 34]).min(negate) // => 49</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('min', function() {\n  function negate(x) { return x * -1; }\n  (function() {\n    var spec = it('Lazy([]).min() => Infinity', function() {\n      var result   = Lazy([]).min();\n      var expected = Infinity;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-min';\n    spec.exampleId  = 'Sequence-min-1';\n    spec.actual     = 'Lazy([]).min()';\n    spec.expected   = 'Infinity';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([6, 18, 2, 49, 34]).min() => 2', function() {\n      var result   = Lazy([6, 18, 2, 49, 34]).min();\n      var expected = 2;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-min';\n    spec.exampleId  = 'Sequence-min-2';\n    spec.actual     = 'Lazy([6, 18, 2, 49, 34]).min()';\n    spec.expected   = '2';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([6, 18, 2, 49, 34]).min(negate) => 49', function() {\n      var result   = Lazy([6, 18, 2, 49, 34]).min(negate);\n      var expected = 49;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-min';\n    spec.exampleId  = 'Sequence-min-3';\n    spec.actual     = 'Lazy([6, 18, 2, 49, 34]).min(negate)';\n    spec.expected   = '49';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-pluck\">\n                    <h1>\n                        pluck\n                        <small>Sequence#pluck</small>\n                    </h1>\n\n                    <p>Creates a new sequence whose values are calculated by accessing the specified\nproperty from each element in this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.pluck = function(propertyName)</textarea>\n\n                        <table id=\"Sequence#pluck-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>propertyName</td>\n                                    <td>string</td>\n                                    <td><p>The name of the property to access for every\n    element in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-pluck\">var people = [\n  { first: \"Dan\", last: \"Tao\" },\n  { first: \"Bob\", last: \"Smith\" }\n];\n\nLazy(people).pluck(\"last\") // sequence: [\"Tao\", \"Smith\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('pluck', function() {\n  var people = [\n  { first: \"Dan\", last: \"Tao\" },\n  { first: \"Bob\", last: \"Smith\" }\n];\n  (function() {\n    var spec = it('Lazy(people).pluck(\\\"last\\\") => sequence: [\\\"Tao\\\", \\\"Smith\\\"]', function() {\n      var actual = Lazy(people).pluck(\"last\");\nexpect(actual.toArray()).toEqual([\"Tao\", \"Smith\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-pluck';\n    spec.exampleId  = 'Sequence-pluck-1';\n    spec.actual     = 'Lazy(people).pluck(\\\"last\\\")';\n    spec.expected   = 'sequence: [\\\"Tao\\\", \\\"Smith\\\"]';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-reduce\">\n                    <h1>\n                        reduce\n                        <small>Sequence#reduce</small>\n                    </h1>\n\n                    <p>Aggregates a sequence into a single value according to some accumulator\nfunction.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.reduce = function(aggregator, memo)</textarea>\n\n                        <table id=\"Sequence#reduce-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>aggregator</td>\n                                    <td>Function</td>\n                                    <td><p>The function through which to pass every element\n    in the sequence. For every element, the function will be passed the total\n    aggregated result thus far and the element itself, and should return a\n    new aggregated result.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>memo</td>\n                                    <td>*?</td>\n                                    <td><p>The starting value to use for the aggregated result\n    (defaults to the first element in the sequence).</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The result of the aggregation.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-reduce\">function multiply(x, y) { return x * y; }\n\nvar numbers = [1, 2, 3, 4];\n\nLazy(numbers).reduce(multiply)    // => 24\nLazy(numbers).reduce(multiply, 5) // => 120</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('reduce', function() {\n  function multiply(x, y) { return x * y; }\n\nvar numbers = [1, 2, 3, 4];\n  (function() {\n    var spec = it('Lazy(numbers).reduce(multiply) => 24', function() {\n      var result   = Lazy(numbers).reduce(multiply);\n      var expected = 24;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-reduce';\n    spec.exampleId  = 'Sequence-reduce-1';\n    spec.actual     = 'Lazy(numbers).reduce(multiply)';\n    spec.expected   = '24';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).reduce(multiply, 5) => 120', function() {\n      var result   = Lazy(numbers).reduce(multiply, 5);\n      var expected = 120;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-reduce';\n    spec.exampleId  = 'Sequence-reduce-2';\n    spec.actual     = 'Lazy(numbers).reduce(multiply, 5)';\n    spec.expected   = '120';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-reduceRight\">\n                    <h1>\n                        reduceRight\n                        <small>Sequence#reduceRight</small>\n                    </h1>\n\n                    <p>Aggregates a sequence, from the tail, into a single value according to some\naccumulator function.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.reduceRight = function(aggregator, memo)</textarea>\n\n                        <table id=\"Sequence#reduceRight-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>aggregator</td>\n                                    <td>Function</td>\n                                    <td><p>The function through which to pass every element\n    in the sequence. For every element, the function will be passed the total\n    aggregated result thus far and the element itself, and should return a\n    new aggregated result.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>memo</td>\n                                    <td>*</td>\n                                    <td><p>The starting value to use for the aggregated result.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The result of the aggregation.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-reduceRight\">function append(s1, s2) {\n  return s1 + s2;\n}\n\nfunction isVowel(str) {\n  return \"aeiou\".indexOf(str) !== -1;\n}\n\nLazy(\"abcde\").reduceRight(append)                 // => \"edcba\"\nLazy(\"abcde\").filter(isVowel).reduceRight(append) // => \"ea\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('reduceRight', function() {\n  function append(s1, s2) {\n  return s1 + s2;\n}\n\nfunction isVowel(str) {\n  return \"aeiou\".indexOf(str) !== -1;\n}\n  (function() {\n    var spec = it('Lazy(\\\"abcde\\\").reduceRight(append) => \\\"edcba\\\"', function() {\n      var result   = Lazy(\"abcde\").reduceRight(append);\n      var expected = \"edcba\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-reduceRight';\n    spec.exampleId  = 'Sequence-reduceRight-1';\n    spec.actual     = 'Lazy(\\\"abcde\\\").reduceRight(append)';\n    spec.expected   = '\\\"edcba\\\"';\n    spec.lineNumber = 8;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"abcde\\\").filter(isVowel).reduceRight(append) => \\\"ea\\\"', function() {\n      var result   = Lazy(\"abcde\").filter(isVowel).reduceRight(append);\n      var expected = \"ea\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-reduceRight';\n    spec.exampleId  = 'Sequence-reduceRight-2';\n    spec.actual     = 'Lazy(\\\"abcde\\\").filter(isVowel).reduceRight(append)';\n    spec.expected   = '\\\"ea\\\"';\n    spec.lineNumber = 9;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-reject\">\n                    <h1>\n                        reject\n                        <small>Sequence#reject</small>\n                    </h1>\n\n                    <p>Creates a new sequence whose values exclude the elements of this sequence\nidentified by the specified predicate.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.reject = function(rejectFn)</textarea>\n\n                        <table id=\"Sequence#reject-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>rejectFn</td>\n                                    <td>Function</td>\n                                    <td><p>The predicate to call on each element in this\n    sequence, which returns true if the element should be omitted.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-reject\">function isEven(x) { return x % 2 === 0; }\n\nLazy([1, 2, 3, 4, 5]).reject(isEven) // sequence: [1, 3, 5]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('reject', function() {\n  function isEven(x) { return x % 2 === 0; }\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).reject(isEven) => sequence: [1, 3, 5]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).reject(isEven);\nexpect(actual.toArray()).toEqual([1, 3, 5]);\n\n    });\n\n    spec.suiteId    = 'Sequence-reject';\n    spec.exampleId  = 'Sequence-reject-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).reject(isEven)';\n    spec.expected   = 'sequence: [1, 3, 5]';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-rest\">\n                    <h1>\n                        rest\n                        <small>Sequence#rest</small>\n                    </h1>\n\n                    <p>Creates a new sequence comprising all but the first N elements of this\nsequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.rest = function(count)</textarea>\n\n                        <table id=\"Sequence#rest-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>count</td>\n                                    <td>number?</td>\n                                    <td><p>The number of items to omit from the beginning of the\n    sequence (defaults to 1).</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-rest\">Lazy([1, 2, 3, 4]).rest()  // sequence: [2, 3, 4]\nLazy([1, 2, 3, 4]).rest(0) // sequence: [1, 2, 3, 4]\nLazy([1, 2, 3, 4]).rest(2) // sequence: [3, 4]\nLazy([1, 2, 3, 4]).rest(5) // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('rest', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).rest() => sequence: [2, 3, 4]', function() {\n      var actual = Lazy([1, 2, 3, 4]).rest();\nexpect(actual.toArray()).toEqual([2, 3, 4]);\n\n    });\n\n    spec.suiteId    = 'Sequence-rest';\n    spec.exampleId  = 'Sequence-rest-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).rest()';\n    spec.expected   = 'sequence: [2, 3, 4]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).rest(0) => sequence: [1, 2, 3, 4]', function() {\n      var actual = Lazy([1, 2, 3, 4]).rest(0);\nexpect(actual.toArray()).toEqual([1, 2, 3, 4]);\n\n    });\n\n    spec.suiteId    = 'Sequence-rest';\n    spec.exampleId  = 'Sequence-rest-2';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).rest(0)';\n    spec.expected   = 'sequence: [1, 2, 3, 4]';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).rest(2) => sequence: [3, 4]', function() {\n      var actual = Lazy([1, 2, 3, 4]).rest(2);\nexpect(actual.toArray()).toEqual([3, 4]);\n\n    });\n\n    spec.suiteId    = 'Sequence-rest';\n    spec.exampleId  = 'Sequence-rest-3';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).rest(2)';\n    spec.expected   = 'sequence: [3, 4]';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).rest(5) => sequence: []', function() {\n      var actual = Lazy([1, 2, 3, 4]).rest(5);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-rest';\n    spec.exampleId  = 'Sequence-rest-4';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).rest(5)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 3;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-reverse\">\n                    <h1>\n                        reverse\n                        <small>Sequence#reverse</small>\n                    </h1>\n\n                    <p>Creates a new sequence with the same elements as this one, but to be iterated\nin the opposite order.</p>\n<p>Note that in some (but not all) cases, the only way to create such a sequence\nmay require iterating the entire underlying source when <code>each</code> is called.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.reverse = function()</textarea>\n\n                        <table id=\"Sequence#reverse-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-reverse\">Lazy([1, 2, 3]).reverse() // sequence: [3, 2, 1]\nLazy([]).reverse()        // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('reverse', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).reverse() => sequence: [3, 2, 1]', function() {\n      var actual = Lazy([1, 2, 3]).reverse();\nexpect(actual.toArray()).toEqual([3, 2, 1]);\n\n    });\n\n    spec.suiteId    = 'Sequence-reverse';\n    spec.exampleId  = 'Sequence-reverse-1';\n    spec.actual     = 'Lazy([1, 2, 3]).reverse()';\n    spec.expected   = 'sequence: [3, 2, 1]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([]).reverse() => sequence: []', function() {\n      var actual = Lazy([]).reverse();\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-reverse';\n    spec.exampleId  = 'Sequence-reverse-2';\n    spec.actual     = 'Lazy([]).reverse()';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-shuffle\">\n                    <h1>\n                        shuffle\n                        <small>Sequence#shuffle</small>\n                    </h1>\n\n                    <p>Creates a new sequence with the same elements as this one, in a randomized\norder.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.shuffle = function()</textarea>\n\n                        <table id=\"Sequence#shuffle-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-shuffle\">Lazy([1, 2, 3, 4, 5]).shuffle() // the values [1, 2, 3, 4, 5] in any order</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('shuffle', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).shuffle() => the values [1, 2, 3, 4, 5] in any order', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).shuffle();\n\nactual = actual.toArray().sort();\n\nexpect(actual).toEqual([1, 2, 3, 4, 5].sort());\n\n    });\n\n    spec.suiteId    = 'Sequence-shuffle';\n    spec.exampleId  = 'Sequence-shuffle-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).shuffle()';\n    spec.expected   = 'the values [1, 2, 3, 4, 5] in any order';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-some\">\n                    <h1>\n                        some\n                        <small>Sequence#some</small>\n                    </h1>\n\n                    <p>Checks whether at least one element in this sequence satisfies a given\npredicate (or, if no predicate is specified, whether the sequence contains at\nleast one element).</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.some = function(predicate)</textarea>\n\n                        <table id=\"Sequence#some-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>predicate</td>\n                                    <td>Function?</td>\n                                    <td><p>A function to call on (potentially) every element\n    in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>True if <code>predicate</code> returns true for at least one element\n    in the sequence. False if <code>predicate</code> returns false for every element (or\n    the sequence is empty).</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-some\">function isEven(x) { return x % 2 === 0; }\nfunction isNegative(x) { return x < 0; }\n\nvar numbers = [1, 2, 3, 4, 5];\n\nLazy(numbers).some()           // => true\nLazy(numbers).some(isEven)     // => true\nLazy(numbers).some(isNegative) // => false\nLazy([]).some()                // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('some', function() {\n  function isEven(x) { return x % 2 === 0; }\nfunction isNegative(x) { return x < 0; }\n\nvar numbers = [1, 2, 3, 4, 5];\n  (function() {\n    var spec = it('Lazy(numbers).some() => true', function() {\n      var result   = Lazy(numbers).some();\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-some';\n    spec.exampleId  = 'Sequence-some-1';\n    spec.actual     = 'Lazy(numbers).some()';\n    spec.expected   = 'true';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).some(isEven) => true', function() {\n      var result   = Lazy(numbers).some(isEven);\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-some';\n    spec.exampleId  = 'Sequence-some-2';\n    spec.actual     = 'Lazy(numbers).some(isEven)';\n    spec.expected   = 'true';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy(numbers).some(isNegative) => false', function() {\n      var result   = Lazy(numbers).some(isNegative);\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-some';\n    spec.exampleId  = 'Sequence-some-3';\n    spec.actual     = 'Lazy(numbers).some(isNegative)';\n    spec.expected   = 'false';\n    spec.lineNumber = 7;\n  }());\n  (function() {\n    var spec = it('Lazy([]).some() => false', function() {\n      var result   = Lazy([]).some();\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-some';\n    spec.exampleId  = 'Sequence-some-4';\n    spec.actual     = 'Lazy([]).some()';\n    spec.expected   = 'false';\n    spec.lineNumber = 8;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-sortBy\">\n                    <h1>\n                        sortBy\n                        <small>Sequence#sortBy</small>\n                    </h1>\n\n                    <p>Creates a new sequence with the same elements as this one, but ordered\naccording to the values returned by the specified function.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.sortBy = function(sortFn)</textarea>\n\n                        <table id=\"Sequence#sortBy-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>sortFn</td>\n                                    <td>Function</td>\n                                    <td><p>The function to call on the elements in this\n    sequence, in order to sort them.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-sortBy\">function population(country) {\n  return country.pop;\n}\n\nfunction area(country) {\n  return country.sqkm;\n}\n\nvar countries = [\n  { name: \"USA\", pop: 320000000, sqkm: 9600000 },\n  { name: \"Brazil\", pop: 194000000, sqkm: 8500000 },\n  { name: \"Nigeria\", pop: 174000000, sqkm: 924000 },\n  { name: \"China\", pop: 1350000000, sqkm: 9700000 },\n  { name: \"Russia\", pop: 143000000, sqkm: 17000000 },\n  { name: \"Australia\", pop: 23000000, sqkm: 7700000 }\n];\n\nLazy(countries).sortBy(population).last(3).pluck('name') // sequence: [\"Brazil\", \"USA\", \"China\"]\nLazy(countries).sortBy(area).last(3).pluck('name')       // sequence: [\"USA\", \"China\", \"Russia\"]</textarea>\n                    </div>\n\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        <textarea>var randoms = Lazy.generate(Math.random).take(100).toArray();\n\nLazy(randoms).sortBy(Lazy.identity).each(Lazy.noop) // lazy\n_.each(_.sortBy(randoms, Lazy.identity), Lazy.noop) // lodash</textarea>\n\n                        <table id=\"Sequence-sortBy-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                <th>Ops&#x2F;second</th>\n                            </tr>\n\n                            <tr id=\"perf-test-Sequence-sortBy-1\">\n                                <td>lazy</td>\n                                <td data-case-id=\"1\"></td>\n                            </tr>\n                            <tr id=\"perf-test-Sequence-sortBy-2\">\n                                <td>lodash</td>\n                                <td data-case-id=\"2\"></td>\n                            </tr>\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                    </div>\n\n                    <script type=\"text/javascript\">\ndescribe('sortBy', function() {\n  function population(country) {\n  return country.pop;\n}\n\nfunction area(country) {\n  return country.sqkm;\n}\n\nvar countries = [\n  { name: \"USA\", pop: 320000000, sqkm: 9600000 },\n  { name: \"Brazil\", pop: 194000000, sqkm: 8500000 },\n  { name: \"Nigeria\", pop: 174000000, sqkm: 924000 },\n  { name: \"China\", pop: 1350000000, sqkm: 9700000 },\n  { name: \"Russia\", pop: 143000000, sqkm: 17000000 },\n  { name: \"Australia\", pop: 23000000, sqkm: 7700000 }\n];\n  (function() {\n    var spec = it('Lazy(countries).sortBy(population).last(3).pluck(\\'name\\') => sequence: [\\\"Brazil\\\", \\\"USA\\\", \\\"China\\\"]', function() {\n      var actual = Lazy(countries).sortBy(population).last(3).pluck('name');\nexpect(actual.toArray()).toEqual([\"Brazil\", \"USA\", \"China\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-sortBy';\n    spec.exampleId  = 'Sequence-sortBy-1';\n    spec.actual     = 'Lazy(countries).sortBy(population).last(3).pluck(\\'name\\')';\n    spec.expected   = 'sequence: [\\\"Brazil\\\", \\\"USA\\\", \\\"China\\\"]';\n    spec.lineNumber = 17;\n  }());\n  (function() {\n    var spec = it('Lazy(countries).sortBy(area).last(3).pluck(\\'name\\') => sequence: [\\\"USA\\\", \\\"China\\\", \\\"Russia\\\"]', function() {\n      var actual = Lazy(countries).sortBy(area).last(3).pluck('name');\nexpect(actual.toArray()).toEqual([\"USA\", \"China\", \"Russia\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-sortBy';\n    spec.exampleId  = 'Sequence-sortBy-2';\n    spec.actual     = 'Lazy(countries).sortBy(area).last(3).pluck(\\'name\\')';\n    spec.expected   = 'sequence: [\\\"USA\\\", \\\"China\\\", \\\"Russia\\\"]';\n    spec.lineNumber = 18;\n  }());\n});\n(function() {\n  var functionName = 'Sequence#sortBy';\n\n\n  var randoms = Lazy.generate(Math.random).take(100).toArray();\n\n  benchmarks['Sequence-sortBy'] = [];\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-sortBy-1-1',\n      fn: function() {\n        Lazy(randoms).sortBy(Lazy.identity).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-sortBy-1';\n    benchmark.caseId = 1;\n\n    benchmarks['Sequence-sortBy'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-sortBy-2-2',\n      fn: function() {\n        _.each(_.sortBy(randoms, Lazy.identity), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-sortBy-2';\n    benchmark.caseId = 2;\n\n    benchmarks['Sequence-sortBy'].push(benchmark);\n  }());\n\n}());\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-sortedIndex\">\n                    <h1>\n                        sortedIndex\n                        <small>Sequence#sortedIndex</small>\n                    </h1>\n\n                    <p>Performs a binary search of this sequence, returning the lowest index where\nthe given value is either found, or where it belongs (if it is not already\nin the sequence).</p>\n<p>This method assumes the sequence is in sorted order and will fail otherwise.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.sortedIndex = function(value)</textarea>\n\n                        <table id=\"Sequence#sortedIndex-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>value</td>\n                                    <td>*</td>\n                                    <td><p>The element to search for in the sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>An index within this sequence where the given value is\n    located, or where it belongs in sorted order.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-sortedIndex\">function isEven(x) { return x % 2 === 0; }\n\nLazy([1, 3, 6, 9]).sortedIndex(3)                    // => 1\nLazy([1, 3, 6, 9]).sortedIndex(7)                    // => 3\nLazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10) // => 0\nLazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12) // => 1</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('sortedIndex', function() {\n  function isEven(x) { return x % 2 === 0; }\n  (function() {\n    var spec = it('Lazy([1, 3, 6, 9]).sortedIndex(3) => 1', function() {\n      var result   = Lazy([1, 3, 6, 9]).sortedIndex(3);\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sortedIndex';\n    spec.exampleId  = 'Sequence-sortedIndex-1';\n    spec.actual     = 'Lazy([1, 3, 6, 9]).sortedIndex(3)';\n    spec.expected   = '1';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 3, 6, 9]).sortedIndex(7) => 3', function() {\n      var result   = Lazy([1, 3, 6, 9]).sortedIndex(7);\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sortedIndex';\n    spec.exampleId  = 'Sequence-sortedIndex-2';\n    spec.actual     = 'Lazy([1, 3, 6, 9]).sortedIndex(7)';\n    spec.expected   = '3';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10) => 0', function() {\n      var result   = Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10);\n      var expected = 0;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sortedIndex';\n    spec.exampleId  = 'Sequence-sortedIndex-3';\n    spec.actual     = 'Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10)';\n    spec.expected   = '0';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12) => 1', function() {\n      var result   = Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12);\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sortedIndex';\n    spec.exampleId  = 'Sequence-sortedIndex-4';\n    spec.actual     = 'Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12)';\n    spec.expected   = '1';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-sum\">\n                    <h1>\n                        sum\n                        <small>Sequence#sum</small>\n                    </h1>\n\n                    <p>Gets the sum of the values in the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.sum = function(valueFn)</textarea>\n\n                        <table id=\"Sequence#sum-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>valueFn</td>\n                                    <td>Function?</td>\n                                    <td><p>The function used to select the values that will\n    be summed up.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The sum.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-sum\">Lazy([]).sum()                     // => 0\nLazy([1, 2, 3, 4]).sum()           // => 10\nLazy([1.2, 3.4]).sum(Math.floor)   // => 4\nLazy(['foo', 'bar']).sum('length') // => 6</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('sum', function() {\n  \n  (function() {\n    var spec = it('Lazy([]).sum() => 0', function() {\n      var result   = Lazy([]).sum();\n      var expected = 0;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sum';\n    spec.exampleId  = 'Sequence-sum-1';\n    spec.actual     = 'Lazy([]).sum()';\n    spec.expected   = '0';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).sum() => 10', function() {\n      var result   = Lazy([1, 2, 3, 4]).sum();\n      var expected = 10;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sum';\n    spec.exampleId  = 'Sequence-sum-2';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).sum()';\n    spec.expected   = '10';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy([1.2, 3.4]).sum(Math.floor) => 4', function() {\n      var result   = Lazy([1.2, 3.4]).sum(Math.floor);\n      var expected = 4;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sum';\n    spec.exampleId  = 'Sequence-sum-3';\n    spec.actual     = 'Lazy([1.2, 3.4]).sum(Math.floor)';\n    spec.expected   = '4';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([\\'foo\\', \\'bar\\']).sum(\\'length\\') => 6', function() {\n      var result   = Lazy(['foo', 'bar']).sum('length');\n      var expected = 6;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-sum';\n    spec.exampleId  = 'Sequence-sum-4';\n    spec.actual     = 'Lazy([\\'foo\\', \\'bar\\']).sum(\\'length\\')';\n    spec.expected   = '6';\n    spec.lineNumber = 3;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-takeWhile\">\n                    <h1>\n                        takeWhile\n                        <small>Sequence#takeWhile</small>\n                    </h1>\n\n                    <p>Creates a new sequence comprising the elements from the head of this sequence\nthat satisfy some predicate. Once an element is encountered that doesn&#39;t\nsatisfy the predicate, iteration will stop.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.takeWhile = function(predicate)</textarea>\n\n                        <table id=\"Sequence#takeWhile-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>predicate</td>\n                                    <td>Function</td>\n                                    <td></td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-takeWhile\">function lessThan(x) {\n  return function(y) {\n    return y < x;\n  };\n}\n\nLazy([1, 2, 3, 4]).takeWhile(lessThan(3)) // sequence: [1, 2]\nLazy([1, 2, 3, 4]).takeWhile(lessThan(0)) // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('takeWhile', function() {\n  function lessThan(x) {\n  return function(y) {\n    return y < x;\n  };\n}\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).takeWhile(lessThan(3)) => sequence: [1, 2]', function() {\n      var actual = Lazy([1, 2, 3, 4]).takeWhile(lessThan(3));\nexpect(actual.toArray()).toEqual([1, 2]);\n\n    });\n\n    spec.suiteId    = 'Sequence-takeWhile';\n    spec.exampleId  = 'Sequence-takeWhile-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).takeWhile(lessThan(3))';\n    spec.expected   = 'sequence: [1, 2]';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4]).takeWhile(lessThan(0)) => sequence: []', function() {\n      var actual = Lazy([1, 2, 3, 4]).takeWhile(lessThan(0));\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'Sequence-takeWhile';\n    spec.exampleId  = 'Sequence-takeWhile-2';\n    spec.actual     = 'Lazy([1, 2, 3, 4]).takeWhile(lessThan(0))';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 7;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-toArray\">\n                    <h1>\n                        toArray\n                        <small>Sequence#toArray</small>\n                    </h1>\n\n                    <p>Creates an array snapshot of a sequence.</p>\n<p>Note that for indefinite sequences, this method may raise an exception or\n(worse) cause the environment to hang.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.toArray = function()</textarea>\n\n                        <table id=\"Sequence#toArray-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Array</td>\n                                    <td><p>An array containing the current contents of the sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-toArray\">Lazy([1, 2, 3]).toArray() // => [1, 2, 3]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('toArray', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).toArray() => [1, 2, 3]', function() {\n      var result   = Lazy([1, 2, 3]).toArray();\n      var expected = [1, 2, 3];\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-toArray';\n    spec.exampleId  = 'Sequence-toArray-1';\n    spec.actual     = 'Lazy([1, 2, 3]).toArray()';\n    spec.expected   = '[1, 2, 3]';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-toObject\">\n                    <h1>\n                        toObject\n                        <small>Sequence#toObject</small>\n                    </h1>\n\n                    <p>Creates an object from a sequence of key/value pairs.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.toObject = function()</textarea>\n\n                        <table id=\"Sequence#toObject-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Object</td>\n                                    <td><p>An object with keys and values corresponding to the pairs\n    of elements in the sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-toObject\">var details = [\n  [\"first\", \"Dan\"],\n  [\"last\", \"Tao\"],\n  [\"age\", 29]\n];\n\nLazy(details).toObject() // => { first: \"Dan\", last: \"Tao\", age: 29 }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('toObject', function() {\n  var details = [\n  [\"first\", \"Dan\"],\n  [\"last\", \"Tao\"],\n  [\"age\", 29]\n];\n  (function() {\n    var spec = it('Lazy(details).toObject() => { first: \\\"Dan\\\", last: \\\"Tao\\\", age: 29 }', function() {\n      var result   = Lazy(details).toObject();\n      var expected = { first: \"Dan\", last: \"Tao\", age: 29 };\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'Sequence-toObject';\n    spec.exampleId  = 'Sequence-toObject-1';\n    spec.actual     = 'Lazy(details).toObject()';\n    spec.expected   = '{ first: \\\"Dan\\\", last: \\\"Tao\\\", age: 29 }';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-union\">\n                    <h1>\n                        union\n                        <small>Sequence#union</small>\n                    </h1>\n\n                    <p>Creates a new sequence with all the unique elements either in this sequence\nor among the specified arguments.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.union = function(var_args)</textarea>\n\n                        <table id=\"Sequence#union-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>var_args</td>\n                                    <td>...*</td>\n                                    <td><p>The values, or array(s) of values, to be additionally\n    included in the resulting sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-union\">Lazy([\"foo\", \"bar\"]).union([])             // sequence: [\"foo\", \"bar\"]\nLazy([\"foo\", \"bar\"]).union([\"bar\", \"baz\"]) // sequence: [\"foo\", \"bar\", \"baz\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('union', function() {\n  \n  (function() {\n    var spec = it('Lazy([\\\"foo\\\", \\\"bar\\\"]).union([]) => sequence: [\\\"foo\\\", \\\"bar\\\"]', function() {\n      var actual = Lazy([\"foo\", \"bar\"]).union([]);\nexpect(actual.toArray()).toEqual([\"foo\", \"bar\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-union';\n    spec.exampleId  = 'Sequence-union-1';\n    spec.actual     = 'Lazy([\\\"foo\\\", \\\"bar\\\"]).union([])';\n    spec.expected   = 'sequence: [\\\"foo\\\", \\\"bar\\\"]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([\\\"foo\\\", \\\"bar\\\"]).union([\\\"bar\\\", \\\"baz\\\"]) => sequence: [\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]', function() {\n      var actual = Lazy([\"foo\", \"bar\"]).union([\"bar\", \"baz\"]);\nexpect(actual.toArray()).toEqual([\"foo\", \"bar\", \"baz\"]);\n\n    });\n\n    spec.suiteId    = 'Sequence-union';\n    spec.exampleId  = 'Sequence-union-2';\n    spec.actual     = 'Lazy([\\\"foo\\\", \\\"bar\\\"]).union([\\\"bar\\\", \\\"baz\\\"])';\n    spec.expected   = 'sequence: [\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-uniq\">\n                    <h1>\n                        uniq\n                        <small>Sequence#uniq</small>\n                    </h1>\n\n                    <p>Creates a new sequence with every unique element from this one appearing\nexactly once (i.e., with duplicates removed).</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.uniq = function()</textarea>\n\n                        <table id=\"Sequence#uniq-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-uniq\">Lazy([1, 2, 2, 3, 3, 3]).uniq() // sequence: [1, 2, 3]</textarea>\n                    </div>\n\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        <textarea>function randomOf(array) {\n  return function() {\n    return array[Math.floor(Math.random() * array.length)];\n  };\n}\n\nvar mostUnique = Lazy.generate(randomOf(_.range(100)), 100).toArray(),\n    someUnique = Lazy.generate(randomOf(_.range(50)), 100).toArray(),\n    mostDupes  = Lazy.generate(randomOf(_.range(5)), 100).toArray();\n\nLazy(mostUnique).uniq().each(Lazy.noop) // lazy - mostly unique elements\nLazy(someUnique).uniq().each(Lazy.noop) // lazy - some unique elements\nLazy(mostDupes).uniq().each(Lazy.noop)  // lazy - mostly duplicate elements\n_.each(_.uniq(mostUnique), Lazy.noop)   // lodash - mostly unique elements\n_.each(_.uniq(someUnique), Lazy.noop)   // lodash - some unique elements\n_.each(_.uniq(mostDupes), Lazy.noop)    // lodash - mostly duplicate elements</textarea>\n\n                        <table id=\"Sequence-uniq-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                <th>mostly unique elements</th>\n                                <th>some unique elements</th>\n                                <th>mostly duplicate elements</th>\n                            </tr>\n\n                            <tr id=\"perf-test-Sequence-uniq-1\">\n                                <td>lazy</td>\n                                <td data-case-id=\"1\"></td>\n                                <td data-case-id=\"2\"></td>\n                                <td data-case-id=\"3\"></td>\n                            </tr>\n                            <tr id=\"perf-test-Sequence-uniq-2\">\n                                <td>lodash</td>\n                                <td data-case-id=\"4\"></td>\n                                <td data-case-id=\"5\"></td>\n                                <td data-case-id=\"6\"></td>\n                            </tr>\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                    </div>\n\n                    <script type=\"text/javascript\">\ndescribe('uniq', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 2, 3, 3, 3]).uniq() => sequence: [1, 2, 3]', function() {\n      var actual = Lazy([1, 2, 2, 3, 3, 3]).uniq();\nexpect(actual.toArray()).toEqual([1, 2, 3]);\n\n    });\n\n    spec.suiteId    = 'Sequence-uniq';\n    spec.exampleId  = 'Sequence-uniq-1';\n    spec.actual     = 'Lazy([1, 2, 2, 3, 3, 3]).uniq()';\n    spec.expected   = 'sequence: [1, 2, 3]';\n    spec.lineNumber = 0;\n  }());\n});\n(function() {\n  var functionName = 'Sequence#uniq';\n\n\n  function randomOf(array) {\n  return function() {\n    return array[Math.floor(Math.random() * array.length)];\n  };\n}\n\nvar mostUnique = Lazy.generate(randomOf(_.range(100)), 100).toArray(),\n    someUnique = Lazy.generate(randomOf(_.range(50)), 100).toArray(),\n    mostDupes  = Lazy.generate(randomOf(_.range(5)), 100).toArray();\n\n  benchmarks['Sequence-uniq'] = [];\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-uniq-1-1',\n      fn: function() {\n        Lazy(mostUnique).uniq().each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-uniq-1';\n    benchmark.caseId = 1;\n\n    benchmarks['Sequence-uniq'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-uniq-1-2',\n      fn: function() {\n        Lazy(someUnique).uniq().each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-uniq-1';\n    benchmark.caseId = 2;\n\n    benchmarks['Sequence-uniq'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-uniq-1-3',\n      fn: function() {\n        Lazy(mostDupes).uniq().each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-uniq-1';\n    benchmark.caseId = 3;\n\n    benchmarks['Sequence-uniq'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-uniq-2-4',\n      fn: function() {\n        _.each(_.uniq(mostUnique), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-uniq-2';\n    benchmark.caseId = 4;\n\n    benchmarks['Sequence-uniq'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-uniq-2-5',\n      fn: function() {\n        _.each(_.uniq(someUnique), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-uniq-2';\n    benchmark.caseId = 5;\n\n    benchmarks['Sequence-uniq'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-uniq-2-6',\n      fn: function() {\n        _.each(_.uniq(mostDupes), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-uniq-2';\n    benchmark.caseId = 6;\n\n    benchmarks['Sequence-uniq'].push(benchmark);\n  }());\n\n}());\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-where\">\n                    <h1>\n                        where\n                        <small>Sequence#where</small>\n                    </h1>\n\n                    <p>Creates a new sequence whose values are the elements of this sequence with\nproperty names and values matching those of the specified object.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.where = function(properties)</textarea>\n\n                        <table id=\"Sequence#where-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>properties</td>\n                                    <td>Object</td>\n                                    <td><p>The properties that should be found on every\n    element that is to be included in this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-where\">var people = [\n  { first: \"Dan\", last: \"Tao\" },\n  { first: \"Bob\", last: \"Smith\" }\n];\n\nLazy(people).where({ first: \"Dan\" }) // sequence: [{ first: \"Dan\", last: \"Tao\" }]</textarea>\n                    </div>\n\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        <textarea>var animals = [\"dog\", \"cat\", \"mouse\", \"horse\", \"pig\", \"snake\"];\n\nLazy(animals).where({ length: 3 }).each(Lazy.noop) // lazy\n_.each(_.where(animals, { length: 3 }), Lazy.noop) // lodash</textarea>\n\n                        <table id=\"Sequence-where-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                <th>Ops&#x2F;second</th>\n                            </tr>\n\n                            <tr id=\"perf-test-Sequence-where-1\">\n                                <td>lazy</td>\n                                <td data-case-id=\"1\"></td>\n                            </tr>\n                            <tr id=\"perf-test-Sequence-where-2\">\n                                <td>lodash</td>\n                                <td data-case-id=\"2\"></td>\n                            </tr>\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                    </div>\n\n                    <script type=\"text/javascript\">\ndescribe('where', function() {\n  var people = [\n  { first: \"Dan\", last: \"Tao\" },\n  { first: \"Bob\", last: \"Smith\" }\n];\n  (function() {\n    var spec = it('Lazy(people).where({ first: \\\"Dan\\\" }) => sequence: [{ first: \\\"Dan\\\", last: \\\"Tao\\\" }]', function() {\n      var actual = Lazy(people).where({ first: \"Dan\" });\nexpect(actual.toArray()).toEqual([{ first: \"Dan\", last: \"Tao\" }]);\n\n    });\n\n    spec.suiteId    = 'Sequence-where';\n    spec.exampleId  = 'Sequence-where-1';\n    spec.actual     = 'Lazy(people).where({ first: \\\"Dan\\\" })';\n    spec.expected   = 'sequence: [{ first: \\\"Dan\\\", last: \\\"Tao\\\" }]';\n    spec.lineNumber = 5;\n  }());\n});\n(function() {\n  var functionName = 'Sequence#where';\n\n\n  var animals = [\"dog\", \"cat\", \"mouse\", \"horse\", \"pig\", \"snake\"];\n\n  benchmarks['Sequence-where'] = [];\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-where-1-1',\n      fn: function() {\n        Lazy(animals).where({ length: 3 }).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-where-1';\n    benchmark.caseId = 1;\n\n    benchmarks['Sequence-where'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-where-2-2',\n      fn: function() {\n        _.each(_.where(animals, { length: 3 }), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-where-2';\n    benchmark.caseId = 2;\n\n    benchmarks['Sequence-where'].push(benchmark);\n  }());\n\n}());\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-without\">\n                    <h1>\n                        without\n                        <small>Sequence#without</small>\n                    </h1>\n\n                    <p>Creates a new sequence with all the elements of this sequence that are not\nalso among the specified arguments.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.without = function(var_args)</textarea>\n\n                        <table id=\"Sequence#without-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>var_args</td>\n                                    <td>...*</td>\n                                    <td><p>The values, or array(s) of values, to be excluded from the\n    resulting sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-without\">Lazy([1, 2, 3, 4, 5]).without(2, 3)   // sequence: [1, 4, 5]\nLazy([1, 2, 3, 4, 5]).without([4, 5]) // sequence: [1, 2, 3]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('without', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).without(2, 3) => sequence: [1, 4, 5]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).without(2, 3);\nexpect(actual.toArray()).toEqual([1, 4, 5]);\n\n    });\n\n    spec.suiteId    = 'Sequence-without';\n    spec.exampleId  = 'Sequence-without-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).without(2, 3)';\n    spec.expected   = 'sequence: [1, 4, 5]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).without([4, 5]) => sequence: [1, 2, 3]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).without([4, 5]);\nexpect(actual.toArray()).toEqual([1, 2, 3]);\n\n    });\n\n    spec.suiteId    = 'Sequence-without';\n    spec.exampleId  = 'Sequence-without-2';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).without([4, 5])';\n    spec.expected   = 'sequence: [1, 2, 3]';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Sequence-zip\">\n                    <h1>\n                        zip\n                        <small>Sequence#zip</small>\n                    </h1>\n\n                    <p>Creates a new sequence by combining the elements from this sequence with\ncorresponding elements from the specified array(s).</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Sequence.zip = function(var_args)</textarea>\n\n                        <table id=\"Sequence#zip-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>var_args</td>\n                                    <td>...Array</td>\n                                    <td><p>One or more arrays of elements to combine with\n    those of this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-Sequence-zip\">Lazy([1, 2]).zip([3, 4]) // sequence: [[1, 3], [2, 4]]</textarea>\n                    </div>\n\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        <textarea>var smArrL = Lazy.range(10).toArray(),\n    smArrR = Lazy.range(10, 20).toArray(),\n    lgArrL = Lazy.range(100).toArray(),\n    lgArrR = Lazy.range(100, 200).toArray();\n\nLazy(smArrL).zip(smArrR).each(Lazy.noop) // lazy - zipping 10-element arrays\nLazy(lgArrL).zip(lgArrR).each(Lazy.noop) // lazy - zipping 100-element arrays\n_.each(_.zip(smArrL, smArrR), Lazy.noop) // lodash - zipping 10-element arrays\n_.each(_.zip(lgArrL, lgArrR), Lazy.noop) // lodash - zipping 100-element arrays</textarea>\n\n                        <table id=\"Sequence-zip-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                <th>zipping 10-element arrays</th>\n                                <th>zipping 100-element arrays</th>\n                            </tr>\n\n                            <tr id=\"perf-test-Sequence-zip-1\">\n                                <td>lazy</td>\n                                <td data-case-id=\"1\"></td>\n                                <td data-case-id=\"2\"></td>\n                            </tr>\n                            <tr id=\"perf-test-Sequence-zip-2\">\n                                <td>lodash</td>\n                                <td data-case-id=\"3\"></td>\n                                <td data-case-id=\"4\"></td>\n                            </tr>\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                    </div>\n\n                    <script type=\"text/javascript\">\ndescribe('zip', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2]).zip([3, 4]) => sequence: [[1, 3], [2, 4]]', function() {\n      var actual = Lazy([1, 2]).zip([3, 4]);\nexpect(actual.toArray()).toEqual([[1, 3], [2, 4]]);\n\n    });\n\n    spec.suiteId    = 'Sequence-zip';\n    spec.exampleId  = 'Sequence-zip-1';\n    spec.actual     = 'Lazy([1, 2]).zip([3, 4])';\n    spec.expected   = 'sequence: [[1, 3], [2, 4]]';\n    spec.lineNumber = 0;\n  }());\n});\n(function() {\n  var functionName = 'Sequence#zip';\n\n\n  var smArrL = Lazy.range(10).toArray(),\n    smArrR = Lazy.range(10, 20).toArray(),\n    lgArrL = Lazy.range(100).toArray(),\n    lgArrR = Lazy.range(100, 200).toArray();\n\n  benchmarks['Sequence-zip'] = [];\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-zip-1-1',\n      fn: function() {\n        Lazy(smArrL).zip(smArrR).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-zip-1';\n    benchmark.caseId = 1;\n\n    benchmarks['Sequence-zip'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lazy', {\n      id: 'Sequence-zip-1-2',\n      fn: function() {\n        Lazy(lgArrL).zip(lgArrR).each(Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-zip-1';\n    benchmark.caseId = 2;\n\n    benchmarks['Sequence-zip'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-zip-2-3',\n      fn: function() {\n        _.each(_.zip(smArrL, smArrR), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-zip-2';\n    benchmark.caseId = 3;\n\n    benchmarks['Sequence-zip'].push(benchmark);\n  }());\n\n  (function() {\n    var benchmark = new Benchmark('lodash', {\n      id: 'Sequence-zip-2-4',\n      fn: function() {\n        _.each(_.zip(lgArrL, lgArrR), Lazy.noop);\n      }\n    });\n\n    benchmark.functionName = functionName;\n    benchmark.benchmarkId = 'Sequence-zip-2';\n    benchmark.caseId = 4;\n\n    benchmarks['Sequence-zip'].push(benchmark);\n  }());\n\n}());\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"Iterator\">\n                    <h1>\n                        Iterator\n                        <small>Iterator</small>\n                    </h1>\n\n                    <p>The Iterator object provides an API for iterating over a sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>function Iterator(sequence)</textarea>\n\n                        <table id=\"Iterator-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>sequence</td>\n                                    <td>Sequence</td>\n                                    <td><p>The sequence to iterate over.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Iterator-current\">\n                    <h1>\n                        current\n                        <small>Iterator#current</small>\n                    </h1>\n\n                    <p>Gets the current item this iterator is pointing to.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Iterator.current = function()</textarea>\n\n                        <table id=\"Iterator#current-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The current item.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"Iterator-moveNext\">\n                    <h1>\n                        moveNext\n                        <small>Iterator#moveNext</small>\n                    </h1>\n\n                    <p>Moves the iterator to the next item in a sequence, if possible.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>Iterator.moveNext = function()</textarea>\n\n                        <table id=\"Iterator#moveNext-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>True if the iterator is able to move to a new item, or else\n    false.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"ArrayLikeSequence\">\n                    <h1>\n                        ArrayLikeSequence\n                        <small>ArrayLikeSequence</small>\n                    </h1>\n\n                    <p>An <code>ArrayLikeSequence</code> is a <a href=\"#Sequence\">Sequence</a> that provides random access to\nits elements. This extends the API for iterating with the additional methods\n<a href=\"#-get\">#get</a> and <a href=\"#-length\">#length</a>, allowing a sequence to act as a &quot;view&quot; into\na collection or other indexed data source.</p>\n<p>All methods of <code>ArrayLikeSequence</code> that conceptually should return\nsomething like a array (with indexed access) return another\n<code>ArrayLikeSequence</code>.</p>\n<h2 id=\"defining-custom-array-like-sequences\">Defining custom array-like sequences</h2>\n<p>Creating a custom <code>ArrayLikeSequence</code> is essentially the same as creating a\ncustom <a href=\"#Sequence\">Sequence</a>. You just have a couple more methods you need to\nimplement: <code>get</code> and (optionally) <code>length</code>.</p>\n<p>Here&#39;s an example. Let&#39;s define a sequence type called <code>OffsetSequence</code> that\noffsets each of its parent&#39;s elements by a set distance, and circles back to\nthe beginning after reaching the end. <strong>Remember</strong>: the initialization\nfunction you pass to <a href=\"#-define\">#define</a> should always accept a <code>parent</code> as its\nfirst parameter.</p>\n<pre><code>ArrayLikeSequence.define(&quot;offset&quot;, {\n  init: function(parent, offset) {\n    this.offset = offset;\n  },\n\n  get: function(i) {\n    return this.parent.get((i + this.offset) % this.parent.length());\n  }\n});</code></pre>\n<p>It&#39;s worth noting a couple of things here.</p>\n<p>First, Lazy&#39;s default implementation of <code>length</code> simply returns the parent&#39;s\nlength. In this case, since an <code>OffsetSequence</code> will always have the same\nnumber of elements as its parent, that implementation is fine; so we don&#39;t\nneed to override it.</p>\n<p>Second, the default implementation of <code>each</code> uses <code>get</code> and <code>length</code> to\nessentially create a <code>for</code> loop, which is fine here. If you want to implement\n<code>each</code> your own way, you can do that; but in most cases (as here), you can\nprobably just stick with the default.</p>\n<p>So we&#39;re already done, after only implementing <code>get</code>! Pretty easy, huh?</p>\n<p>Now the <code>offset</code> method will be chainable from any <code>ArrayLikeSequence</code>. So\nfor example:</p>\n<pre><code>Lazy([1, 2, 3]).map(mapFn).offset(3);</code></pre>\n<p>...will work, but:</p>\n<pre><code>Lazy([1, 2, 3]).filter(mapFn).offset(3);</code></pre>\n<p>...will not (because <code>filter</code> does not return an <code>ArrayLikeSequence</code>).</p>\n<p>(Also, as with the example provided for defining custom <a href=\"#Sequence\">Sequence</a>\ntypes, this example really could have been implemented using a function\nalready available as part of Lazy.js: in this case, <a href=\"#Sequence-map\">Sequence#map</a>.)</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence\">Lazy([1, 2, 3])                    // instanceof Lazy.ArrayLikeSequence\nLazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence\nLazy([1, 2, 3]).take(2)            // instanceof Lazy.ArrayLikeSequence\nLazy([1, 2, 3]).drop(2)            // instanceof Lazy.ArrayLikeSequence\nLazy([1, 2, 3]).reverse()          // instanceof Lazy.ArrayLikeSequence\nLazy([1, 2, 3]).slice(1, 2)        // instanceof Lazy.ArrayLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('ArrayLikeSequence', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence';\n    spec.exampleId  = 'ArrayLikeSequence-1';\n    spec.actual     = 'Lazy([1, 2, 3])';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).map(Lazy.identity) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).map(Lazy.identity);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).map(Lazy.identity) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence';\n    spec.exampleId  = 'ArrayLikeSequence-2';\n    spec.actual     = 'Lazy([1, 2, 3]).map(Lazy.identity)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).take(2) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).take(2);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).take(2) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence';\n    spec.exampleId  = 'ArrayLikeSequence-3';\n    spec.actual     = 'Lazy([1, 2, 3]).take(2)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).drop(2) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).drop(2);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).drop(2) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence';\n    spec.exampleId  = 'ArrayLikeSequence-4';\n    spec.actual     = 'Lazy([1, 2, 3]).drop(2)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).reverse() => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).reverse();\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).reverse() to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence';\n    spec.exampleId  = 'ArrayLikeSequence-5';\n    spec.actual     = 'Lazy([1, 2, 3]).reverse()';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).slice(1, 2) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).slice(1, 2);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).slice(1, 2) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence';\n    spec.exampleId  = 'ArrayLikeSequence-6';\n    spec.actual     = 'Lazy([1, 2, 3]).slice(1, 2)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-define\">\n                    <h1>\n                        define\n                        <small>ArrayLikeSequence.define</small>\n                    </h1>\n\n                    <p>Create a new constructor function for a type inheriting from\n<code>ArrayLikeSequence</code>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.define = function(methodName, overrides)</textarea>\n\n                        <table id=\"ArrayLikeSequence.define-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>methodName</td>\n                                    <td>string|Array.&lt;string&gt;</td>\n                                    <td><p>The name(s) of the method(s) to be\n    used for constructing the new sequence. The method will be attached to\n    the <code>ArrayLikeSequence</code> prototype so that it can be chained with any other\n    methods that return array-like sequences.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>overrides</td>\n                                    <td>Object</td>\n                                    <td><p>An object containing function overrides for this\n    new sequence type. <strong>Must</strong> include <code>get</code>. <em>May</em> include <code>init</code>,\n    <code>length</code>, <code>getIterator</code>, and <code>each</code>. For each function, <code>this</code> will be\n    the new sequence and <code>this.parent</code> will be the source sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Function</td>\n                                    <td><p>A constructor for a new type inheriting from\n    <code>ArrayLikeSequence</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-define\">Lazy.ArrayLikeSequence.define(\"offset\", {\n  init: function(offset) {\n    this.offset = offset;\n  },\n\n  get: function(i) {\n    return this.parent.get((i + this.offset) % this.parent.length());\n  }\n});\n\nLazy([1, 2, 3]).offset(1) // sequence: [2, 3, 1]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('define', function() {\n  Lazy.ArrayLikeSequence.define(\"offset\", {\n  init: function(offset) {\n    this.offset = offset;\n  },\n\n  get: function(i) {\n    return this.parent.get((i + this.offset) % this.parent.length());\n  }\n});\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).offset(1) => sequence: [2, 3, 1]', function() {\n      var actual = Lazy([1, 2, 3]).offset(1);\nexpect(actual.toArray()).toEqual([2, 3, 1]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-define';\n    spec.exampleId  = 'ArrayLikeSequence-define-1';\n    spec.actual     = 'Lazy([1, 2, 3]).offset(1)';\n    spec.expected   = 'sequence: [2, 3, 1]';\n    spec.lineNumber = 10;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-concat\">\n                    <h1>\n                        concat\n                        <small>ArrayLikeSequence#concat</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-concat\">Sequence#concat</a> that returns another\n<a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> <em>if</em> the argument is an array.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.concat = function(var_args)</textarea>\n\n                        <table id=\"ArrayLikeSequence#concat-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>var_args</td>\n                                    <td>...*</td>\n                                    <td></td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-concat\">Lazy([1, 2]).concat([3, 4]) // instanceof Lazy.ArrayLikeSequence\nLazy([1, 2]).concat([3, 4]) // sequence: [1, 2, 3, 4]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('concat', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2]).concat([3, 4]) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2]).concat([3, 4]);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2]).concat([3, 4]) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-concat';\n    spec.exampleId  = 'ArrayLikeSequence-concat-1';\n    spec.actual     = 'Lazy([1, 2]).concat([3, 4])';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2]).concat([3, 4]) => sequence: [1, 2, 3, 4]', function() {\n      var actual = Lazy([1, 2]).concat([3, 4]);\nexpect(actual.toArray()).toEqual([1, 2, 3, 4]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-concat';\n    spec.exampleId  = 'ArrayLikeSequence-concat-2';\n    spec.actual     = 'Lazy([1, 2]).concat([3, 4])';\n    spec.expected   = 'sequence: [1, 2, 3, 4]';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-first\">\n                    <h1>\n                        first\n                        <small>ArrayLikeSequence#first</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-first\">Sequence#first</a>, which creates an\n<a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> so that the result still provides random access.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-first\">Lazy([1, 2, 3]).first(2) // instanceof Lazy.ArrayLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('first', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).first(2) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).first(2);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).first(2) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-first';\n    spec.exampleId  = 'ArrayLikeSequence-first-1';\n    spec.actual     = 'Lazy([1, 2, 3]).first(2)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-get\">\n                    <h1>\n                        get\n                        <small>ArrayLikeSequence#get</small>\n                    </h1>\n\n                    <p>Returns the element at the specified index.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.get = function(i)</textarea>\n\n                        <table id=\"ArrayLikeSequence#get-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>i</td>\n                                    <td>number</td>\n                                    <td><p>The index to access.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The element.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-get\">function increment(x) { return x + 1; }\n\nLazy([1, 2, 3]).get(1)                // => 2\nLazy([1, 2, 3]).get(-1)               // => undefined\nLazy([1, 2, 3]).map(increment).get(1) // => 3</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('get', function() {\n  function increment(x) { return x + 1; }\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).get(1) => 2', function() {\n      var result   = Lazy([1, 2, 3]).get(1);\n      var expected = 2;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-get';\n    spec.exampleId  = 'ArrayLikeSequence-get-1';\n    spec.actual     = 'Lazy([1, 2, 3]).get(1)';\n    spec.expected   = '2';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).get(-1) => undefined', function() {\n      var result   = Lazy([1, 2, 3]).get(-1);\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-get';\n    spec.exampleId  = 'ArrayLikeSequence-get-2';\n    spec.actual     = 'Lazy([1, 2, 3]).get(-1)';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).map(increment).get(1) => 3', function() {\n      var result   = Lazy([1, 2, 3]).map(increment).get(1);\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-get';\n    spec.exampleId  = 'ArrayLikeSequence-get-3';\n    spec.actual     = 'Lazy([1, 2, 3]).map(increment).get(1)';\n    spec.expected   = '3';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-length\">\n                    <h1>\n                        length\n                        <small>ArrayLikeSequence#length</small>\n                    </h1>\n\n                    <p>Returns the length of the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.length = function()</textarea>\n\n                        <table id=\"ArrayLikeSequence#length-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The length.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-length\">function increment(x) { return x + 1; }\n\nLazy([]).length()                       // => 0\nLazy([1, 2, 3]).length()                // => 3\nLazy([1, 2, 3]).map(increment).length() // => 3</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('length', function() {\n  function increment(x) { return x + 1; }\n  (function() {\n    var spec = it('Lazy([]).length() => 0', function() {\n      var result   = Lazy([]).length();\n      var expected = 0;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-length';\n    spec.exampleId  = 'ArrayLikeSequence-length-1';\n    spec.actual     = 'Lazy([]).length()';\n    spec.expected   = '0';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).length() => 3', function() {\n      var result   = Lazy([1, 2, 3]).length();\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-length';\n    spec.exampleId  = 'ArrayLikeSequence-length-2';\n    spec.actual     = 'Lazy([1, 2, 3]).length()';\n    spec.expected   = '3';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3]).map(increment).length() => 3', function() {\n      var result   = Lazy([1, 2, 3]).map(increment).length();\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-length';\n    spec.exampleId  = 'ArrayLikeSequence-length-3';\n    spec.actual     = 'Lazy([1, 2, 3]).map(increment).length()';\n    spec.expected   = '3';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-map\">\n                    <h1>\n                        map\n                        <small>ArrayLikeSequence#map</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-map\">Sequence#map</a>, which creates an\n<a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> so that the result still provides random access.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-map\">Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('map', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).map(Lazy.identity) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).map(Lazy.identity);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).map(Lazy.identity) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-map';\n    spec.exampleId  = 'ArrayLikeSequence-map-1';\n    spec.actual     = 'Lazy([1, 2, 3]).map(Lazy.identity)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-pop\">\n                    <h1>\n                        pop\n                        <small>ArrayLikeSequence#pop</small>\n                    </h1>\n\n                    <p>Returns a new sequence with the same elements as this one, minus the last\nelement.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.pop = function()</textarea>\n\n                        <table id=\"ArrayLikeSequence#pop-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ArrayLikeSequence</td>\n                                    <td><p>The new array-like sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-pop\">Lazy([1, 2, 3]).pop() // sequence: [1, 2]\nLazy([]).pop()        // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('pop', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).pop() => sequence: [1, 2]', function() {\n      var actual = Lazy([1, 2, 3]).pop();\nexpect(actual.toArray()).toEqual([1, 2]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-pop';\n    spec.exampleId  = 'ArrayLikeSequence-pop-1';\n    spec.actual     = 'Lazy([1, 2, 3]).pop()';\n    spec.expected   = 'sequence: [1, 2]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([]).pop() => sequence: []', function() {\n      var actual = Lazy([]).pop();\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-pop';\n    spec.exampleId  = 'ArrayLikeSequence-pop-2';\n    spec.actual     = 'Lazy([]).pop()';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-rest\">\n                    <h1>\n                        rest\n                        <small>ArrayLikeSequence#rest</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-rest\">Sequence#rest</a>, which creates an\n<a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> so that the result still provides random access.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-rest\">Lazy([1, 2, 3]).rest() // instanceof Lazy.ArrayLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('rest', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).rest() => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).rest();\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).rest() to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-rest';\n    spec.exampleId  = 'ArrayLikeSequence-rest-1';\n    spec.actual     = 'Lazy([1, 2, 3]).rest()';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-reverse\">\n                    <h1>\n                        reverse\n                        <small>ArrayLikeSequence#reverse</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-reverse\">Sequence#reverse</a>, which creates an\n<a href=\"#ArrayLikeSequence\">ArrayLikeSequence</a> so that the result still provides random access.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-reverse\">Lazy([1, 2, 3]).reverse() // instanceof Lazy.ArrayLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('reverse', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).reverse() => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy([1, 2, 3]).reverse();\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy([1, 2, 3]).reverse() to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-reverse';\n    spec.exampleId  = 'ArrayLikeSequence-reverse-1';\n    spec.actual     = 'Lazy([1, 2, 3]).reverse()';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-shift\">\n                    <h1>\n                        shift\n                        <small>ArrayLikeSequence#shift</small>\n                    </h1>\n\n                    <p>Returns a new sequence with the same elements as this one, minus the first\nelement.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.shift = function()</textarea>\n\n                        <table id=\"ArrayLikeSequence#shift-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ArrayLikeSequence</td>\n                                    <td><p>The new array-like sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-shift\">Lazy([1, 2, 3]).shift() // sequence: [2, 3]\nLazy([]).shift()        // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('shift', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3]).shift() => sequence: [2, 3]', function() {\n      var actual = Lazy([1, 2, 3]).shift();\nexpect(actual.toArray()).toEqual([2, 3]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-shift';\n    spec.exampleId  = 'ArrayLikeSequence-shift-1';\n    spec.actual     = 'Lazy([1, 2, 3]).shift()';\n    spec.expected   = 'sequence: [2, 3]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([]).shift() => sequence: []', function() {\n      var actual = Lazy([]).shift();\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-shift';\n    spec.exampleId  = 'ArrayLikeSequence-shift-2';\n    spec.actual     = 'Lazy([]).shift()';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ArrayLikeSequence-slice\">\n                    <h1>\n                        slice\n                        <small>ArrayLikeSequence#slice</small>\n                    </h1>\n\n                    <p>Returns a new sequence comprising the portion of this sequence starting\nfrom the specified starting index and continuing until the specified ending\nindex or to the end of the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ArrayLikeSequence.slice = function(begin, end)</textarea>\n\n                        <table id=\"ArrayLikeSequence#slice-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>begin</td>\n                                    <td>number</td>\n                                    <td><p>The index at which the new sequence should start.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>end</td>\n                                    <td>number?</td>\n                                    <td><p>The index at which the new sequence should end.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ArrayLikeSequence</td>\n                                    <td><p>The new array-like sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ArrayLikeSequence-slice\">Lazy([1, 2, 3, 4, 5]).slice(0)     // sequence: [1, 2, 3, 4, 5]\nLazy([1, 2, 3, 4, 5]).slice(2)     // sequence: [3, 4, 5]\nLazy([1, 2, 3, 4, 5]).slice(2, 4)  // sequence: [3, 4]\nLazy([1, 2, 3, 4, 5]).slice(-1)    // sequence: [5]\nLazy([1, 2, 3, 4, 5]).slice(1, -1) // sequence: [2, 3, 4]\nLazy([1, 2, 3, 4, 5]).slice(0, 10) // sequence: [1, 2, 3, 4, 5]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('slice', function() {\n  \n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).slice(0) => sequence: [1, 2, 3, 4, 5]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).slice(0);\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-slice';\n    spec.exampleId  = 'ArrayLikeSequence-slice-1';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).slice(0)';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).slice(2) => sequence: [3, 4, 5]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).slice(2);\nexpect(actual.toArray()).toEqual([3, 4, 5]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-slice';\n    spec.exampleId  = 'ArrayLikeSequence-slice-2';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).slice(2)';\n    spec.expected   = 'sequence: [3, 4, 5]';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).slice(2, 4) => sequence: [3, 4]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).slice(2, 4);\nexpect(actual.toArray()).toEqual([3, 4]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-slice';\n    spec.exampleId  = 'ArrayLikeSequence-slice-3';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).slice(2, 4)';\n    spec.expected   = 'sequence: [3, 4]';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).slice(-1) => sequence: [5]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).slice(-1);\nexpect(actual.toArray()).toEqual([5]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-slice';\n    spec.exampleId  = 'ArrayLikeSequence-slice-4';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).slice(-1)';\n    spec.expected   = 'sequence: [5]';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).slice(1, -1) => sequence: [2, 3, 4]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).slice(1, -1);\nexpect(actual.toArray()).toEqual([2, 3, 4]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-slice';\n    spec.exampleId  = 'ArrayLikeSequence-slice-5';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).slice(1, -1)';\n    spec.expected   = 'sequence: [2, 3, 4]';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy([1, 2, 3, 4, 5]).slice(0, 10) => sequence: [1, 2, 3, 4, 5]', function() {\n      var actual = Lazy([1, 2, 3, 4, 5]).slice(0, 10);\nexpect(actual.toArray()).toEqual([1, 2, 3, 4, 5]);\n\n    });\n\n    spec.suiteId    = 'ArrayLikeSequence-slice';\n    spec.exampleId  = 'ArrayLikeSequence-slice-6';\n    spec.actual     = 'Lazy([1, 2, 3, 4, 5]).slice(0, 10)';\n    spec.expected   = 'sequence: [1, 2, 3, 4, 5]';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"ObjectLikeSequence\">\n                    <h1>\n                        ObjectLikeSequence\n                        <small>ObjectLikeSequence</small>\n                    </h1>\n\n                    <p>An <code>ObjectLikeSequence</code> object represents a sequence of key/value pairs.</p>\n<p>All methods of <code>ObjectLikeSequence</code> that conceptually should return\nsomething like an object return another <code>ObjectLikeSequence</code>.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence\">var obj = { foo: 'bar' };\n\nLazy(obj).assign({ bar: 'baz' })   // instanceof Lazy.ObjectLikeSequence\nLazy(obj).defaults({ bar: 'baz' }) // instanceof Lazy.ObjectLikeSequence\nLazy(obj).invert()                 // instanceof Lazy.ObjectLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('ObjectLikeSequence', function() {\n  var obj = { foo: 'bar' };\n  (function() {\n    var spec = it('Lazy(obj).assign({ bar: \\'baz\\' }) => instanceof Lazy.ObjectLikeSequence', function() {\n      var actual = Lazy(obj).assign({ bar: 'baz' });\nif (!(actual instanceof Lazy.ObjectLikeSequence)) {\n  throw 'Expected Lazy(obj).assign({ bar: \\'baz\\' }) to be an instance of Lazy.ObjectLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence';\n    spec.exampleId  = 'ObjectLikeSequence-1';\n    spec.actual     = 'Lazy(obj).assign({ bar: \\'baz\\' })';\n    spec.expected   = 'instanceof Lazy.ObjectLikeSequence';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(obj).defaults({ bar: \\'baz\\' }) => instanceof Lazy.ObjectLikeSequence', function() {\n      var actual = Lazy(obj).defaults({ bar: 'baz' });\nif (!(actual instanceof Lazy.ObjectLikeSequence)) {\n  throw 'Expected Lazy(obj).defaults({ bar: \\'baz\\' }) to be an instance of Lazy.ObjectLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence';\n    spec.exampleId  = 'ObjectLikeSequence-2';\n    spec.actual     = 'Lazy(obj).defaults({ bar: \\'baz\\' })';\n    spec.expected   = 'instanceof Lazy.ObjectLikeSequence';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(obj).invert() => instanceof Lazy.ObjectLikeSequence', function() {\n      var actual = Lazy(obj).invert();\nif (!(actual instanceof Lazy.ObjectLikeSequence)) {\n  throw 'Expected Lazy(obj).invert() to be an instance of Lazy.ObjectLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence';\n    spec.exampleId  = 'ObjectLikeSequence-3';\n    spec.actual     = 'Lazy(obj).invert()';\n    spec.expected   = 'instanceof Lazy.ObjectLikeSequence';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-define\">\n                    <h1>\n                        define\n                        <small>ObjectLikeSequence.define</small>\n                    </h1>\n\n                    <p>Create a new constructor function for a type inheriting from\n<code>ObjectLikeSequence</code>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.define = function(methodName, overrides)</textarea>\n\n                        <table id=\"ObjectLikeSequence.define-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>methodName</td>\n                                    <td>string|Array.&lt;string&gt;</td>\n                                    <td><p>The name(s) of the method(s) to be\n    used for constructing the new sequence. The method will be attached to\n    the <code>ObjectLikeSequence</code> prototype so that it can be chained with any other\n    methods that return object-like sequences.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>overrides</td>\n                                    <td>Object</td>\n                                    <td><p>An object containing function overrides for this\n    new sequence type. <strong>Must</strong> include <code>each</code>. <em>May</em> include <code>init</code> and\n    <code>get</code> (for looking up an element by key).</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Function</td>\n                                    <td><p>A constructor for a new type inheriting from\n    <code>ObjectLikeSequence</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-define\">function downcaseKey(value, key) {\n  return [key.toLowerCase(), value];\n}\n\nLazy.ObjectLikeSequence.define(\"caseInsensitive\", {\n  init: function() {\n    var downcased = this.parent\n      .map(downcaseKey)\n      .toObject();\n    this.downcased = Lazy(downcased);\n  },\n\n  get: function(key) {\n    return this.downcased.get(key.toLowerCase());\n  },\n\n  each: function(fn) {\n    return this.downcased.each(fn);\n  }\n});\n\nLazy({ Foo: 'bar' }).caseInsensitive()            // sequence: { foo: 'bar' }\nLazy({ FOO: 'bar' }).caseInsensitive().get('foo') // => 'bar'\nLazy({ FOO: 'bar' }).caseInsensitive().get('FOO') // => 'bar'</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('define', function() {\n  function downcaseKey(value, key) {\n  return [key.toLowerCase(), value];\n}\n\nLazy.ObjectLikeSequence.define(\"caseInsensitive\", {\n  init: function() {\n    var downcased = this.parent\n      .map(downcaseKey)\n      .toObject();\n    this.downcased = Lazy(downcased);\n  },\n\n  get: function(key) {\n    return this.downcased.get(key.toLowerCase());\n  },\n\n  each: function(fn) {\n    return this.downcased.each(fn);\n  }\n});\n  (function() {\n    var spec = it('Lazy({ Foo: \\'bar\\' }).caseInsensitive() => sequence: { foo: \\'bar\\' }', function() {\n      var actual = Lazy({ Foo: 'bar' }).caseInsensitive();\nexpect(actual.toObject()).toEqual({  foo: 'bar'  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-define';\n    spec.exampleId  = 'ObjectLikeSequence-define-1';\n    spec.actual     = 'Lazy({ Foo: \\'bar\\' }).caseInsensitive()';\n    spec.expected   = 'sequence: { foo: \\'bar\\' }';\n    spec.lineNumber = 21;\n  }());\n  (function() {\n    var spec = it('Lazy({ FOO: \\'bar\\' }).caseInsensitive().get(\\'foo\\') => \\'bar\\'', function() {\n      var result   = Lazy({ FOO: 'bar' }).caseInsensitive().get('foo');\n      var expected = 'bar';\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-define';\n    spec.exampleId  = 'ObjectLikeSequence-define-2';\n    spec.actual     = 'Lazy({ FOO: \\'bar\\' }).caseInsensitive().get(\\'foo\\')';\n    spec.expected   = '\\'bar\\'';\n    spec.lineNumber = 22;\n  }());\n  (function() {\n    var spec = it('Lazy({ FOO: \\'bar\\' }).caseInsensitive().get(\\'FOO\\') => \\'bar\\'', function() {\n      var result   = Lazy({ FOO: 'bar' }).caseInsensitive().get('FOO');\n      var expected = 'bar';\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-define';\n    spec.exampleId  = 'ObjectLikeSequence-define-3';\n    spec.actual     = 'Lazy({ FOO: \\'bar\\' }).caseInsensitive().get(\\'FOO\\')';\n    spec.expected   = '\\'bar\\'';\n    spec.lineNumber = 23;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-assign\">\n                    <h1>\n                        assign\n                        <small>ObjectLikeSequence#assign</small>\n                    </h1>\n\n                    <p>Returns an <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> whose elements are the combination of\nthis sequence and another object. In the case of a key appearing in both this\nsequence and the given object, the other object&#39;s value will override the\none in this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.assign = function(other)</textarea>\n\n                        <table id=\"ObjectLikeSequence#assign-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>other</td>\n                                    <td>Object</td>\n                                    <td><p>The other object to assign to this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ObjectLikeSequence</td>\n                                    <td><p>A new sequence comprising elements from this\n    sequence plus the contents of <code>other</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-assign\">Lazy({ \"uno\": 1, \"dos\": 2 }).assign({ \"tres\": 3 }) // sequence: { uno: 1, dos: 2, tres: 3 }\nLazy({ foo: \"bar\" }).assign({ foo: \"baz\" });       // sequence: { foo: \"baz\" }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('assign', function() {\n  \n  (function() {\n    var spec = it('Lazy({ \\\"uno\\\": 1, \\\"dos\\\": 2 }).assign({ \\\"tres\\\": 3 }) => sequence: { uno: 1, dos: 2, tres: 3 }', function() {\n      var actual = Lazy({ \"uno\": 1, \"dos\": 2 }).assign({ \"tres\": 3 });\nexpect(actual.toObject()).toEqual({  uno: 1, dos: 2, tres: 3  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-assign';\n    spec.exampleId  = 'ObjectLikeSequence-assign-1';\n    spec.actual     = 'Lazy({ \\\"uno\\\": 1, \\\"dos\\\": 2 }).assign({ \\\"tres\\\": 3 })';\n    spec.expected   = 'sequence: { uno: 1, dos: 2, tres: 3 }';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: \\\"bar\\\" }).assign({ foo: \\\"baz\\\" }); => sequence: { foo: \\\"baz\\\" }', function() {\n      var actual = Lazy({ foo: \"bar\" }).assign({ foo: \"baz\" });;\nexpect(actual.toObject()).toEqual({  foo: \"baz\"  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-assign';\n    spec.exampleId  = 'ObjectLikeSequence-assign-2';\n    spec.actual     = 'Lazy({ foo: \\\"bar\\\" }).assign({ foo: \\\"baz\\\" });';\n    spec.expected   = 'sequence: { foo: \\\"baz\\\" }';\n    spec.lineNumber = 1;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-async\">\n                    <h1>\n                        async\n                        <small>ObjectLikeSequence#async</small>\n                    </h1>\n\n                    <p>Throws an exception. Asynchronous iteration over object-like sequences is\nnot supported.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-async\">Lazy({ foo: 'bar' }).async() // throws</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('async', function() {\n  \n  (function() {\n    var spec = it('Lazy({ foo: \\'bar\\' }).async() => throws', function() {\n      expect(function() { Lazy({ foo: 'bar' }).async() }).toThrow();\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-async';\n    spec.exampleId  = 'ObjectLikeSequence-async-1';\n    spec.actual     = 'Lazy({ foo: \\'bar\\' }).async()';\n    spec.expected   = 'throws';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-defaults\">\n                    <h1>\n                        defaults\n                        <small>ObjectLikeSequence#defaults</small>\n                    </h1>\n\n                    <p>Returns an <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> whose elements are the combination of\nthis sequence and a &#39;default&#39; object. In the case of a key appearing in both\nthis sequence and the given object, this sequence&#39;s value will override the\ndefault object&#39;s.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.defaults = function(defaults)</textarea>\n\n                        <table id=\"ObjectLikeSequence#defaults-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>defaults</td>\n                                    <td>Object</td>\n                                    <td><p>The &#39;default&#39; object to use for missing keys in this\n    sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ObjectLikeSequence</td>\n                                    <td><p>A new sequence comprising elements from this\n    sequence supplemented by the contents of <code>defaults</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-defaults\">Lazy({ name: \"Dan\" }).defaults({ name: \"User\", password: \"passw0rd\" }) // sequence: { name: \"Dan\", password: \"passw0rd\" }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('defaults', function() {\n  \n  (function() {\n    var spec = it('Lazy({ name: \\\"Dan\\\" }).defaults({ name: \\\"User\\\", password: \\\"passw0rd\\\" }) => sequence: { name: \\\"Dan\\\", password: \\\"passw0rd\\\" }', function() {\n      var actual = Lazy({ name: \"Dan\" }).defaults({ name: \"User\", password: \"passw0rd\" });\nexpect(actual.toObject()).toEqual({  name: \"Dan\", password: \"passw0rd\"  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-defaults';\n    spec.exampleId  = 'ObjectLikeSequence-defaults-1';\n    spec.actual     = 'Lazy({ name: \\\"Dan\\\" }).defaults({ name: \\\"User\\\", password: \\\"passw0rd\\\" })';\n    spec.expected   = 'sequence: { name: \\\"Dan\\\", password: \\\"passw0rd\\\" }';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-functions\">\n                    <h1>\n                        functions\n                        <small>ObjectLikeSequence#functions</small>\n                    </h1>\n\n                    <p>Creates a <a href=\"#Sequence\">Sequence</a> consisting of the keys from this sequence whose\n    values are functions.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.functions = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#functions-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-functions\">var dog = {\n  name: \"Fido\",\n  breed: \"Golden Retriever\",\n  bark: function() { console.log(\"Woof!\"); },\n  wagTail: function() { console.log(\"TODO: implement robotic dog interface\"); }\n};\n\nLazy(dog).functions() // sequence: [\"bark\", \"wagTail\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('functions', function() {\n  var dog = {\n  name: \"Fido\",\n  breed: \"Golden Retriever\",\n  bark: function() { console.log(\"Woof!\"); },\n  wagTail: function() { console.log(\"TODO: implement robotic dog interface\"); }\n};\n  (function() {\n    var spec = it('Lazy(dog).functions() => sequence: [\\\"bark\\\", \\\"wagTail\\\"]', function() {\n      var actual = Lazy(dog).functions();\nexpect(actual.toArray()).toEqual([\"bark\", \"wagTail\"]);\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-functions';\n    spec.exampleId  = 'ObjectLikeSequence-functions-1';\n    spec.actual     = 'Lazy(dog).functions()';\n    spec.expected   = 'sequence: [\\\"bark\\\", \\\"wagTail\\\"]';\n    spec.lineNumber = 7;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-get\">\n                    <h1>\n                        get\n                        <small>ObjectLikeSequence#get</small>\n                    </h1>\n\n                    <p>Gets the element at the specified key in this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.get = function(key)</textarea>\n\n                        <table id=\"ObjectLikeSequence#get-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>key</td>\n                                    <td>string</td>\n                                    <td><p>The key.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>*</td>\n                                    <td><p>The element.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-get\">Lazy({ foo: \"bar\" }).get(\"foo\")                          // => \"bar\"\nLazy({ foo: \"bar\" }).extend({ foo: \"baz\" }).get(\"foo\")   // => \"baz\"\nLazy({ foo: \"bar\" }).defaults({ bar: \"baz\" }).get(\"bar\") // => \"baz\"\nLazy({ foo: \"bar\" }).invert().get(\"bar\")                 // => \"foo\"\nLazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"foo\")        // => 1\nLazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"bar\")        // => undefined\nLazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"bar\")        // => 2\nLazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"foo\")        // => undefined</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('get', function() {\n  \n  (function() {\n    var spec = it('Lazy({ foo: \\\"bar\\\" }).get(\\\"foo\\\") => \\\"bar\\\"', function() {\n      var result   = Lazy({ foo: \"bar\" }).get(\"foo\");\n      var expected = \"bar\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-1';\n    spec.actual     = 'Lazy({ foo: \\\"bar\\\" }).get(\\\"foo\\\")';\n    spec.expected   = '\\\"bar\\\"';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: \\\"bar\\\" }).extend({ foo: \\\"baz\\\" }).get(\\\"foo\\\") => \\\"baz\\\"', function() {\n      var result   = Lazy({ foo: \"bar\" }).extend({ foo: \"baz\" }).get(\"foo\");\n      var expected = \"baz\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-2';\n    spec.actual     = 'Lazy({ foo: \\\"bar\\\" }).extend({ foo: \\\"baz\\\" }).get(\\\"foo\\\")';\n    spec.expected   = '\\\"baz\\\"';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: \\\"bar\\\" }).defaults({ bar: \\\"baz\\\" }).get(\\\"bar\\\") => \\\"baz\\\"', function() {\n      var result   = Lazy({ foo: \"bar\" }).defaults({ bar: \"baz\" }).get(\"bar\");\n      var expected = \"baz\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-3';\n    spec.actual     = 'Lazy({ foo: \\\"bar\\\" }).defaults({ bar: \\\"baz\\\" }).get(\\\"bar\\\")';\n    spec.expected   = '\\\"baz\\\"';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: \\\"bar\\\" }).invert().get(\\\"bar\\\") => \\\"foo\\\"', function() {\n      var result   = Lazy({ foo: \"bar\" }).invert().get(\"bar\");\n      var expected = \"foo\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-4';\n    spec.actual     = 'Lazy({ foo: \\\"bar\\\" }).invert().get(\\\"bar\\\")';\n    spec.expected   = '\\\"foo\\\"';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: 1, bar: 2 }).pick([\\\"foo\\\"]).get(\\\"foo\\\") => 1', function() {\n      var result   = Lazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"foo\");\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-5';\n    spec.actual     = 'Lazy({ foo: 1, bar: 2 }).pick([\\\"foo\\\"]).get(\\\"foo\\\")';\n    spec.expected   = '1';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: 1, bar: 2 }).pick([\\\"foo\\\"]).get(\\\"bar\\\") => undefined', function() {\n      var result   = Lazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"bar\");\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-6';\n    spec.actual     = 'Lazy({ foo: 1, bar: 2 }).pick([\\\"foo\\\"]).get(\\\"bar\\\")';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: 1, bar: 2 }).omit([\\\"foo\\\"]).get(\\\"bar\\\") => 2', function() {\n      var result   = Lazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"bar\");\n      var expected = 2;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-7';\n    spec.actual     = 'Lazy({ foo: 1, bar: 2 }).omit([\\\"foo\\\"]).get(\\\"bar\\\")';\n    spec.expected   = '2';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy({ foo: 1, bar: 2 }).omit([\\\"foo\\\"]).get(\\\"foo\\\") => undefined', function() {\n      var result   = Lazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"foo\");\n      var expected = undefined;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-get';\n    spec.exampleId  = 'ObjectLikeSequence-get-8';\n    spec.actual     = 'Lazy({ foo: 1, bar: 2 }).omit([\\\"foo\\\"]).get(\\\"foo\\\")';\n    spec.expected   = 'undefined';\n    spec.lineNumber = 7;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-invert\">\n                    <h1>\n                        invert\n                        <small>ObjectLikeSequence#invert</small>\n                    </h1>\n\n                    <p>Returns an <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> whose values are this sequence&#39;s keys,\nand whose keys are this sequence&#39;s values.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.invert = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#invert-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ObjectLikeSequence</td>\n                                    <td><p>A new sequence comprising the inverted keys and\n    values from this sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-invert\">Lazy({ first: \"Dan\", last: \"Tao\" }).invert() // sequence: { Dan: \"first\", Tao: \"last\" }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('invert', function() {\n  \n  (function() {\n    var spec = it('Lazy({ first: \\\"Dan\\\", last: \\\"Tao\\\" }).invert() => sequence: { Dan: \\\"first\\\", Tao: \\\"last\\\" }', function() {\n      var actual = Lazy({ first: \"Dan\", last: \"Tao\" }).invert();\nexpect(actual.toObject()).toEqual({  Dan: \"first\", Tao: \"last\"  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-invert';\n    spec.exampleId  = 'ObjectLikeSequence-invert-1';\n    spec.actual     = 'Lazy({ first: \\\"Dan\\\", last: \\\"Tao\\\" }).invert()';\n    spec.expected   = 'sequence: { Dan: \\\"first\\\", Tao: \\\"last\\\" }';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-keys\">\n                    <h1>\n                        keys\n                        <small>ObjectLikeSequence#keys</small>\n                    </h1>\n\n                    <p>Returns a <a href=\"#Sequence\">Sequence</a> whose elements are the keys of this object-like\nsequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.keys = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#keys-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The sequence based on this sequence&#39;s keys.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-keys\">Lazy({ hello: \"hola\", goodbye: \"hasta luego\" }).keys() // sequence: [\"hello\", \"goodbye\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('keys', function() {\n  \n  (function() {\n    var spec = it('Lazy({ hello: \\\"hola\\\", goodbye: \\\"hasta luego\\\" }).keys() => sequence: [\\\"hello\\\", \\\"goodbye\\\"]', function() {\n      var actual = Lazy({ hello: \"hola\", goodbye: \"hasta luego\" }).keys();\nexpect(actual.toArray()).toEqual([\"hello\", \"goodbye\"]);\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-keys';\n    spec.exampleId  = 'ObjectLikeSequence-keys-1';\n    spec.actual     = 'Lazy({ hello: \\\"hola\\\", goodbye: \\\"hasta luego\\\" }).keys()';\n    spec.expected   = 'sequence: [\\\"hello\\\", \\\"goodbye\\\"]';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-omit\">\n                    <h1>\n                        omit\n                        <small>ObjectLikeSequence#omit</small>\n                    </h1>\n\n                    <p>Creates an <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> consisting of the key/value pairs from\nthis sequence excluding those with the specified keys.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.omit = function(properties)</textarea>\n\n                        <table id=\"ObjectLikeSequence#omit-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>properties</td>\n                                    <td>Array</td>\n                                    <td><p>An array of the properties to <em>omit</em> from this\n    sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ObjectLikeSequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-omit\">var players = {\n  \"who\": \"first\",\n  \"what\": \"second\",\n  \"i don't know\": \"third\"\n};\n\nLazy(players).omit([\"who\", \"what\"]) // sequence: { \"i don't know\": \"third\" }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('omit', function() {\n  var players = {\n  \"who\": \"first\",\n  \"what\": \"second\",\n  \"i don't know\": \"third\"\n};\n  (function() {\n    var spec = it('Lazy(players).omit([\\\"who\\\", \\\"what\\\"]) => sequence: { \\\"i don\\'t know\\\": \\\"third\\\" }', function() {\n      var actual = Lazy(players).omit([\"who\", \"what\"]);\nexpect(actual.toObject()).toEqual({  \"i don't know\": \"third\"  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-omit';\n    spec.exampleId  = 'ObjectLikeSequence-omit-1';\n    spec.actual     = 'Lazy(players).omit([\\\"who\\\", \\\"what\\\"])';\n    spec.expected   = 'sequence: { \\\"i don\\'t know\\\": \\\"third\\\" }';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-pairs\">\n                    <h1>\n                        pairs\n                        <small>ObjectLikeSequence#pairs</small>\n                    </h1>\n\n                    <p>Maps the key/value pairs in this sequence to arrays.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.pairs = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#pairs-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>An sequence of <code>[key, value]</code> pairs.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-pairs\">var colorCodes = {\n  red: \"#f00\",\n  green: \"#0f0\",\n  blue: \"#00f\"\n};\n\nLazy(colorCodes).pairs() // sequence: [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('pairs', function() {\n  var colorCodes = {\n  red: \"#f00\",\n  green: \"#0f0\",\n  blue: \"#00f\"\n};\n  (function() {\n    var spec = it('Lazy(colorCodes).pairs() => sequence: [[\\\"red\\\", \\\"#f00\\\"], [\\\"green\\\", \\\"#0f0\\\"], [\\\"blue\\\", \\\"#00f\\\"]]', function() {\n      var actual = Lazy(colorCodes).pairs();\nexpect(actual.toArray()).toEqual([[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]);\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-pairs';\n    spec.exampleId  = 'ObjectLikeSequence-pairs-1';\n    spec.actual     = 'Lazy(colorCodes).pairs()';\n    spec.expected   = 'sequence: [[\\\"red\\\", \\\"#f00\\\"], [\\\"green\\\", \\\"#0f0\\\"], [\\\"blue\\\", \\\"#00f\\\"]]';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-pick\">\n                    <h1>\n                        pick\n                        <small>ObjectLikeSequence#pick</small>\n                    </h1>\n\n                    <p>Creates an <a href=\"#ObjectLikeSequence\">ObjectLikeSequence</a> consisting of the key/value pairs from\nthis sequence whose keys are included in the given array of property names.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.pick = function(properties)</textarea>\n\n                        <table id=\"ObjectLikeSequence#pick-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>properties</td>\n                                    <td>Array</td>\n                                    <td><p>An array of the properties to &quot;pick&quot; from this\n    sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>ObjectLikeSequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-pick\">var players = {\n  \"who\": \"first\",\n  \"what\": \"second\",\n  \"i don't know\": \"third\"\n};\n\nLazy(players).pick([\"who\", \"what\"]) // sequence: { who: \"first\", what: \"second\" }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('pick', function() {\n  var players = {\n  \"who\": \"first\",\n  \"what\": \"second\",\n  \"i don't know\": \"third\"\n};\n  (function() {\n    var spec = it('Lazy(players).pick([\\\"who\\\", \\\"what\\\"]) => sequence: { who: \\\"first\\\", what: \\\"second\\\" }', function() {\n      var actual = Lazy(players).pick([\"who\", \"what\"]);\nexpect(actual.toObject()).toEqual({  who: \"first\", what: \"second\"  });\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-pick';\n    spec.exampleId  = 'ObjectLikeSequence-pick-1';\n    spec.actual     = 'Lazy(players).pick([\\\"who\\\", \\\"what\\\"])';\n    spec.expected   = 'sequence: { who: \\\"first\\\", what: \\\"second\\\" }';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-toArray\">\n                    <h1>\n                        toArray\n                        <small>ObjectLikeSequence#toArray</small>\n                    </h1>\n\n                    <p>Creates an array from the key/value pairs in this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.toArray = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#toArray-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Array</td>\n                                    <td><p>An array of <code>[key, value]</code> elements.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-toArray\">var colorCodes = {\n  red: \"#f00\",\n  green: \"#0f0\",\n  blue: \"#00f\"\n};\n\nLazy(colorCodes).toArray() // => [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('toArray', function() {\n  var colorCodes = {\n  red: \"#f00\",\n  green: \"#0f0\",\n  blue: \"#00f\"\n};\n  (function() {\n    var spec = it('Lazy(colorCodes).toArray() => [[\\\"red\\\", \\\"#f00\\\"], [\\\"green\\\", \\\"#0f0\\\"], [\\\"blue\\\", \\\"#00f\\\"]]', function() {\n      var result   = Lazy(colorCodes).toArray();\n      var expected = [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]];\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-toArray';\n    spec.exampleId  = 'ObjectLikeSequence-toArray-1';\n    spec.actual     = 'Lazy(colorCodes).toArray()';\n    spec.expected   = '[[\\\"red\\\", \\\"#f00\\\"], [\\\"green\\\", \\\"#0f0\\\"], [\\\"blue\\\", \\\"#00f\\\"]]';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-toObject\">\n                    <h1>\n                        toObject\n                        <small>ObjectLikeSequence#toObject</small>\n                    </h1>\n\n                    <p>Creates an object with the key/value pairs from this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.toObject = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#toObject-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Object</td>\n                                    <td><p>An object with the same key/value pairs as this sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-toObject\">var colorCodes = {\n  red: \"#f00\",\n  green: \"#0f0\",\n  blue: \"#00f\"\n};\n\nLazy(colorCodes).toObject() // => { red: \"#f00\", green: \"#0f0\", blue: \"#00f\" }</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('toObject', function() {\n  var colorCodes = {\n  red: \"#f00\",\n  green: \"#0f0\",\n  blue: \"#00f\"\n};\n  (function() {\n    var spec = it('Lazy(colorCodes).toObject() => { red: \\\"#f00\\\", green: \\\"#0f0\\\", blue: \\\"#00f\\\" }', function() {\n      var result   = Lazy(colorCodes).toObject();\n      var expected = { red: \"#f00\", green: \"#0f0\", blue: \"#00f\" };\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-toObject';\n    spec.exampleId  = 'ObjectLikeSequence-toObject-1';\n    spec.actual     = 'Lazy(colorCodes).toObject()';\n    spec.expected   = '{ red: \\\"#f00\\\", green: \\\"#0f0\\\", blue: \\\"#00f\\\" }';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"ObjectLikeSequence-values\">\n                    <h1>\n                        values\n                        <small>ObjectLikeSequence#values</small>\n                    </h1>\n\n                    <p>Returns a <a href=\"#Sequence\">Sequence</a> whose elements are the values of this object-like\nsequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>ObjectLikeSequence.values = function()</textarea>\n\n                        <table id=\"ObjectLikeSequence#values-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>The sequence based on this sequence&#39;s values.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-ObjectLikeSequence-values\">Lazy({ hello: \"hola\", goodbye: \"hasta luego\" }).values() // sequence: [\"hola\", \"hasta luego\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('values', function() {\n  \n  (function() {\n    var spec = it('Lazy({ hello: \\\"hola\\\", goodbye: \\\"hasta luego\\\" }).values() => sequence: [\\\"hola\\\", \\\"hasta luego\\\"]', function() {\n      var actual = Lazy({ hello: \"hola\", goodbye: \"hasta luego\" }).values();\nexpect(actual.toArray()).toEqual([\"hola\", \"hasta luego\"]);\n\n    });\n\n    spec.suiteId    = 'ObjectLikeSequence-values';\n    spec.exampleId  = 'ObjectLikeSequence-values-1';\n    spec.actual     = 'Lazy({ hello: \\\"hola\\\", goodbye: \\\"hasta luego\\\" }).values()';\n    spec.expected   = 'sequence: [\\\"hola\\\", \\\"hasta luego\\\"]';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"StringLikeSequence\">\n                    <h1>\n                        StringLikeSequence\n                        <small>StringLikeSequence</small>\n                    </h1>\n\n                    <p>A <code>StringLikeSequence</code> represents a sequence of characters.</p>\n<p>All methods of <code>StringLikeSequence</code> that conceptually should return\nsomething like a string return another <code>StringLikeSequence</code>.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence\">function upcase(str) { return str.toUpperCase(); }\n\nLazy('foo')               // instanceof Lazy.StringLikeSequence\nLazy('foo').toUpperCase() // instanceof Lazy.StringLikeSequence\nLazy('foo').reverse()     // instanceof Lazy.StringLikeSequence\nLazy('foo').take(2)       // instanceof Lazy.StringLikeSequence\nLazy('foo').drop(1)       // instanceof Lazy.StringLikeSequence\nLazy('foo').substring(1)  // instanceof Lazy.StringLikeSequence\n\n// Note that `map` does not create a `StringLikeSequence` because there's\n// no guarantee the mapping function will return characters. In the event\n// you do want to map a string onto a string-like sequence, use\n// `mapString`:\nLazy('foo').map(Lazy.identity)       // instanceof Lazy.ArrayLikeSequence\nLazy('foo').mapString(Lazy.identity) // instanceof Lazy.StringLikeSequence</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('StringLikeSequence', function() {\n  function upcase(str) { return str.toUpperCase(); }\n  (function() {\n    var spec = it('Lazy(\\'foo\\') => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo');\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\') to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-1';\n    spec.actual     = 'Lazy(\\'foo\\')';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').toUpperCase() => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo').toUpperCase();\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').toUpperCase() to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-2';\n    spec.actual     = 'Lazy(\\'foo\\').toUpperCase()';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').reverse() => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo').reverse();\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').reverse() to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-3';\n    spec.actual     = 'Lazy(\\'foo\\').reverse()';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').take(2) => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo').take(2);\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').take(2) to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-4';\n    spec.actual     = 'Lazy(\\'foo\\').take(2)';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').drop(1) => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo').drop(1);\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').drop(1) to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-5';\n    spec.actual     = 'Lazy(\\'foo\\').drop(1)';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 6;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').substring(1) => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo').substring(1);\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').substring(1) to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-6';\n    spec.actual     = 'Lazy(\\'foo\\').substring(1)';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 7;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').map(Lazy.identity) => instanceof Lazy.ArrayLikeSequence', function() {\n      var actual = Lazy('foo').map(Lazy.identity);\nif (!(actual instanceof Lazy.ArrayLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').map(Lazy.identity) to be an instance of Lazy.ArrayLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-7';\n    spec.actual     = 'Lazy(\\'foo\\').map(Lazy.identity)';\n    spec.expected   = 'instanceof Lazy.ArrayLikeSequence';\n    spec.lineNumber = 13;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').mapString(Lazy.identity) => instanceof Lazy.StringLikeSequence', function() {\n      var actual = Lazy('foo').mapString(Lazy.identity);\nif (!(actual instanceof Lazy.StringLikeSequence)) {\n  throw 'Expected Lazy(\\'foo\\').mapString(Lazy.identity) to be an instance of Lazy.StringLikeSequence.';\n}\n    });\n\n    spec.suiteId    = 'StringLikeSequence';\n    spec.exampleId  = 'StringLikeSequence-8';\n    spec.actual     = 'Lazy(\\'foo\\').mapString(Lazy.identity)';\n    spec.expected   = 'instanceof Lazy.StringLikeSequence';\n    spec.lineNumber = 14;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-define\">\n                    <h1>\n                        define\n                        <small>StringLikeSequence.define</small>\n                    </h1>\n\n                    <p>Create a new constructor function for a type inheriting from\n<code>StringLikeSequence</code>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.define = function(methodName, overrides)</textarea>\n\n                        <table id=\"StringLikeSequence.define-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>methodName</td>\n                                    <td>string|Array.&lt;string&gt;</td>\n                                    <td><p>The name(s) of the method(s) to be\n    used for constructing the new sequence. The method will be attached to\n    the <code>StringLikeSequence</code> prototype so that it can be chained with any other\n    methods that return string-like sequences.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>overrides</td>\n                                    <td>Object</td>\n                                    <td><p>An object containing function overrides for this\n    new sequence type. Has the same requirements as\n    <a href=\"#ArrayLikeSequence-define\">ArrayLikeSequence.define</a>.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Function</td>\n                                    <td><p>A constructor for a new type inheriting from\n    <code>StringLikeSequence</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-define\">Lazy.StringLikeSequence.define(\"zomg\", {\n  length: function() {\n    return this.parent.length() + \"!!ZOMG!!!1\".length;\n  },\n\n  get: function(i) {\n    if (i < this.parent.length()) {\n      return this.parent.get(i);\n    }\n    return \"!!ZOMG!!!1\".charAt(i - this.parent.length());\n  }\n});\n\nLazy('foo').zomg() // sequence: \"foo!!ZOMG!!!1\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('define', function() {\n  Lazy.StringLikeSequence.define(\"zomg\", {\n  length: function() {\n    return this.parent.length() + \"!!ZOMG!!!1\".length;\n  },\n\n  get: function(i) {\n    if (i < this.parent.length()) {\n      return this.parent.get(i);\n    }\n    return \"!!ZOMG!!!1\".charAt(i - this.parent.length());\n  }\n});\n  (function() {\n    var spec = it('Lazy(\\'foo\\').zomg() => sequence: \\\"foo!!ZOMG!!!1\\\"', function() {\n      var actual = Lazy('foo').zomg();\nexpect(actual.toString()).toEqual(\"foo!!ZOMG!!!1\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-define';\n    spec.exampleId  = 'StringLikeSequence-define-1';\n    spec.actual     = 'Lazy(\\'foo\\').zomg()';\n    spec.expected   = 'sequence: \\\"foo!!ZOMG!!!1\\\"';\n    spec.lineNumber = 13;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-charAt\">\n                    <h1>\n                        charAt\n                        <small>StringLikeSequence#charAt</small>\n                    </h1>\n\n                    <p>Returns the character at the given index of this sequence, or the empty\nstring if the specified index lies outside the bounds of the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.charAt = function(i)</textarea>\n\n                        <table id=\"StringLikeSequence#charAt-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>i</td>\n                                    <td>number</td>\n                                    <td><p>The index of this sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>string</td>\n                                    <td><p>The character at the specified index.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-charAt\">Lazy(\"foo\").charAt(0)  // => \"f\"\nLazy(\"foo\").charAt(-1) // => \"\"\nLazy(\"foo\").charAt(10) // => \"\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('charAt', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").charAt(0) => \\\"f\\\"', function() {\n      var result   = Lazy(\"foo\").charAt(0);\n      var expected = \"f\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-charAt';\n    spec.exampleId  = 'StringLikeSequence-charAt-1';\n    spec.actual     = 'Lazy(\\\"foo\\\").charAt(0)';\n    spec.expected   = '\\\"f\\\"';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").charAt(-1) => \\\"\\\"', function() {\n      var result   = Lazy(\"foo\").charAt(-1);\n      var expected = \"\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-charAt';\n    spec.exampleId  = 'StringLikeSequence-charAt-2';\n    spec.actual     = 'Lazy(\\\"foo\\\").charAt(-1)';\n    spec.expected   = '\\\"\\\"';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").charAt(10) => \\\"\\\"', function() {\n      var result   = Lazy(\"foo\").charAt(10);\n      var expected = \"\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-charAt';\n    spec.exampleId  = 'StringLikeSequence-charAt-3';\n    spec.actual     = 'Lazy(\\\"foo\\\").charAt(10)';\n    spec.expected   = '\\\"\\\"';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-charCodeAt\">\n                    <h1>\n                        charCodeAt\n                        <small>StringLikeSequence#charCodeAt</small>\n                    </h1>\n\n                    <p>Returns the character code at the given index of this sequence, or <code>NaN</code> if\nthe index lies outside the bounds of the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.charCodeAt = function(i)</textarea>\n\n                        <table id=\"StringLikeSequence#charCodeAt-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>i</td>\n                                    <td>number</td>\n                                    <td><p>The index of the character whose character code you want.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The character code.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-charCodeAt\">Lazy(\"abc\").charCodeAt(0)  // => 97\nLazy(\"abc\").charCodeAt(-1) // => NaN\nLazy(\"abc\").charCodeAt(10) // => NaN</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('charCodeAt', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\\"abc\\\").charCodeAt(0) => 97', function() {\n      var result   = Lazy(\"abc\").charCodeAt(0);\n      var expected = 97;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-charCodeAt';\n    spec.exampleId  = 'StringLikeSequence-charCodeAt-1';\n    spec.actual     = 'Lazy(\\\"abc\\\").charCodeAt(0)';\n    spec.expected   = '97';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"abc\\\").charCodeAt(-1) => NaN', function() {\n      expect(Lazy(\"abc\").charCodeAt(-1)).toBeNaN();\n    });\n\n    spec.suiteId    = 'StringLikeSequence-charCodeAt';\n    spec.exampleId  = 'StringLikeSequence-charCodeAt-2';\n    spec.actual     = 'Lazy(\\\"abc\\\").charCodeAt(-1)';\n    spec.expected   = 'NaN';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"abc\\\").charCodeAt(10) => NaN', function() {\n      expect(Lazy(\"abc\").charCodeAt(10)).toBeNaN();\n    });\n\n    spec.suiteId    = 'StringLikeSequence-charCodeAt';\n    spec.exampleId  = 'StringLikeSequence-charCodeAt-3';\n    spec.actual     = 'Lazy(\\\"abc\\\").charCodeAt(10)';\n    spec.expected   = 'NaN';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-contains\">\n                    <h1>\n                        contains\n                        <small>StringLikeSequence#contains</small>\n                    </h1>\n\n                    <p>Checks if this sequence contains a given substring.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.contains = function(substring)</textarea>\n\n                        <table id=\"StringLikeSequence#contains-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>substring</td>\n                                    <td>string</td>\n                                    <td><p>The substring to check for.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>Whether or not this sequence contains <code>substring</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-contains\">Lazy('hello').contains('ell') // => true\nLazy('hello').contains('')    // => true\nLazy('hello').contains('abc') // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('contains', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'hello\\').contains(\\'ell\\') => true', function() {\n      var result   = Lazy('hello').contains('ell');\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-contains';\n    spec.exampleId  = 'StringLikeSequence-contains-1';\n    spec.actual     = 'Lazy(\\'hello\\').contains(\\'ell\\')';\n    spec.expected   = 'true';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'hello\\').contains(\\'\\') => true', function() {\n      var result   = Lazy('hello').contains('');\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-contains';\n    spec.exampleId  = 'StringLikeSequence-contains-2';\n    spec.actual     = 'Lazy(\\'hello\\').contains(\\'\\')';\n    spec.expected   = 'true';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'hello\\').contains(\\'abc\\') => false', function() {\n      var result   = Lazy('hello').contains('abc');\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-contains';\n    spec.exampleId  = 'StringLikeSequence-contains-3';\n    spec.actual     = 'Lazy(\\'hello\\').contains(\\'abc\\')';\n    spec.expected   = 'false';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-endsWith\">\n                    <h1>\n                        endsWith\n                        <small>StringLikeSequence#endsWith</small>\n                    </h1>\n\n                    <p>Checks if this sequence ends with a given suffix.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.endsWith = function(suffix)</textarea>\n\n                        <table id=\"StringLikeSequence#endsWith-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>suffix</td>\n                                    <td>string</td>\n                                    <td><p>The suffix to check for.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>Whether or not this sequence ends with <code>suffix</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-endsWith\">Lazy('foo').endsWith('oo')  // => true\nLazy('foo').endsWith('')    // => true\nLazy('foo').endsWith('abc') // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('endsWith', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'foo\\').endsWith(\\'oo\\') => true', function() {\n      var result   = Lazy('foo').endsWith('oo');\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-endsWith';\n    spec.exampleId  = 'StringLikeSequence-endsWith-1';\n    spec.actual     = 'Lazy(\\'foo\\').endsWith(\\'oo\\')';\n    spec.expected   = 'true';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').endsWith(\\'\\') => true', function() {\n      var result   = Lazy('foo').endsWith('');\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-endsWith';\n    spec.exampleId  = 'StringLikeSequence-endsWith-2';\n    spec.actual     = 'Lazy(\\'foo\\').endsWith(\\'\\')';\n    spec.expected   = 'true';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').endsWith(\\'abc\\') => false', function() {\n      var result   = Lazy('foo').endsWith('abc');\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-endsWith';\n    spec.exampleId  = 'StringLikeSequence-endsWith-3';\n    spec.actual     = 'Lazy(\\'foo\\').endsWith(\\'abc\\')';\n    spec.expected   = 'false';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-first\">\n                    <h1>\n                        first\n                        <small>StringLikeSequence#first</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-first\">Sequence#first</a> that returns another\n<a href=\"#StringLikeSequence\">StringLikeSequence</a> (or just the first character, if <code>count</code> is\nundefined).</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-first\">Lazy('foo').first()                // => 'f'\nLazy('fo').first(2)                // sequence: 'fo'\nLazy('foo').first(10)              // sequence: 'foo'\nLazy('foo').toUpperCase().first()  // => 'F'\nLazy('foo').toUpperCase().first(2) // sequence: 'FO'</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('first', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'foo\\').first() => \\'f\\'', function() {\n      var result   = Lazy('foo').first();\n      var expected = 'f';\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-first';\n    spec.exampleId  = 'StringLikeSequence-first-1';\n    spec.actual     = 'Lazy(\\'foo\\').first()';\n    spec.expected   = '\\'f\\'';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'fo\\').first(2) => sequence: \\'fo\\'', function() {\n      var actual = Lazy('fo').first(2);\nexpect(actual.toString()).toEqual(\"fo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-first';\n    spec.exampleId  = 'StringLikeSequence-first-2';\n    spec.actual     = 'Lazy(\\'fo\\').first(2)';\n    spec.expected   = 'sequence: \\'fo\\'';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').first(10) => sequence: \\'foo\\'', function() {\n      var actual = Lazy('foo').first(10);\nexpect(actual.toString()).toEqual(\"foo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-first';\n    spec.exampleId  = 'StringLikeSequence-first-3';\n    spec.actual     = 'Lazy(\\'foo\\').first(10)';\n    spec.expected   = 'sequence: \\'foo\\'';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').toUpperCase().first() => \\'F\\'', function() {\n      var result   = Lazy('foo').toUpperCase().first();\n      var expected = 'F';\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-first';\n    spec.exampleId  = 'StringLikeSequence-first-4';\n    spec.actual     = 'Lazy(\\'foo\\').toUpperCase().first()';\n    spec.expected   = '\\'F\\'';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').toUpperCase().first(2) => sequence: \\'FO\\'', function() {\n      var actual = Lazy('foo').toUpperCase().first(2);\nexpect(actual.toString()).toEqual(\"FO\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-first';\n    spec.exampleId  = 'StringLikeSequence-first-5';\n    spec.actual     = 'Lazy(\\'foo\\').toUpperCase().first(2)';\n    spec.expected   = 'sequence: \\'FO\\'';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-indexOf\">\n                    <h1>\n                        indexOf\n                        <small>StringLikeSequence#indexOf</small>\n                    </h1>\n\n                    <p>Finds the index of the first occurrence of the given substring within this\nsequence, starting from the specified index (or the beginning of the\nsequence).</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.indexOf = function(substring, startIndex)</textarea>\n\n                        <table id=\"StringLikeSequence#indexOf-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>substring</td>\n                                    <td>string</td>\n                                    <td><p>The substring to search for.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>startIndex</td>\n                                    <td>number?</td>\n                                    <td><p>The index from which to start the search.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The first index where the given substring is found, or\n    -1 if it isn&#39;t in the sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-indexOf\">Lazy('canal').indexOf('a')    // => 1\nLazy('canal').indexOf('a', 2) // => 3\nLazy('canal').indexOf('ana')  // => 1\nLazy('canal').indexOf('andy') // => -1\nLazy('canal').indexOf('x')    // => -1</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('indexOf', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'canal\\').indexOf(\\'a\\') => 1', function() {\n      var result   = Lazy('canal').indexOf('a');\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-indexOf';\n    spec.exampleId  = 'StringLikeSequence-indexOf-1';\n    spec.actual     = 'Lazy(\\'canal\\').indexOf(\\'a\\')';\n    spec.expected   = '1';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').indexOf(\\'a\\', 2) => 3', function() {\n      var result   = Lazy('canal').indexOf('a', 2);\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-indexOf';\n    spec.exampleId  = 'StringLikeSequence-indexOf-2';\n    spec.actual     = 'Lazy(\\'canal\\').indexOf(\\'a\\', 2)';\n    spec.expected   = '3';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').indexOf(\\'ana\\') => 1', function() {\n      var result   = Lazy('canal').indexOf('ana');\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-indexOf';\n    spec.exampleId  = 'StringLikeSequence-indexOf-3';\n    spec.actual     = 'Lazy(\\'canal\\').indexOf(\\'ana\\')';\n    spec.expected   = '1';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').indexOf(\\'andy\\') => -1', function() {\n      var result   = Lazy('canal').indexOf('andy');\n      var expected = -1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-indexOf';\n    spec.exampleId  = 'StringLikeSequence-indexOf-4';\n    spec.actual     = 'Lazy(\\'canal\\').indexOf(\\'andy\\')';\n    spec.expected   = '-1';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').indexOf(\\'x\\') => -1', function() {\n      var result   = Lazy('canal').indexOf('x');\n      var expected = -1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-indexOf';\n    spec.exampleId  = 'StringLikeSequence-indexOf-5';\n    spec.actual     = 'Lazy(\\'canal\\').indexOf(\\'x\\')';\n    spec.expected   = '-1';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-last\">\n                    <h1>\n                        last\n                        <small>StringLikeSequence#last</small>\n                    </h1>\n\n                    <p>An optimized version of <a href=\"#Sequence-last\">Sequence#last</a> that returns another\n<a href=\"#StringLikeSequence\">StringLikeSequence</a> (or just the last character, if <code>count</code> is\nundefined).</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-last\">Lazy('foo').last()                // => 'o'\nLazy('foo').last(2)               // sequence: 'oo'\nLazy('foo').last(10)              // sequence: 'foo'\nLazy('foo').toUpperCase().last()  // => 'O'\nLazy('foo').toUpperCase().last(2) // sequence: 'OO'</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('last', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'foo\\').last() => \\'o\\'', function() {\n      var result   = Lazy('foo').last();\n      var expected = 'o';\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-last';\n    spec.exampleId  = 'StringLikeSequence-last-1';\n    spec.actual     = 'Lazy(\\'foo\\').last()';\n    spec.expected   = '\\'o\\'';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').last(2) => sequence: \\'oo\\'', function() {\n      var actual = Lazy('foo').last(2);\nexpect(actual.toString()).toEqual(\"oo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-last';\n    spec.exampleId  = 'StringLikeSequence-last-2';\n    spec.actual     = 'Lazy(\\'foo\\').last(2)';\n    spec.expected   = 'sequence: \\'oo\\'';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').last(10) => sequence: \\'foo\\'', function() {\n      var actual = Lazy('foo').last(10);\nexpect(actual.toString()).toEqual(\"foo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-last';\n    spec.exampleId  = 'StringLikeSequence-last-3';\n    spec.actual     = 'Lazy(\\'foo\\').last(10)';\n    spec.expected   = 'sequence: \\'foo\\'';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').toUpperCase().last() => \\'O\\'', function() {\n      var result   = Lazy('foo').toUpperCase().last();\n      var expected = 'O';\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-last';\n    spec.exampleId  = 'StringLikeSequence-last-4';\n    spec.actual     = 'Lazy(\\'foo\\').toUpperCase().last()';\n    spec.expected   = '\\'O\\'';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').toUpperCase().last(2) => sequence: \\'OO\\'', function() {\n      var actual = Lazy('foo').toUpperCase().last(2);\nexpect(actual.toString()).toEqual(\"OO\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-last';\n    spec.exampleId  = 'StringLikeSequence-last-5';\n    spec.actual     = 'Lazy(\\'foo\\').toUpperCase().last(2)';\n    spec.expected   = 'sequence: \\'OO\\'';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-lastIndexOf\">\n                    <h1>\n                        lastIndexOf\n                        <small>StringLikeSequence#lastIndexOf</small>\n                    </h1>\n\n                    <p>Finds the index of the last occurrence of the given substring within this\nsequence, starting from the specified index (or the end of the sequence)\nand working backwards.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.lastIndexOf = function(substring, startIndex)</textarea>\n\n                        <table id=\"StringLikeSequence#lastIndexOf-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>substring</td>\n                                    <td>string</td>\n                                    <td><p>The substring to search for.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>startIndex</td>\n                                    <td>number?</td>\n                                    <td><p>The index from which to start the search.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The last index where the given substring is found, or\n    -1 if it isn&#39;t in the sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-lastIndexOf\">Lazy('canal').lastIndexOf('a')    // => 3\nLazy('canal').lastIndexOf('a', 2) // => 1\nLazy('canal').lastIndexOf('ana')  // => 1\nLazy('canal').lastIndexOf('andy') // => -1\nLazy('canal').lastIndexOf('x')    // => -1</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('lastIndexOf', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'canal\\').lastIndexOf(\\'a\\') => 3', function() {\n      var result   = Lazy('canal').lastIndexOf('a');\n      var expected = 3;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-lastIndexOf';\n    spec.exampleId  = 'StringLikeSequence-lastIndexOf-1';\n    spec.actual     = 'Lazy(\\'canal\\').lastIndexOf(\\'a\\')';\n    spec.expected   = '3';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').lastIndexOf(\\'a\\', 2) => 1', function() {\n      var result   = Lazy('canal').lastIndexOf('a', 2);\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-lastIndexOf';\n    spec.exampleId  = 'StringLikeSequence-lastIndexOf-2';\n    spec.actual     = 'Lazy(\\'canal\\').lastIndexOf(\\'a\\', 2)';\n    spec.expected   = '1';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').lastIndexOf(\\'ana\\') => 1', function() {\n      var result   = Lazy('canal').lastIndexOf('ana');\n      var expected = 1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-lastIndexOf';\n    spec.exampleId  = 'StringLikeSequence-lastIndexOf-3';\n    spec.actual     = 'Lazy(\\'canal\\').lastIndexOf(\\'ana\\')';\n    spec.expected   = '1';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').lastIndexOf(\\'andy\\') => -1', function() {\n      var result   = Lazy('canal').lastIndexOf('andy');\n      var expected = -1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-lastIndexOf';\n    spec.exampleId  = 'StringLikeSequence-lastIndexOf-4';\n    spec.actual     = 'Lazy(\\'canal\\').lastIndexOf(\\'andy\\')';\n    spec.expected   = '-1';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'canal\\').lastIndexOf(\\'x\\') => -1', function() {\n      var result   = Lazy('canal').lastIndexOf('x');\n      var expected = -1;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-lastIndexOf';\n    spec.exampleId  = 'StringLikeSequence-lastIndexOf-5';\n    spec.actual     = 'Lazy(\\'canal\\').lastIndexOf(\\'x\\')';\n    spec.expected   = '-1';\n    spec.lineNumber = 4;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-mapString\">\n                    <h1>\n                        mapString\n                        <small>StringLikeSequence#mapString</small>\n                    </h1>\n\n                    <p>Maps the characters of this sequence onto a new <a href=\"#StringLikeSequence\">StringLikeSequence</a>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.mapString = function(mapFn)</textarea>\n\n                        <table id=\"StringLikeSequence#mapString-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>mapFn</td>\n                                    <td>Function</td>\n                                    <td><p>The function used to map characters from this\n    sequence onto the new sequence.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>StringLikeSequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-mapString\">function upcase(char) { return char.toUpperCase(); }\n\nLazy(\"foo\").mapString(upcase)               // sequence: \"FOO\"\nLazy(\"foo\").mapString(upcase).charAt(0)     // => \"F\"\nLazy(\"foo\").mapString(upcase).charCodeAt(0) // => 70\nLazy(\"foo\").mapString(upcase).substring(1)  // sequence: \"OO\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('mapString', function() {\n  function upcase(char) { return char.toUpperCase(); }\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").mapString(upcase) => sequence: \\\"FOO\\\"', function() {\n      var actual = Lazy(\"foo\").mapString(upcase);\nexpect(actual.toString()).toEqual(\"FOO\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-mapString';\n    spec.exampleId  = 'StringLikeSequence-mapString-1';\n    spec.actual     = 'Lazy(\\\"foo\\\").mapString(upcase)';\n    spec.expected   = 'sequence: \\\"FOO\\\"';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").mapString(upcase).charAt(0) => \\\"F\\\"', function() {\n      var result   = Lazy(\"foo\").mapString(upcase).charAt(0);\n      var expected = \"F\";\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-mapString';\n    spec.exampleId  = 'StringLikeSequence-mapString-2';\n    spec.actual     = 'Lazy(\\\"foo\\\").mapString(upcase).charAt(0)';\n    spec.expected   = '\\\"F\\\"';\n    spec.lineNumber = 3;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").mapString(upcase).charCodeAt(0) => 70', function() {\n      var result   = Lazy(\"foo\").mapString(upcase).charCodeAt(0);\n      var expected = 70;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-mapString';\n    spec.exampleId  = 'StringLikeSequence-mapString-3';\n    spec.actual     = 'Lazy(\\\"foo\\\").mapString(upcase).charCodeAt(0)';\n    spec.expected   = '70';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").mapString(upcase).substring(1) => sequence: \\\"OO\\\"', function() {\n      var actual = Lazy(\"foo\").mapString(upcase).substring(1);\nexpect(actual.toString()).toEqual(\"OO\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-mapString';\n    spec.exampleId  = 'StringLikeSequence-mapString-4';\n    spec.actual     = 'Lazy(\\\"foo\\\").mapString(upcase).substring(1)';\n    spec.expected   = 'sequence: \\\"OO\\\"';\n    spec.lineNumber = 5;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-match\">\n                    <h1>\n                        match\n                        <small>StringLikeSequence#match</small>\n                    </h1>\n\n                    <p>Creates a <a href=\"#Sequence\">Sequence</a> comprising all of the matches for the specified\npattern in the underlying string.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.match = function(pattern)</textarea>\n\n                        <table id=\"StringLikeSequence#match-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>pattern</td>\n                                    <td>RegExp</td>\n                                    <td><p>The pattern to match.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>A sequence of all the matches.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-match\">Lazy(\"abracadabra\").match(/a[bcd]/) // sequence: [\"ab\", \"ac\", \"ad\", \"ab\"]\nLazy(\"fee fi fo fum\").match(/\\w+/)  // sequence: [\"fee\", \"fi\", \"fo\", \"fum\"]\nLazy(\"hello\").match(/xyz/)          // sequence: []</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('match', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\\"abracadabra\\\").match(/a[bcd]/) => sequence: [\\\"ab\\\", \\\"ac\\\", \\\"ad\\\", \\\"ab\\\"]', function() {\n      var actual = Lazy(\"abracadabra\").match(/a[bcd]/);\nexpect(actual.toArray()).toEqual([\"ab\", \"ac\", \"ad\", \"ab\"]);\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-match';\n    spec.exampleId  = 'StringLikeSequence-match-1';\n    spec.actual     = 'Lazy(\\\"abracadabra\\\").match(/a[bcd]/)';\n    spec.expected   = 'sequence: [\\\"ab\\\", \\\"ac\\\", \\\"ad\\\", \\\"ab\\\"]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"fee fi fo fum\\\").match(/\\\\w+/) => sequence: [\\\"fee\\\", \\\"fi\\\", \\\"fo\\\", \\\"fum\\\"]', function() {\n      var actual = Lazy(\"fee fi fo fum\").match(/\\w+/);\nexpect(actual.toArray()).toEqual([\"fee\", \"fi\", \"fo\", \"fum\"]);\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-match';\n    spec.exampleId  = 'StringLikeSequence-match-2';\n    spec.actual     = 'Lazy(\\\"fee fi fo fum\\\").match(/\\\\w+/)';\n    spec.expected   = 'sequence: [\\\"fee\\\", \\\"fi\\\", \\\"fo\\\", \\\"fum\\\"]';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"hello\\\").match(/xyz/) => sequence: []', function() {\n      var actual = Lazy(\"hello\").match(/xyz/);\nexpect(actual.toArray()).toEqual([]);\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-match';\n    spec.exampleId  = 'StringLikeSequence-match-3';\n    spec.actual     = 'Lazy(\\\"hello\\\").match(/xyz/)';\n    spec.expected   = 'sequence: []';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-reverse\">\n                    <h1>\n                        reverse\n                        <small>StringLikeSequence#reverse</small>\n                    </h1>\n\n                    <p>Returns a copy of this sequence that reads back to front.</p>\n\n\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-reverse\">Lazy(\"abcdefg\").reverse() // sequence: \"gfedcba\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('reverse', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\\"abcdefg\\\").reverse() => sequence: \\\"gfedcba\\\"', function() {\n      var actual = Lazy(\"abcdefg\").reverse();\nexpect(actual.toString()).toEqual(\"gfedcba\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-reverse';\n    spec.exampleId  = 'StringLikeSequence-reverse-1';\n    spec.actual     = 'Lazy(\\\"abcdefg\\\").reverse()';\n    spec.expected   = 'sequence: \\\"gfedcba\\\"';\n    spec.lineNumber = 0;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-split\">\n                    <h1>\n                        split\n                        <small>StringLikeSequence#split</small>\n                    </h1>\n\n                    <p>Creates a <a href=\"#Sequence\">Sequence</a> comprising all of the substrings of this string\nseparated by the given delimiter, which can be either a string or a regular\nexpression.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.split = function(delimiter)</textarea>\n\n                        <table id=\"StringLikeSequence#split-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>delimiter</td>\n                                    <td>string|RegExp</td>\n                                    <td><p>The delimiter to use for recognizing\n    substrings.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>Sequence</td>\n                                    <td><p>A sequence of all the substrings separated by the given\n    delimiter.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-split\">Lazy(\"foo\").split(\"\")                      // sequence: [\"f\", \"o\", \"o\"]\nLazy(\"yo dawg\").split(\" \")                 // sequence: [\"yo\", \"dawg\"]\nLazy(\"bah bah\\tblack  sheep\").split(/\\s+/) // sequence: [\"bah\", \"bah\", \"black\", \"sheep\"]</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('split', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").split(\\\"\\\") => sequence: [\\\"f\\\", \\\"o\\\", \\\"o\\\"]', function() {\n      var actual = Lazy(\"foo\").split(\"\");\nexpect(actual.toArray()).toEqual([\"f\", \"o\", \"o\"]);\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-split';\n    spec.exampleId  = 'StringLikeSequence-split-1';\n    spec.actual     = 'Lazy(\\\"foo\\\").split(\\\"\\\")';\n    spec.expected   = 'sequence: [\\\"f\\\", \\\"o\\\", \\\"o\\\"]';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"yo dawg\\\").split(\\\" \\\") => sequence: [\\\"yo\\\", \\\"dawg\\\"]', function() {\n      var actual = Lazy(\"yo dawg\").split(\" \");\nexpect(actual.toArray()).toEqual([\"yo\", \"dawg\"]);\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-split';\n    spec.exampleId  = 'StringLikeSequence-split-2';\n    spec.actual     = 'Lazy(\\\"yo dawg\\\").split(\\\" \\\")';\n    spec.expected   = 'sequence: [\\\"yo\\\", \\\"dawg\\\"]';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"bah bah\\\\tblack  sheep\\\").split(/\\\\s+/) => sequence: [\\\"bah\\\", \\\"bah\\\", \\\"black\\\", \\\"sheep\\\"]', function() {\n      var actual = Lazy(\"bah bah\\tblack  sheep\").split(/\\s+/);\nexpect(actual.toArray()).toEqual([\"bah\", \"bah\", \"black\", \"sheep\"]);\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-split';\n    spec.exampleId  = 'StringLikeSequence-split-3';\n    spec.actual     = 'Lazy(\\\"bah bah\\\\tblack  sheep\\\").split(/\\\\s+/)';\n    spec.expected   = 'sequence: [\\\"bah\\\", \\\"bah\\\", \\\"black\\\", \\\"sheep\\\"]';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-startsWith\">\n                    <h1>\n                        startsWith\n                        <small>StringLikeSequence#startsWith</small>\n                    </h1>\n\n                    <p>Checks if this sequence starts with a given prefix.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.startsWith = function(prefix)</textarea>\n\n                        <table id=\"StringLikeSequence#startsWith-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>prefix</td>\n                                    <td>string</td>\n                                    <td><p>The prefix to check for.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>boolean</td>\n                                    <td><p>Whether or not this sequence starts with <code>prefix</code>.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-startsWith\">Lazy('foo').startsWith('fo')  // => true\nLazy('foo').startsWith('')    // => true\nLazy('foo').startsWith('abc') // => false</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('startsWith', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\'foo\\').startsWith(\\'fo\\') => true', function() {\n      var result   = Lazy('foo').startsWith('fo');\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-startsWith';\n    spec.exampleId  = 'StringLikeSequence-startsWith-1';\n    spec.actual     = 'Lazy(\\'foo\\').startsWith(\\'fo\\')';\n    spec.expected   = 'true';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').startsWith(\\'\\') => true', function() {\n      var result   = Lazy('foo').startsWith('');\n      var expected = true;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-startsWith';\n    spec.exampleId  = 'StringLikeSequence-startsWith-2';\n    spec.actual     = 'Lazy(\\'foo\\').startsWith(\\'\\')';\n    spec.expected   = 'true';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').startsWith(\\'abc\\') => false', function() {\n      var result   = Lazy('foo').startsWith('abc');\n      var expected = false;\n      assertEquality(expected, result);\n    });\n\n    spec.suiteId    = 'StringLikeSequence-startsWith';\n    spec.exampleId  = 'StringLikeSequence-startsWith-3';\n    spec.actual     = 'Lazy(\\'foo\\').startsWith(\\'abc\\')';\n    spec.expected   = 'false';\n    spec.lineNumber = 2;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-substring\">\n                    <h1>\n                        substring\n                        <small>StringLikeSequence#substring</small>\n                    </h1>\n\n                    <p>Returns a <a href=\"#StringLikeSequence\">StringLikeSequence</a> comprising the characters from <em>this</em>\nsequence starting at <code>start</code> and ending at <code>stop</code> (exclusive), or---if\n<code>stop</code> is <code>undefined</code>, including the rest of the sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.substring = function(start, stop)</textarea>\n\n                        <table id=\"StringLikeSequence#substring-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>start</td>\n                                    <td>number</td>\n                                    <td><p>The index where this sequence should begin.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>stop</td>\n                                    <td>number?</td>\n                                    <td><p>The index (exclusive) where this sequence should end.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>StringLikeSequence</td>\n                                    <td><p>The new sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-substring\">Lazy(\"foo\").substring(1)      // sequence: \"oo\"\nLazy(\"foo\").substring(-1)     // sequence: \"foo\"\nLazy(\"hello\").substring(1, 3) // sequence: \"el\"\nLazy(\"hello\").substring(1, 9) // sequence: \"ello\"</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('substring', function() {\n  \n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").substring(1) => sequence: \\\"oo\\\"', function() {\n      var actual = Lazy(\"foo\").substring(1);\nexpect(actual.toString()).toEqual(\"oo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-substring';\n    spec.exampleId  = 'StringLikeSequence-substring-1';\n    spec.actual     = 'Lazy(\\\"foo\\\").substring(1)';\n    spec.expected   = 'sequence: \\\"oo\\\"';\n    spec.lineNumber = 0;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"foo\\\").substring(-1) => sequence: \\\"foo\\\"', function() {\n      var actual = Lazy(\"foo\").substring(-1);\nexpect(actual.toString()).toEqual(\"foo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-substring';\n    spec.exampleId  = 'StringLikeSequence-substring-2';\n    spec.actual     = 'Lazy(\\\"foo\\\").substring(-1)';\n    spec.expected   = 'sequence: \\\"foo\\\"';\n    spec.lineNumber = 1;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"hello\\\").substring(1, 3) => sequence: \\\"el\\\"', function() {\n      var actual = Lazy(\"hello\").substring(1, 3);\nexpect(actual.toString()).toEqual(\"el\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-substring';\n    spec.exampleId  = 'StringLikeSequence-substring-3';\n    spec.actual     = 'Lazy(\\\"hello\\\").substring(1, 3)';\n    spec.expected   = 'sequence: \\\"el\\\"';\n    spec.lineNumber = 2;\n  }());\n  (function() {\n    var spec = it('Lazy(\\\"hello\\\").substring(1, 9) => sequence: \\\"ello\\\"', function() {\n      var actual = Lazy(\"hello\").substring(1, 9);\nexpect(actual.toString()).toEqual(\"ello\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-substring';\n    spec.exampleId  = 'StringLikeSequence-substring-4';\n    spec.actual     = 'Lazy(\\\"hello\\\").substring(1, 9)';\n    spec.expected   = 'sequence: \\\"ello\\\"';\n    spec.lineNumber = 3;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-toLowerCase\">\n                    <h1>\n                        toLowerCase\n                        <small>StringLikeSequence#toLowerCase</small>\n                    </h1>\n\n                    <p>Converts all of the characters in this string to lowercase.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.toLowerCase = function()</textarea>\n\n                        <table id=\"StringLikeSequence#toLowerCase-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>StringLikeSequence</td>\n                                    <td><p>A new sequence with the same characters as\n    this sequence, all lowercase.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-toLowerCase\">function nextLetter(a) {\n  return String.fromCharCode(a.charCodeAt(0) + 1);\n}\n\nLazy('FOO').toLowerCase()                       // sequence: 'foo'\nLazy('FOO').substring(1).toLowerCase()          // sequence: 'oo'\nLazy('ABC').mapString(nextLetter).toLowerCase() // sequence: 'bcd'</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('toLowerCase', function() {\n  function nextLetter(a) {\n  return String.fromCharCode(a.charCodeAt(0) + 1);\n}\n  (function() {\n    var spec = it('Lazy(\\'FOO\\').toLowerCase() => sequence: \\'foo\\'', function() {\n      var actual = Lazy('FOO').toLowerCase();\nexpect(actual.toString()).toEqual(\"foo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-toLowerCase';\n    spec.exampleId  = 'StringLikeSequence-toLowerCase-1';\n    spec.actual     = 'Lazy(\\'FOO\\').toLowerCase()';\n    spec.expected   = 'sequence: \\'foo\\'';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'FOO\\').substring(1).toLowerCase() => sequence: \\'oo\\'', function() {\n      var actual = Lazy('FOO').substring(1).toLowerCase();\nexpect(actual.toString()).toEqual(\"oo\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-toLowerCase';\n    spec.exampleId  = 'StringLikeSequence-toLowerCase-2';\n    spec.actual     = 'Lazy(\\'FOO\\').substring(1).toLowerCase()';\n    spec.expected   = 'sequence: \\'oo\\'';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'ABC\\').mapString(nextLetter).toLowerCase() => sequence: \\'bcd\\'', function() {\n      var actual = Lazy('ABC').mapString(nextLetter).toLowerCase();\nexpect(actual.toString()).toEqual(\"bcd\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-toLowerCase';\n    spec.exampleId  = 'StringLikeSequence-toLowerCase-3';\n    spec.actual     = 'Lazy(\\'ABC\\').mapString(nextLetter).toLowerCase()';\n    spec.expected   = 'sequence: \\'bcd\\'';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"method\" id=\"StringLikeSequence-toUpperCase\">\n                    <h1>\n                        toUpperCase\n                        <small>StringLikeSequence#toUpperCase</small>\n                    </h1>\n\n                    <p>Converts all of the characters in this string to uppercase.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>StringLikeSequence.toUpperCase = function()</textarea>\n\n                        <table id=\"StringLikeSequence#toUpperCase-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>StringLikeSequence</td>\n                                    <td><p>A new sequence with the same characters as\n    this sequence, all uppercase.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        <textarea class=\"source-examples\" id=\"source-StringLikeSequence-toUpperCase\">function nextLetter(a) {\n  return String.fromCharCode(a.charCodeAt(0) + 1);\n}\n\nLazy('foo').toUpperCase()                       // sequence: 'FOO'\nLazy('foo').substring(1).toUpperCase()          // sequence: 'OO'\nLazy('abc').mapString(nextLetter).toUpperCase() // sequence: 'BCD'</textarea>\n                    </div>\n\n\n                    <script type=\"text/javascript\">\ndescribe('toUpperCase', function() {\n  function nextLetter(a) {\n  return String.fromCharCode(a.charCodeAt(0) + 1);\n}\n  (function() {\n    var spec = it('Lazy(\\'foo\\').toUpperCase() => sequence: \\'FOO\\'', function() {\n      var actual = Lazy('foo').toUpperCase();\nexpect(actual.toString()).toEqual(\"FOO\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-toUpperCase';\n    spec.exampleId  = 'StringLikeSequence-toUpperCase-1';\n    spec.actual     = 'Lazy(\\'foo\\').toUpperCase()';\n    spec.expected   = 'sequence: \\'FOO\\'';\n    spec.lineNumber = 4;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'foo\\').substring(1).toUpperCase() => sequence: \\'OO\\'', function() {\n      var actual = Lazy('foo').substring(1).toUpperCase();\nexpect(actual.toString()).toEqual(\"OO\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-toUpperCase';\n    spec.exampleId  = 'StringLikeSequence-toUpperCase-2';\n    spec.actual     = 'Lazy(\\'foo\\').substring(1).toUpperCase()';\n    spec.expected   = 'sequence: \\'OO\\'';\n    spec.lineNumber = 5;\n  }());\n  (function() {\n    var spec = it('Lazy(\\'abc\\').mapString(nextLetter).toUpperCase() => sequence: \\'BCD\\'', function() {\n      var actual = Lazy('abc').mapString(nextLetter).toUpperCase();\nexpect(actual.toString()).toEqual(\"BCD\");\n\n    });\n\n    spec.suiteId    = 'StringLikeSequence-toUpperCase';\n    spec.exampleId  = 'StringLikeSequence-toUpperCase-3';\n    spec.actual     = 'Lazy(\\'abc\\').mapString(nextLetter).toUpperCase()';\n    spec.expected   = 'sequence: \\'BCD\\'';\n    spec.lineNumber = 6;\n  }());\n});\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"GeneratedSequence\">\n                    <h1>\n                        GeneratedSequence\n                        <small>GeneratedSequence</small>\n                    </h1>\n\n                    <p>A GeneratedSequence does not wrap an in-memory colllection but rather\ndetermines its elements on-the-fly during iteration according to a generator\nfunction.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>function GeneratedSequence(generatorFn, length)</textarea>\n\n                        <table id=\"GeneratedSequence-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>generatorFn</td>\n                                    <td>function(number):*</td>\n                                    <td><p>A function which accepts an index\n    and returns a value for the element at that position in the sequence.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>length</td>\n                                    <td>number?</td>\n                                    <td><p>The length of the sequence. If this argument is\n    omitted, the sequence will go on forever.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"GeneratedSequence-length\">\n                    <h1>\n                        length\n                        <small>GeneratedSequence#length</small>\n                    </h1>\n\n                    <p>Returns the length of this sequence.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>GeneratedSequence.length = function()</textarea>\n\n                        <table id=\"GeneratedSequence#length-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>number</td>\n                                    <td><p>The length, or <code>undefined</code> if this is an indefinite\n    sequence.</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"AsyncSequence\">\n                    <h1>\n                        AsyncSequence\n                        <small>AsyncSequence</small>\n                    </h1>\n\n                    <p>An <code>AsyncSequence</code> iterates over its elements asynchronously when\n<a href=\"#-each\">#each</a> is called.</p>\n<h2 id=\"returning-values\">Returning values</h2>\n<p>Because of its asynchronous nature, an <code>AsyncSequence</code> cannot be used in the\nsame way as other sequences for functions that return values directly (e.g.,\n<code>reduce</code>, <code>max</code>, <code>any</code>, even <code>toArray</code>).</p>\n<p>The plan is to eventually implement all of these methods differently for\n<code>AsyncSequence</code>: instead of returning values, they will accept a callback and\npass a result to the callback once iteration has been completed (or an error\nis raised). But that isn&#39;t done yet.</p>\n<h2 id=\"defining-custom-asynchronous-sequences\">Defining custom asynchronous sequences</h2>\n<p>There are plenty of ways to define an asynchronous sequence. Here&#39;s one.</p>\n<ol>\n<li>First, implement an <a href=\"#Iterator\">Iterator</a>. This is an object whose prototype\nhas the methods <a href=\"#Iterator-moveNext\">Iterator#moveNext</a> (which returns a <code>boolean</code>) and\n<a href=\"#current\">current</a> (which returns the current value).</li>\n<li>Next, create a simple wrapper that inherits from <code>AsyncSequence</code>, whose\n<code>getIterator</code> function returns an instance of the iterator type you just\ndefined.</li>\n</ol>\n<p>The default implementation for <a href=\"#-each\">#each</a> on an <code>AsyncSequence</code> is to\ncreate an iterator and then asynchronously call <a href=\"#Iterator-moveNext\">Iterator#moveNext</a>\n(using <code>setImmediate</code>, if available, otherwise <code>setTimeout</code>) until the iterator\ncan&#39;t move ahead any more.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>function AsyncSequence(parent, interval)</textarea>\n\n                        <table id=\"AsyncSequence-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>parent</td>\n                                    <td>Sequence</td>\n                                    <td><p>A <a href=\"#Sequence\">Sequence</a> to wrap, to expose asynchronous\n    iteration.</p>\n</td>\n                                </tr>\n                                <tr>\n                                    <td>interval</td>\n                                    <td>number?</td>\n                                    <td><p>How many milliseconds should elapse between each\n    element when iterating over this sequence. If this argument is omitted,\n    asynchronous iteration will be executed as fast as possible.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"AsyncSequence-each\">\n                    <h1>\n                        each\n                        <small>AsyncSequence#each</small>\n                    </h1>\n\n                    <p>An asynchronous version of <a href=\"#Sequence-each\">Sequence#each</a>.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>AsyncSequence.each = function(fn)</textarea>\n\n                        <table id=\"AsyncSequence#each-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>fn</td>\n                                    <td>Function</td>\n                                    <td><p>The function to invoke asynchronously on each element in\n    the sequence one by one.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                                <tr>\n                                    <td>returns</td>\n                                    <td>AsyncHandle</td>\n                                    <td><p>An object providing the ability to cancel the\n    asynchronous iteration (by calling <code>cancel()</code>) as well as supply\n    callback(s) for when an error is encountered (<code>onError</code>) or when\n    iteration is complete (<code>onComplete</code>).</p>\n</td>\n                                </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"constructor\" id=\"AsyncHandle\">\n                    <h1>\n                        AsyncHandle\n                        <small>AsyncHandle</small>\n                    </h1>\n\n                    \n\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"AsyncHandle-cancel\">\n                    <h1>\n                        cancel\n                        <small>AsyncHandle#cancel</small>\n                    </h1>\n\n                    <p>Cancels asynchronous iteration.</p>\n\n\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"AsyncHandle-onComplete\">\n                    <h1>\n                        onComplete\n                        <small>AsyncHandle#onComplete</small>\n                    </h1>\n\n                    <p>Updates the handle with a callback to execute when iteration is completed.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>AsyncHandle.onComplete = function(callback)</textarea>\n\n                        <table id=\"AsyncHandle#onComplete-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>callback</td>\n                                    <td>Function</td>\n                                    <td><p>The function to call when the asynchronous\n    iteration is completed.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n                <section class=\"method\" id=\"AsyncHandle-onError\">\n                    <h1>\n                        onError\n                        <small>AsyncHandle#onError</small>\n                    </h1>\n\n                    <p>Updates the handle with a callback to execute if/when any error is\nencountered during asynchronous iteration.</p>\n\n\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>AsyncHandle.onError = function(callback)</textarea>\n\n                        <table id=\"AsyncHandle#onError-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr>\n                                    <td>callback</td>\n                                    <td>Function</td>\n                                    <td><p>The function to call, with any associated error\n    object, when an error occurs.</p>\n</td>\n                                </tr>\n\n                            </tbody>\n\n                            <tfoot>\n                            </tfoot>\n                        </table>\n                    </div>\n\n\n\n                    <script type=\"text/javascript\">\n                    </script>\n                </section>\n            </article>\n        </div>\n    </main>\n</body>\n\n</html>\n",
			"file": "docs/index.html",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 372257,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>{{name}}</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/codemirror/3.14.0/codemirror.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"docs.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"examples.css\" />\n    <script src=\"//pivotal.github.io/jasmine/lib/jasmine-1.3.1/jasmine.js\"></script>\n    <script src=\"//lodash.com/_js/lodash.js\"></script>\n    <script src=\"//benchmarkjs.com/_js/benchmark.js\"></script>\n    <script src=\"//code.jquery.com/jquery-1.10.1.min.js\"></script>\n    <script src=\"//code.highcharts.com/highcharts.js\"></script>\n    <script src=\"//danieltao.com/HighTables/hightables.js\"></script>\n    <script src=\"//cdn.jsdelivr.net/codemirror/3.14.0/codemirror.js\"></script>\n    <script src=\"//cdn.jsdelivr.net/codemirror/3.14.0/mode/javascript/javascript.js\"></script>\n    <script type=\"text/javascript\" src=\"utils.js\"></script>\n    <script type=\"text/javascript\" src=\"docs.js\"></script>\n\n    {{#javascripts}}\n    <script type=\"text/javascript\" src=\"{{{.}}}\"></script>\n    {{/javascripts}}\n\n    <script type=\"text/javascript\" src=\"../lazy.js\"></script>\n    <script type=\"text/javascript\" src=\"../lazy.dom.js\"></script>\n    <script type=\"text/javascript\" src=\"defaults.js\"></script>\n\n    <script type=\"text/javascript\">\n      var benchmarks = {};\n    </script>\n</head>\n\n<body>\n    <main>\n        <header>\n            <h1>{{name}}</h1>\n        </header>\n\n        <!-- Notification area for failing specs -->\n        <div id=\"spec-failures\"></div>\n\n        <!-- Little progress indicator -->\n        <div id=\"highlighting-progress\"></div>\n\n        <div class=\"layout\">\n            <div class=\"index\">\n                <nav>\n                    <ul>\n                        {{#namespaces}}\n                        {{^excludeFromDocs}}\n                        <li class=\"nav-header\">\n                            {{#constructorMethod}}\n                            <a href=\"#{{identifier}}\">{{name}}</a>\n                            {{/constructorMethod}}\n                            {{^constructorMethod}}\n                            {{namespace}}\n                            {{/constructorMethod}}\n                        </li>\n                        {{#members}}\n                        {{^excludeFromDocs}}\n                        <li><a href=\"#{{identifier}}\">{{shortName}}</a></li>\n                        {{/excludeFromDocs}}\n                        {{/members}}\n                        {{/excludeFromDocs}}\n                        {{/namespaces}}\n                    </ul>\n                </nav>\n            </div>\n\n            <article>\n                <section class=\"description\">\n                    {{{description}}}\n                </section>\n\n                {{#namespaces}}\n                {{#allMembers}}\n                {{^excludeFromDocs}}\n                <section class=\"{{sectionType}}\" id=\"{{identifier}}\">\n                    <h1>\n                        {{shortName}}\n                        <small>{{name}}</small>\n                    </h1>\n\n                    {{{description}}}\n\n                    {{#hasSignature}}\n                    <div class=\"signature\">\n                        <h3>Signature</h3>\n\n                        <textarea>{{{signature}}}</textarea>\n\n                        <table id=\"{{name}}-parameters\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type(s)</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {{#params}}\n                                <tr>\n                                    <td>{{name}}</td>\n                                    <td>{{type}}</td>\n                                    <td>{{{description}}}</td>\n                                </tr>\n                                {{/params}}\n\n                            </tbody>\n\n                            {{^isConstructor}}\n                            <tfoot>\n                                {{#returns}}\n                                <tr>\n                                    <td>returns</td>\n                                    <td>{{type}}</td>\n                                    <td>{{{description}}}</td>\n                                </tr>\n                                {{/returns}}\n                            </tfoot>\n                            {{/isConstructor}}\n                        </table>\n                    </div>\n                    {{/hasSignature}}\n\n                    {{#hasExamples}}\n                    <div class=\"examples\">\n                        <h3>Examples</h3>\n\n                        {{#examples}}\n                        <textarea class=\"source-examples\" id=\"source-{{identifier}}\">{{{code}}}</textarea>\n                        {{/examples}}\n                    </div>\n                    {{/hasExamples}}\n\n                    {{#hasBenchmarks}}\n                    <div class=\"perf\">\n                        <h3>Benchmarks</h3>\n\n                        {{#benchmarks}}\n                        <textarea>{{{code}}}</textarea>\n\n                        <table id=\"{{identifier}}-perf-tests\">\n                            <tr>\n                                <th>Implementation</th>\n                                {{#cases}}\n                                <th>{{label}}</th>\n                                {{/cases}}\n                            </tr>\n\n                            {{#list}}\n                            <tr id=\"perf-test-{{identifier}}-{{id}}\">\n                                <td>{{{name}}}</td>\n                                {{#cases}}\n                                <td data-case-id=\"{{caseId}}\"></td>\n                                {{/cases}}\n                            </tr>\n                            {{/list}}\n                        </table>\n\n                        <button>Run performance benchmarks</button>\n                        {{/benchmarks}}\n                    </div>\n                    {{/hasBenchmarks}}\n\n                    <script type=\"text/javascript\">\n                      {{> examples}}\n                      {{> benchmarks}}\n                    </script>\n                </section>\n                {{/excludeFromDocs}}\n                {{/allMembers}}\n                {{/namespaces}}\n            </article>\n        </div>\n    </main>\n</body>\n\n</html>\n",
			"file": "autodoc/index.html.mustache",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 6526,
				"line_ending": "Unix"
			}
		},
		{
			"file": "autodoc/index.html",
			"settings":
			{
				"buffer_size": 374642,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "$(document).ready(function() {\n  var codeMirrors = {},\n      progressIndicator = $('#highlighting-progress');\n\n  function highlightCode(callback) {\n    var textareas = document.querySelectorAll('textarea');\n\n    var asyncHandle = Lazy(textareas).async().each(function(textarea, i) {\n      codeMirrors[textarea.id] = CodeMirror.fromTextArea(textarea, {\n        gutters: textarea.className.match(/source-examples/) ? ['result'] : [],\n        mode: 'javascript',\n        readOnly: true\n      });\n\n      var percent = (i + 1) / textareas.length * 100;\n      progressIndicator.text(percent.toFixed(0) + '% done');\n    });\n\n    asyncHandle.onComplete(callback || Lazy.noop);\n  }\n\n  function runSpecs() {\n    var failureNotices = $('#spec-failures');\n\n    var jasmineEnv = jasmine.getEnv();\n\n    jasmineEnv.addReporter({\n      reportSpecResults: function(spec) {\n        var editorId       = 'source-' + spec.suiteId,\n            matchingEditor = codeMirrors[editorId];\n\n        var style = spec.results().passed() ? 'passed' : 'failed';\n        matchingEditor.addLineClass(spec.lineNumber, 'background', style);\n\n        var gutterMarker = $('<div>')\n          .addClass('gutter-marker')\n          .addClass(style)\n          .html(spec.results().passed() ? '&#10004;' : '&times;');\n\n        matchingEditor.setGutterMarker(spec.lineNumber, 'result', gutterMarker[0]);\n\n        var lastElement = matchingEditor.getWrapperElement();\n        _(spec.results().getItems())\n          .filter(function(item) { return item.passed && !item.passed(); })\n          .pluck('message')\n          .each(function(errorMessage) {\n            lastElement = $('<pre>')\n              .text(errorMessage)\n              .attr('id', 'example-' + spec.exampleId)\n              .insertBefore(lastElement);\n\n            var notice = $('<p>')\n              .text(errorMessage)\n              .appendTo(failureNotices);\n\n            var link = $('<a>')\n              .attr('href', '#example-' + spec.exampleId)\n              .attr('data-editor-id', editorId)\n              .attr('data-line-number', spec.lineNumber)\n              .text('See specs')\n              .appendTo(notice);\n          });\n      }\n    });\n\n    jasmineEnv.execute();\n  }\n\n  $(document).on('click', '#spec-failures a', function(e) {\n    e.preventDefault();\n\n    var link          = $(this),\n        exampleTarget = link.attr('href'),\n        targetExample = $(exampleTarget),\n        targetEditor  = codeMirrors[link.attr('data-editor-id')],\n        targetLine    = Number(link.attr('data-line-number')),\n        parentSection = targetExample.closest('section');\n\n    // Show the section where the example is located.\n    parentSection[0].scrollIntoView();\n\n    // Highlight the example.\n    targetEditor.addLineClass(targetLine, 'background', 'highlight');\n    targetExample.addClass('highlight');\n\n    setTimeout(function() {\n      targetEditor.removeLineClass(targetLine, 'background', 'highlight');\n      targetExample.removeClass('highlight');\n    }, 1500);\n  });\n\n  $(document).on('click', '.perf button', function() {\n    var button = $(this);\n    var suite  = new Benchmark.Suite();\n\n    // Get the method name from the section heading.\n    var section  = $(this).closest('section');\n    var methodId = section.attr('id');\n\n    // Gather up all the benchmarks we want to run for this method.\n    _.each(benchmarks[methodId], function(benchmark, name) {\n      suite.add(benchmark);\n    });\n\n    // Remove the current bar chart and clear any currently perf results,\n    // if we're re-running the benchmarks.\n    $('.bar-chart', section).remove();\n    $('.perf td:last-child', section).empty();\n\n    // Populate the perf table as benchmarks are run.\n    suite.on('cycle', function(e) {\n      var benchmark = e.target;\n      var perfTestRow = $('#perf-test-' + benchmark.benchmarkId);\n      $('td[data-case-id=\"' + benchmark.caseId + '\"]', perfTestRow)\n        .text(formatNumber(benchmark.hz));\n    });\n\n    // Indicate that benchmarks are running.\n    var perf = $('.perf', section).addClass('loading');\n    button.hide();\n\n    suite.on('complete', function() {\n      // Indicate that benchmarks are finished.\n      perf.removeClass('loading').addClass('loaded');\n      button.text('Run performance tests again').show();\n\n      // Render a bar chart with the results.\n      var dataTable = $('table', perf);\n      var chartContainer = $('<div>')\n        .addClass('bar-chart')\n        .attr('data-source', '#' + dataTable.attr('id'))\n        .insertBefore(dataTable);\n\n      HighTables.renderChart(chartContainer[0]);\n    });\n\n    suite.run({ async: true });\n  });\n\n  highlightCode(function() {\n    progressIndicator.html('');\n    runSpecs();\n  });\n});\n\nfunction displayError(message) {\n  var failureNotices = $('#spec-failures');\n  $('<p>').text(message).appendTo(failureNotices);\n}\n\nBenchmark.options.onError = function(e) {\n  displayError(e.message);\n};\n\nwindow.addEventListener('error', function(e) {\n  displayError(e.message);\n});\n",
			"file": "autodoc/docs.js",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 4978,
				"line_ending": "Unix"
			}
		},
		{
			"file": "docs/docs.js",
			"settings":
			{
				"buffer_size": 4978,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "@import url(http://fonts.googleapis.com/css?family=Chewy|Open+Sans:700,400,300|Oswald:400,300|Source+Code+Pro:700,400);\n\nbody {\n  margin: 0;\n  padding: 20px;\n\n  font-family: \"Open Sans\", sans-serif;\n\n  box-sizing: border-box;\n  -moz-box-sizing: border-box;\n}\n\nbody > main > header {\n  height: 60px;\n  margin-top: 12px;\n  background-color: #fff;\n  border-bottom: 12px solid #eee;\n}\n\nbody > main > header h1 {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 0;\n  font-family: \"Chewy\", cursive;\n  font-size: 72px;\n  line-height: 60px;\n  cursor: default;\n  text-transform: lowercase;\n}\n\nbody > main > header h1 a {\n  color: #444;\n  text-decoration: none;\n}\n\nbody > main > header h1 a:hover {\n  color: #000;\n}\n\nh1, h2, h3 {\n  color: #444;\n}\n\nnav ul {\n  list-style: none;\n  padding-left: 0;\n}\n\nnav ul li {\n  padding: 10px;\n}\n\nnav ul li a {\n  color: #456;\n  text-decoration: none;\n}\n\nnav ul li.selected {\n  border-bottom: 3px solid black;\n}\n\nnav ul li:hover {\n  background-color: #eee;\n}\n\nnav ul li:hover a {\n  color: #789;\n}\n\nsection > h1,\nsection > h2,\nsection > h3 {\n  font-weight: 300;\n}\n\nsection > h1 {\n  font-size: 40px;\n  font-weight: 300;\n}\n\nsection > h2 {\n  font-size: 32px;\n}\n\nsection > h3 {\n  font-size: 24px;\n}\n\npre, code {\n  font-family: \"Source Code Pro\", monospace;\n}\n\npre {\n  font-size: 80%;\n}\n\ncode {\n  color: #04b;\n}\n\npre > code {\n  overflow-x: auto;\n}\n\nh1 small,\nh2 small {\n  color: #777;\n  font-size: 50%;\n}\n\nh1 small a {\n  text-decoration: none;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntable thead tr:last-child {\n  border-bottom: 1px solid black;\n}\n\ntable th,\ntable td {\n  padding: 0.5ex 0.5em;\n  text-align: left;\n  vertical-align: top;\n}\n\ntable td > p,\ntable td > ul {\n  /* Prevent Markdown-rendered <p>s from screwing up spacing */\n  margin: 0;\n}\n\n.index > nav {\n  position: fixed;\n  top: 110px;\n  bottom: 0;\n  left: 0;\n  width: 264px;\n  padding: 0 20px;\n  overflow: auto;\n}\n\n.index > nav ul li {\n  display: block;\n  padding-top: 0.5ex;\n  padding-bottom: 0.5ex;\n}\n\n.index > nav ul li.nav-header {\n  margin-top: 12px;\n  border-top: 1px solid black;\n  font-weight: bold;\n}\n\n.index > nav ul li.nav-header:hover {\n  background: none;\n}\n\n.index > nav ul li.selected {\n  border-bottom: none;\n  border-left: 3px solid #555;\n}\n\n.index > nav ul li.selected a {\n  position: relative;\n  left: -3px;\n}\n\narticle {\n  position: absolute;\n  top: 110px;\n  left: 300px;\n  right: 0;\n  padding: 0 20px;\n  max-width: 1600px;\n}\n\nsection.constructor {\n  border-top: 3px double #444;\n  margin-top: 20px;\n}\n\nsection.method {\n  border-top: 1px solid #444;\n}\n\nsection.description h1,\nsection.description h2,\nsection.description h3,\nsection.constructor h1,\nsection.constructor h2,\nsection.constructor h3,\nsection.method h1,\nsection.method h2,\nsection.method h3 {\n  font-family: Oswald, Helvetica, Arial, sans-serif;\n  font-weight: normal;\n}\n\nsection.method h2 {\n  font-size: 34px;\n}\n\nsection.constructor table tbody tr:nth-child(odd) td,\nsection.method table tbody tr:nth-child(odd) td {\n  background-color: #eee;\n}\n\n.signature table th:nth-child(1),\n.signature table td:nth-child(1),\n.signature table th:nth-child(2),\n.signature table td:nth-child(2) {\n  width: 25%;\n}\n\n.signature table td:nth-child(1),\n.signature table td:nth-child(2),\n.examples table td:nth-child(1),\n.examples table td:nth-child(2) {\n  font-family: \"Source Code Pro\", monospace;\n}\n\n.signature, .examples, .perf {\n  margin-bottom: 24px;\n}\n\n.examples table tr td {\n  vertical-align: middle;\n\n  transition: background-color 0.5s;\n  -moz-transition: background-color 0.5s;\n  -o-transition: background-color 0.5s;\n  -webkit-transition: background-color 0.5s;\n}\n\n.examples table tr td ul {\n  list-style: none;\n  padding-left: 0;\n}\n\n.examples table tr.success td:last-child,\n.examples table tr.failure td:last-child {\n  background-position: right;\n  background-repeat: no-repeat;\n  background-size: 24px;\n  padding-right: 32px;\n}\n\n.examples table tr.success td:last-child {\n  background-image: url(\"success.png\");\n}\n\n.examples table tr.failure td:last-child {\n  background-image: url(\"failure.png\");\n}\n\n.examples table tr.highlight td {\n  color: #000;\n  background-color: #ff8 !important;\n}\n\n.perf {\n  position: relative;\n}\n\n.perf table {\n  display: none;\n}\n\n.perf.loading table, .perf.loaded table {\n  display: table;\n}\n\n.perf button {\n  border: 2px solid black;\n  border-radius: 8px;\n  background-color: #f0f0f0;\n  margin-top: 16px;\n  padding: 8px;\n  cursor: pointer;\n}\n\n.perf button:hover {\n  background-color: #2f7ed8;\n  color: #fff;\n}\n\n.perf.loading:after {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: white url(\"gears.gif\") no-repeat center;\n  opacity: 0.5;\n}\n\n.examples table th:last-child,\n.examples table td:last-child,\n.perf table th:last-child,\n.perf table td:last-child {\n  text-align: right;\n}\n\n#spec-failures {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 16px;\n\n  background-color: #400;\n  color: #ffe;\n  z-index: 1;\n\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n\n#spec-failures a {\n  float: right;\n\n  color: #ff8;\n}\n\n#spec-failures a:hover {\n  color: #ff0;\n}\n\n#spec-failures:empty {\n  display: none;\n}\n\n.CodeMirror {\n  height: auto;\n}\n\n.CodeMirror-scroll {\n  overflow-y: hidden;\n  overflow-x: auto;\n}\n\n#highlighting-progress {\n  position: fixed;\n  bottom: 10px;\n  right: -500px;\n  padding: 1ex 1em;\n\n  background-color: #000;\n  color: #fff;\n\n  opacity: 0.8;\n  filter: alpha(opacity=80);\n\n  transition: right 0.5s;\n  -moz-transition: right 0.5s;\n  -o-transition: right 0.5s;\n  -webkit-transition: right 0.5s;\n}\n\n#highlighting-progress:not(:empty):before {\n  content: \"Highlighting code examples - \";\n\n  right: 10px;\n\n  transition: right 0.5s;\n  -moz-transition: right 0.5s;\n  -o-transition: right 0.5s;\n  -webkit-transition: right 0.5s;\n}\n\n#highlighting-progress:empty {\n  display: none;\n}\n",
			"file": "autodoc/docs.css",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 5878,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "@import url(http://fonts.googleapis.com/css?family=Chewy|Open+Sans:700,400,300|Oswald:400,300|Source+Code+Pro:700,400);\n\nbody {\n  margin: 0;\n  padding: 20px;\n\n  font-family: \"Open Sans\", sans-serif;\n\n  box-sizing: border-box;\n  -moz-box-sizing: border-box;\n}\n\nbody > main > header {\n  height: 60px;\n  margin-top: 12px;\n  background-color: #fff;\n  border-bottom: 12px solid #eee;\n}\n\nbody > main > header h1 {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 0;\n  font-family: \"Chewy\", cursive;\n  font-size: 72px;\n  line-height: 60px;\n  cursor: default;\n  text-transform: lowercase;\n}\n\nbody > main > header h1 a {\n  color: #444;\n  text-decoration: none;\n}\n\nbody > main > header h1 a:hover {\n  color: #000;\n}\n\nh1, h2, h3 {\n  color: #444;\n}\n\nnav ul {\n  list-style: none;\n  padding-left: 0;\n}\n\nnav ul li {\n  padding: 10px;\n}\n\nnav ul li a {\n  color: #456;\n  text-decoration: none;\n}\n\nnav ul li.selected {\n  border-bottom: 3px solid black;\n}\n\nnav ul li:hover {\n  background-color: #eee;\n}\n\nnav ul li:hover a {\n  color: #789;\n}\n\nsection > h1,\nsection > h2,\nsection > h3 {\n  font-weight: 300;\n}\n\nsection > h1 {\n  font-size: 40px;\n  font-weight: 300;\n}\n\nsection > h2 {\n  font-size: 32px;\n}\n\nsection > h3 {\n  font-size: 24px;\n}\n\npre, code {\n  font-family: \"Source Code Pro\", monospace;\n}\n\npre {\n  font-size: 80%;\n}\n\ncode {\n  color: #04b;\n}\n\npre > code {\n  overflow-x: auto;\n}\n\nh1 small,\nh2 small {\n  color: #777;\n  font-size: 50%;\n}\n\nh1 small a {\n  text-decoration: none;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntable thead tr:last-child {\n  border-bottom: 1px solid black;\n}\n\ntable th,\ntable td {\n  padding: 0.5ex 0.5em;\n  text-align: left;\n  vertical-align: top;\n}\n\ntable td > p,\ntable td > ul {\n  /* Prevent Markdown-rendered <p>s from screwing up spacing */\n  margin: 0;\n}\n\n.index > nav {\n  position: fixed;\n  top: 110px;\n  bottom: 0;\n  left: 0;\n  width: 264px;\n  padding: 0 20px;\n  overflow: auto;\n}\n\n.index > nav ul li {\n  display: block;\n  padding-top: 0.5ex;\n  padding-bottom: 0.5ex;\n}\n\n.index > nav ul li.nav-header {\n  margin-top: 12px;\n  border-top: 1px solid black;\n  font-weight: bold;\n}\n\n.index > nav ul li.nav-header:hover {\n  background: none;\n}\n\n.index > nav ul li.selected {\n  border-bottom: none;\n  border-left: 3px solid #555;\n}\n\n.index > nav ul li.selected a {\n  position: relative;\n  left: -3px;\n}\n\narticle {\n  position: absolute;\n  top: 110px;\n  left: 300px;\n  right: 0;\n  padding: 0 20px;\n  max-width: 1600px;\n}\n\nsection.constructor {\n  border-top: 3px double #444;\n  margin-top: 20px;\n}\n\nsection.method {\n  border-top: 1px solid #444;\n}\n\nsection.description h1,\nsection.description h2,\nsection.description h3,\nsection.constructor h1,\nsection.constructor h2,\nsection.constructor h3,\nsection.method h1,\nsection.method h2,\nsection.method h3 {\n  font-family: Oswald, Helvetica, Arial, sans-serif;\n  font-weight: normal;\n}\n\nsection.method h2 {\n  font-size: 34px;\n}\n\nsection.constructor table tbody tr:nth-child(odd) td,\nsection.method table tbody tr:nth-child(odd) td {\n  background-color: #eee;\n}\n\n.signature table th:nth-child(1),\n.signature table td:nth-child(1),\n.signature table th:nth-child(2),\n.signature table td:nth-child(2) {\n  width: 25%;\n}\n\n.signature table td:nth-child(1),\n.signature table td:nth-child(2),\n.examples table td:nth-child(1),\n.examples table td:nth-child(2) {\n  font-family: \"Source Code Pro\", monospace;\n}\n\n.signature, .examples, .perf {\n  margin-bottom: 24px;\n}\n\n.examples table tr td {\n  vertical-align: middle;\n\n  transition: background-color 0.5s;\n  -moz-transition: background-color 0.5s;\n  -o-transition: background-color 0.5s;\n  -webkit-transition: background-color 0.5s;\n}\n\n.examples table tr td ul {\n  list-style: none;\n  padding-left: 0;\n}\n\n.examples table tr.success td:last-child,\n.examples table tr.failure td:last-child {\n  background-position: right;\n  background-repeat: no-repeat;\n  background-size: 24px;\n  padding-right: 32px;\n}\n\n.examples table tr.success td:last-child {\n  background-image: url(\"success.png\");\n}\n\n.examples table tr.failure td:last-child {\n  background-image: url(\"failure.png\");\n}\n\n.examples table tr.highlight td {\n  color: #000;\n  background-color: #ff8 !important;\n}\n\n.perf {\n  position: relative;\n}\n\n.perf table {\n  display: none;\n}\n\n.perf.loading table, .perf.loaded table {\n  display: table;\n}\n\n.perf button {\n  border: 2px solid black;\n  border-radius: 8px;\n  background-color: #f0f0f0;\n  margin-top: 16px;\n  padding: 8px;\n  cursor: pointer;\n}\n\n.perf button:hover {\n  background-color: #2f7ed8;\n  color: #fff;\n}\n\n.perf.loading:after {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: white url(\"gears.gif\") no-repeat center;\n  opacity: 0.5;\n}\n\n.examples table th:last-child,\n.examples table td:last-child,\n.perf table th:last-child,\n.perf table td:last-child {\n  text-align: right;\n}\n\n#spec-failures {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 16px;\n\n  background-color: #400;\n  color: #ffe;\n  z-index: 1;\n\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n\n#spec-failures a {\n  float: right;\n\n  color: #ff8;\n}\n\n#spec-failures a:hover {\n  color: #ff0;\n}\n\n#spec-failures:empty {\n  display: none;\n}\n\n.CodeMirror {\n  height: auto;\n}\n\n.CodeMirror-scroll {\n  overflow-y: hidden;\n  overflow-x: auto;\n}\n\n#highlighting-progress {\n  position: fixed;\n  bottom: 10px;\n  padding: 1ex 1em;\n\n  background-color: #000;\n  color: #fff;\n\n  opacity: 0.8;\n  filter: alpha(opacity=80);\n}\n\n#highlighting-progress:not(:empty) {\n  right: 10px;\n\n  transition: right 0.5s;\n  -moz-transition: right 0.5s;\n  -o-transition: right 0.5s;\n  -webkit-transition: right 0.5s;\n}\n\n#highlighting-progress:not(:empty):before {\n  content: \"Highlighting code examples - \";\n}\n\n#highlighting-progress:empty {\n  right: -500px;\n\n  transition: right 0.5s;\n  -moz-transition: right 0.5s;\n  -o-transition: right 0.5s;\n  -webkit-transition: right 0.5s;\n}\n",
			"file": "docs/docs.css",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 5900,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lazy.dom.js",
			"settings":
			{
				"buffer_size": 3498,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 194.0,
		"selected_items":
		[
			[
				"View",
				"View In Browser"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Preview",
				"Preview"
			],
			[
				"Package",
				"Package Control: Add Repository"
			]
		],
		"width": 561.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/usr/local/google/home/dantao/sandbox/lazy/autodoc/index.html",
		"/usr/local/google/home/dantao/sandbox/lazy/package.json",
		"/usr/local/google/home/dantao/sandbox/lazy/lazy.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/lazy_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/experimental/lazy.json.js",
		"/usr/local/google/home/dantao/sandbox/lazy/experimental/index.html",
		"/usr/local/google/home/dantao/sandbox/lazy/primes.html",
		"/usr/local/google/home/dantao/sandbox/lazy/experimental/demo.js",
		"/usr/local/google/home/dantao/sandbox/lazy/.gitignore",
		"/usr/local/google/home/dantao/sandbox/lazy/experimental/demo.css",
		"/usr/local/google/home/dantao/sandbox/lots-of-data/small_slice.json",
		"/usr/local/google/home/dantao/sandbox/lazy/lazy.node.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/filter_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/support/person.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/support/spec_helper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/experimental/json_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/perf/perf_race.js",
		"/usr/local/google/home/dantao/sandbox/lazy/node_modules/lodash/lodash.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lazy.sublime-project",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/string_like_sequence_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/node_modules/benchmark/benchmark.js",
		"/usr/local/google/home/dantao/sandbox/lazy/experimental/parse_json.js",
		"/usr/local/google/home/dantao/sandbox/lazy/demo.html",
		"/usr/local/google/home/dantao/sandbox/lazy/Rakefile",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/assertEquality.js",
		"/usr/local/google/home/dantao/sandbox/lazy/.travis.yml",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/docs.css",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/handlers.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/breakneck_helper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/uniq_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/sort_by_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/map_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/drop_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/doc_helper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/docs.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/node_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/node_modules/jasmine-node/node_modules/jasmine-reporters/ext/jasmine.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/index.html",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/common.css",
		"/usr/local/google/home/dantao/sandbox/lazy/docs.css",
		"/usr/local/google/home/dantao/sandbox/lazy/docs.html",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/async_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/index.html",
		"/usr/local/google/home/dantao/sandbox/lazy/node_modules/jasmine-node/spec/reporter_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/generated_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/node_modules/race.js/examples/node_example.js",
		"/usr/local/google/home/dantao/sandbox/lazy/outline.txt",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/string_like_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/object_like_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/array_like_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/iterator.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/main.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/lib/boiler.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/boot.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/comparisons.js",
		"/usr/local/google/home/dantao/sandbox/lazy/README.md",
		"/usr/local/google/home/dantao/sandbox/lazy/site/share.html",
		"/usr/local/google/home/dantao/sandbox/lazy/lazy.dom.js",
		"/usr/local/google/home/dantao/sandbox/lazy/templates/lazy/publish.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/templates/site_template.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/templates/lazy/comparison_spec.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/experimental.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/stream_like_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/templates/index_template.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/support/fake_stream.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/templates/class_template.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/site/templates/index_template.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/site/ga.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/lib/lodash.js",
		"/usr/local/google/home/dantao/sandbox/lazy/comparisons.html",
		"/usr/local/google/home/dantao/sandbox/lazy/site/assets/site.css",
		"/usr/local/google/home/dantao/sandbox/lazy/index.html.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/site/lib/sloth.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/templates/method_template.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/Gemfile",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/async_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/common.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/node_benchmark.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/support/comparison_suite.js",
		"/usr/local/google/home/dantao/sandbox/lazy/site/assets/common.css",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/class.html.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/index.html.mustache",
		"/usr/local/google/home/dantao/sandbox/lazy/stream_test.js",
		"/usr/local/google/home/dantao/sandbox/lazy/parse_test.js",
		"/usr/local/google/home/dantao/sandbox/lazy/.npmignore",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/object_wrapper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/unique_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/init.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/boot.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/comparisons.js",
		"/usr/local/google/home/dantao/sandbox/lazy/templates/haruki/publish.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/array_wrapper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/take_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/static/sentences.txt",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/mapped_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/filtered_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/assets/docs.css",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/filtered_array_wrapper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/mapped_array_wrapper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/lib/sugar.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/wu.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/filtering_iterator.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/set.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/string_match_iterator.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/char_iterator.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/split_with_regexp_iterator.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/split_with_string_iterator.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/string_wrapper.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/event_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/indexed_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/lib/jslinq.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/lib/lodash.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/node_perf.js",
		"/usr/local/google/home/dantao/sandbox/lazy/spec/boot_node.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/caching_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/sequence_iterator.js",
		"/usr/local/google/home/dantao/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/share.html",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/string_match_sequence.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/lib/linq.js",
		"/usr/local/google/home/dantao/sandbox/lazy/lib/init_dom.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/lazy_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/support/boot.js",
		"/usr/local/google/home/dantao/sandbox/lazy/docs/lib/from.js",
		"/usr/local/google/home/dantao/sandbox/lazy/from.js",
		"/usr/local/google/home/dantao/sandbox/lazy/specs/lazy_spec.js",
		"/usr/local/google/home/dantao/sandbox/lazy/specs/lib/tests.css"
	],
	"find":
	{
		"height": 45.0
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
			"",
			"*.js",
			"*_spec.js",
			"_spec*.js",
			"*.js",
			"",
			"*.js",
			"*.sass",
			"*.js",
			"",
			"*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GeneratedSeq",
			"AsyncHandle",
			"ObjectWrapper",
			"this",
			"@constructor",
			"AsyncSequence",
			"StringLikeSeq",
			"GeneratedSeq",
			"StringLikeSeq",
			"StringLIkeSeq",
			"ga.js",
			"handle",
			"noop",
			"Lazy.noo",
			"uses setImmediate if availabl",
			"getIterator =",
			"getIterator:",
			"getIterator",
			"complete",
			"TakeSeq",
			"Filtered",
			"8",
			"reportCount",
			"overflow-y: scroll;",
			"10px",
			"expectToken",
			"AsyncSeq",
			"form",
			"openBrackets",
			"readSeg",
			"unexpectedE",
			"readSeg",
			"    this.position = match.index + 1;\n",
			"unexpectedToken",
			"this.",
			"readToken",
			"unexpected",
			"tokenMatches",
			"sortedIndex",
			"ObjectLike",
			"Defining custom",
			"SortedSeq",
			"reverse =",
			"SortedSeq",
			"pluck",
			"map =",
			"pluck =",
			"reverse =",
			"ReversedSeq",
			"last =",
			"walk",
			"ReversedSEq",
			"reverse =",
			"ReversedSeq",
			"ObjectLikeSequence",
			"Reversed",
			"IndexedReversed",
			"Reversedarray",
			"ReversedSeq",
			"sortBy",
			"reverse =",
			"last =",
			"forEach",
			"function forEach",
			"sortFn",
			"SortedSeq",
			"reverse =",
			"REversedSEq",
			"ReversedSeq",
			"indexOf",
			"set.add",
			"getEach",
			"createCache",
			"contains =",
			"UniqueSeq",
			"function contains",
			"UniqueArray",
			"UniqueSeq",
			"createCall",
			"UniqueSeq",
			"uniq =",
			"function SEt",
			"contains =",
			"key",
			"randomNumbers",
			"uniq",
			"unique",
			"containsBefore",
			"function contains",
			"indexOf",
			"value",
			"createSet",
			"swap",
			"contains",
			"recursiveFor",
			"generatorFn",
			"CharIterator",
			"this",
			"CharIterator",
			"this.source",
			"CharIterator",
			"SplitWithRegExpIterator",
			"SplitWithStringIterator",
			"StringMatchIter",
			"StringSeg",
			"CharIter",
			"OmitSeq",
			"pick",
			"get =",
			"PickSeq",
			"Inverte",
			"DefaultsSeq",
			"assign =",
			"pairs()",
			"find",
			"getFirst",
			"first =",
			"pairs",
			"find",
			"filter",
			"AssignSeq",
			"getIndex =",
			"ObjectLike",
			"StreamingHttp",
			"AsyncSequence",
			"ArrayLikeSeq",
			"size()",
			"MappedSequ"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"@returns",
			"`ObjectLikeSequence`",
			"CachingSequence",
			"IteratingSequence",
			"\"",
			">",
			"<",
			">",
			"<",
			">",
			"<",
			"    ",
			"**$1**",
			"*$1*",
			"[$2]($1)",
			"- $1",
			"[$2]($1)",
			"`$1`",
			"**$1**",
			"*$1*",
			"'",
			"labelField_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Rakefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 963,
						"regions":
						{
						},
						"selection":
						[
							[
								963,
								963
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lazy.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 144055,
						"regions":
						{
						},
						"selection":
						[
							[
								118779,
								118779
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 110470.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "docs/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 372257,
						"regions":
						{
						},
						"selection":
						[
							[
								1251,
								1251
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "autodoc/index.html.mustache",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6526,
						"regions":
						{
						},
						"selection":
						[
							[
								1217,
								1217
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "autodoc/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 374642,
						"regions":
						{
						},
						"selection":
						[
							[
								993,
								993
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "autodoc/docs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4978,
						"regions":
						{
						},
						"selection":
						[
							[
								743,
								743
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "docs/docs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4978,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "autodoc/docs.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5878,
						"regions":
						{
						},
						"selection":
						[
							[
								5429,
								5429
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8761.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "docs/docs.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5900,
						"regions":
						{
						},
						"selection":
						[
							[
								5900,
								5900
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8788.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lazy.dom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3498,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 359.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "lazy.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"index",
				"autodoc/index.html"
			],
			[
				"docs",
				"autodoc/docs.css"
			],
			[
				"lazy.dom",
				"lazy.dom.js"
			],
			[
				"lazy",
				"lazy.js"
			],
			[
				"rake",
				"Rakefile"
			],
			[
				"lazy_sp",
				"spec/lazy_spec.js"
			],
			[
				"lazy.n",
				"lazy.node.js"
			],
			[
				"lazy_s",
				"spec/lazy_spec.js"
			],
			[
				"spec_h",
				"spec/support/spec_helper.js"
			],
			[
				"pe",
				"spec/support/person.js"
			],
			[
				"filter_",
				"spec/filter_spec.js"
			],
			[
				"perf",
				"perf/perf_race.js"
			],
			[
				"string_",
				"spec/string_like_sequence_spec.js"
			],
			[
				".git",
				".gitignore"
			],
			[
				"benc",
				"node_modules/benchmark/benchmark.js"
			],
			[
				"laz",
				"lazy.js"
			],
			[
				"parse",
				"experimental/parse_json.js"
			],
			[
				"lazy.node",
				"lazy.node.js"
			],
			[
				"pack",
				"package.json"
			],
			[
				"trav",
				".travis.yml"
			],
			[
				"handler",
				"docs/handlers.js"
			],
			[
				"uniq",
				"spec/uniq_spec.js"
			],
			[
				"sort_",
				"spec/sort_by_spec.js"
			],
			[
				"map",
				"spec/map_spec.js"
			],
			[
				"drop_",
				"spec/drop_spec.js"
			],
			[
				"doc_",
				"docs/doc_helper.js"
			],
			[
				"jasmin",
				"node_modules/jasmine-node/node_modules/jasmine-reporters/ext/jasmine.js"
			],
			[
				"node",
				"spec/node_spec.js"
			],
			[
				"lazy_spec",
				"spec/lazy_spec.js"
			],
			[
				"spec_helper",
				"spec/support/spec_helper.js"
			],
			[
				"doc_h",
				"docs/doc_helper.js"
			],
			[
				"doc",
				"docs/doc_helper.js"
			],
			[
				"comm",
				"docs/common.css"
			],
			[
				"node_sp",
				"spec/node_spec.js"
			],
			[
				"node_e",
				"node_modules/race.js/examples/node_example.js"
			],
			[
				"gener",
				"lib/generated_sequence.js"
			],
			[
				"genera",
				"lib/generated_sequence.js"
			],
			[
				"object",
				"lib/object_like_sequence.js"
			],
			[
				"seq",
				"lib/sequence.js"
			],
			[
				"iter",
				"lib/iterator.js"
			],
			[
				"main",
				"lib/main.js"
			],
			[
				"lazy_",
				"spec/lazy_spec.js"
			],
			[
				"array",
				"lib/array_like_sequence.js"
			],
			[
				"boot",
				"site/boot.js"
			],
			[
				"compari",
				"site/comparisons.js"
			],
			[
				"spec",
				"spec/lazy_spec.js"
			],
			[
				"site",
				"site/templates/site_template.mustache"
			],
			[
				"shar",
				"site/share.html"
			],
			[
				"pub",
				"templates/lazy/publish.js"
			],
			[
				"class",
				"docs/templates/class_template.mustache"
			],
			[
				"node_",
				"spec/node_spec.js"
			],
			[
				"stream_like",
				"lib/stream_like_sequence.js"
			],
			[
				"exp",
				"lib/experimental.js"
			],
			[
				"string_like",
				"lib/string_like_sequence.js"
			],
			[
				"lo",
				"site/lib/lodash.js"
			],
			[
				"array_",
				"lib/array_like_sequence.js"
			],
			[
				"read",
				"README.md"
			],
			[
				"compar",
				"site/comparisons.js"
			],
			[
				"comp",
				"comparisons.html"
			],
			[
				"share",
				"site/share.html"
			],
			[
				"async",
				"lib/async_sequence.js"
			],
			[
				"gem",
				"Gemfile"
			],
			[
				"meth",
				"docs/templates/method_template.mustache"
			],
			[
				"string",
				"lib/string_like_sequence.js"
			],
			[
				"obj",
				"lib/object_like_sequence.js"
			],
			[
				"common",
				"site/common.js"
			],
			[
				"lodash",
				"site/lib/lodash.js"
			],
			[
				"travis",
				".travis.yml"
			],
			[
				"stream",
				"stream_test.js"
			],
			[
				"com",
				"site/assets/common.css"
			],
			[
				"boo",
				"site/boot.js"
			],
			[
				"init",
				"lib/init.js"
			],
			[
				"comparison",
				"docs/comparisons.js"
			],
			[
				"take",
				"lib/take_sequence.js"
			],
			[
				"sen",
				"spec/static/sentences.txt"
			],
			[
				"filter",
				"lib/filtered_sequence.js"
			],
			[
				"mapp",
				"lib/mapped_sequence.js"
			],
			[
				"mapped",
				"lib/mapped_sequence.js"
			],
			[
				"filtered",
				"lib/filtered_sequence.js"
			],
			[
				"wu",
				"lib/wu.js"
			],
			[
				"indexed",
				"lib/indexed_sequence.js"
			],
			[
				"event",
				"lib/event_sequence.js"
			],
			[
				"string_wrap",
				"lib/string_wrapper.js"
			],
			[
				"split_with",
				"lib/split_with_string_iterator.js"
			],
			[
				"char_",
				"lib/char_iterator.js"
			],
			[
				"string_match",
				"lib/string_match_iterator.js"
			],
			[
				"set",
				"lib/set.js"
			],
			[
				"lod",
				"docs/lib/lodash.js"
			],
			[
				"jsli",
				"docs/lib/jslinq.js"
			],
			[
				"pers",
				"spec/support/person.js"
			],
			[
				"indxed",
				"lib/indexed_sequence.js"
			],
			[
				"caching",
				"lib/caching_sequence.js"
			],
			[
				"cach",
				"lib/caching_sequence.js"
			],
			[
				"match",
				"lib/string_match_sequence.js"
			],
			[
				".trav",
				".travis.yml"
			],
			[
				"linq",
				"docs/lib/linq.js"
			],
			[
				"dom",
				"lib/init_dom.js"
			],
			[
				".travis",
				".travis.yml"
			],
			[
				"per",
				"spec/support/person.js"
			],
			[
				"jslinq",
				"docs/lib/jslinq.js"
			],
			[
				"jsl",
				"docs/lib/jslinq.js"
			],
			[
				"js",
				"docs/lib/jslinq.js"
			],
			[
				"from",
				"docs/lib/from.js"
			],
			[
				"do",
				"docs/assets/docs.css"
			],
			[
				"tests",
				"specs/lib/tests.css"
			],
			[
				"ini",
				"lib/init.js"
			],
			[
				"conca",
				"lib/concatenated_sequence.js"
			],
			[
				"tes",
				"specs/lib/tests.css"
			],
			[
				"filt",
				"lib/filtered_sequence.js"
			],
			[
				"generate",
				"lib/generated_sequence.js"
			],
			[
				"ind",
				"index.html"
			],
			[
				"inde",
				"lib/indexed_sequence.js"
			],
			[
				"conc",
				"lib/concatenated_sequence.js"
			],
			[
				"high",
				"specs/lib/hightables.js"
			],
			[
				"union",
				"lib/union_sequence.js"
			],
			[
				"inter",
				"lib/intersection_sequence.js"
			],
			[
				"fil",
				"lib/filtered_sequence.js"
			],
			[
				"shuff",
				"lib/shuffled_sequence.js"
			],
			[
				"zip",
				"lib/zipped_sequence.js"
			],
			[
				"with",
				"lib/without_sequence.js"
			],
			[
				"sort",
				"lib/sorted_sequence.js"
			],
			[
				"reverse",
				"lib/reversed_sequence.js"
			],
			[
				"shu",
				"lib/shuffled_sequence.js"
			],
			[
				"rever",
				"lib/reversed_sequence.js"
			],
			[
				"la",
				"lazy.js"
			],
			[
				"spec_report",
				"specs/support/spec_reporter.js"
			],
			[
				"spec_repo",
				"specs/support/spec_reporter.js"
			],
			[
				"explore",
				"css/explore.css"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
